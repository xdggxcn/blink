
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00000000 <_vector_table>:
	return cb(str, strl, ctx);
}

int cbvprintf_package(void *packaged, size_t len, uint32_t flags,
		      const char *fmt, va_list ap)
{
   0:	00 22 00 20 85 1f 00 00 7f 70 00 00 59 1f 00 00     .". .....p..Y...
	bool rws_pos_en = !!(flags & CBPRINTF_PACKAGE_ADD_RW_STR_POS);
	/* Get number of first read only strings present in the string.
	 * There is always at least 1 (fmt) but flags can indicate more, e.g
	 * fixed prefix appended to all strings.
	 */
	int fros_cnt = 1 + Z_CBPRINTF_PACKAGE_FIRST_RO_STR_CNT_GET(flags);
  10:	59 1f 00 00 59 1f 00 00 59 1f 00 00 00 00 00 00     Y...Y...Y.......
	...

	/*
	 * Otherwise we must ensure we can store at least
	 * the pointer to the format string itself.
	 */
	if (buf0 != NULL && BUF_OFFSET + sizeof(char *) > len) {
  2c:	01 1b 00 00 59 1f 00 00 00 00 00 00 71 1a 00 00     ....Y.......q...
		buf += len % CBPRINTF_PACKAGE_ALIGNMENT;
  3c:	59 1f 00 00                                         Y...

00000040 <_irq_vector_table>:
		len = CBPRINTF_PACKAGE_ALIGNMENT - (len % CBPRINTF_PACKAGE_ALIGNMENT);
  40:	71 1c 00 00 71 1c 00 00 71 1c 00 00 71 1c 00 00     q...q...q...q...
	int arg_idx	      = -1; /* Argument index. Preincremented thus starting from -1.*/
  50:	71 1c 00 00 71 1c 00 00 71 1c 00 00 71 1c 00 00     q...q...q...q...

		/* copy va_list data over to our buffer */
		if (is_str_arg) {
			s = va_arg(ap, char *);
process_string:
			if (buf0 != NULL) {
  60:	71 1c 00 00 71 1c 00 00 71 1c 00 00 71 1c 00 00     q...q...q...q...
#else
	#define RO_START 0
	#define RO_END 0
#endif

	return (((const char *)addr >= (const char *)RO_START) &&
  70:	71 1c 00 00 71 1c 00 00 71 1c 00 00 71 1c 00 00     q...q...q...q...
			bool do_ro = !!(flags & CBPRINTF_PACKAGE_ADD_RO_STR_POS);

			if (is_ro && !do_ro) {
				/* nothing to do */
			} else {
				uint32_t s_ptr_idx = BUF_OFFSET / sizeof(int);
  80:	71 1c 00 00 71 1c 00 00 71 1c 00 00 71 1c 00 00     q...q...q...q...
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
					__ASSERT(false, "String with too many arguments");
					return -EINVAL;
				}

				if (s_idx >= ARRAY_SIZE(str_ptr_pos)) {
  90:	71 1c 00 00 71 1c 00 00 71 1c 00 00 71 1c 00 00     q...q...q...q...
				if (buf0 != NULL) {
					/*
					 * Remember string pointer location.
					 * We will append non-ro strings later.
					 */
					str_ptr_pos[s_idx] = s_ptr_idx;
  a0:	71 1c 00 00 71 1c 00 00 71 1c 00 00 71 1c 00 00     q...q...q...q...
					if (is_ro) {
						/* flag read-only string. */
						str_ptr_pos[s_idx] |= STR_POS_RO_FLAG;
						s_ro_cnt++;
					} else {
						s_rw_cnt++;
  b0:	71 1c 00 00 71 1c 00 00 71 1c 00 00 71 1c 00 00     q...q...q...q...
			switch (*fmt) {
  c0:	71 1c 00 00 71 1c 00 00 71 1c 00 00 71 1c 00 00     q...q...q...q...
  d0:	71 1c 00 00 71 1c 00 00 71 1c 00 00 71 1c 00 00     q...q...q...q...
  e0:	71 1c 00 00 71 1c 00 00 71 1c 00 00 71 1c 00 00     q...q...q...q...
  f0:	71 1c 00 00 71 1c 00 00 71 1c 00 00 71 1c 00 00     q...q...q...q...

Disassembly of section text:

00000100 <__aeabi_uldivmod>:
     100:	b953      	cbnz	r3, 118 <__aeabi_uldivmod+0x18>
     102:	b94a      	cbnz	r2, 118 <__aeabi_uldivmod+0x18>
     104:	2900      	cmp	r1, #0
     106:	bf08      	it	eq
     108:	2800      	cmpeq	r0, #0
     10a:	bf1c      	itt	ne
     10c:	f04f 31ff 	movne.w	r1, #4294967295
     110:	f04f 30ff 	movne.w	r0, #4294967295
     114:	f000 b80c 	b.w	130 <__aeabi_idiv0>
     118:	f1ad 0c08 	sub.w	ip, sp, #8
     11c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
				align = VA_STACK_ALIGN(void *);
     120:	f000 f808 	bl	134 <__udivmoddi4>
			switch (*fmt) {
     124:	f8dd e004 	ldr.w	lr, [sp, #4]
     128:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     12c:	b004      	add	sp, #16
     12e:	4770      	bx	lr

00000130 <__aeabi_idiv0>:
     130:	4770      	bx	lr
     132:	bf00      	nop

00000134 <__udivmoddi4>:
     134:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     138:	4686      	mov	lr, r0
     13a:	468c      	mov	ip, r1
     13c:	4608      	mov	r0, r1
     13e:	9e08      	ldr	r6, [sp, #32]
     140:	4615      	mov	r5, r2
     142:	4674      	mov	r4, lr
		buf = (void *) ROUND_UP(buf, align);
     144:	4619      	mov	r1, r3
     146:	2b00      	cmp	r3, #0
     148:	f040 80c2 	bne.w	2d0 <__data_size+0x1c>
     14c:	4285      	cmp	r5, r0
     14e:	fab2 f282 	clz	r2, r2
		if (buf0 != NULL && BUF_OFFSET + size > len) {
     152:	d945      	bls.n	1e0 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x73>
     154:	b14a      	cbz	r2, 16a <CONFIG_IDLE_STACK_SIZE+0x2a>
     156:	f1c2 0320 	rsb	r3, r2, #32
     15a:	fa00 fc02 	lsl.w	ip, r0, r2
     15e:	fa2e f303 	lsr.w	r3, lr, r3
		if (is_str_arg) {
     162:	4095      	lsls	r5, r2
				s_idx++;
			}
			buf += sizeof(char *);

			is_str_arg = false;
		} else if (size == sizeof(int)) {
     164:	ea43 0c0c 	orr.w	ip, r3, ip
			int v = va_arg(ap, int);
     168:	4094      	lsls	r4, r2
     16a:	ea4f 4e15 	mov.w	lr, r5, lsr #16

			if (buf0 != NULL) {
				*(int *)buf = v;
			}
			buf += sizeof(int);
     16e:	b2a8      	uxth	r0, r5
     170:	fbbc f8fe 	udiv	r8, ip, lr
				arg_idx--;
     174:	0c23      	lsrs	r3, r4, #16
     176:	fb0e cc18 	mls	ip, lr, r8, ip
				parsing = false;
     17a:	fb08 f900 	mul.w	r9, r8, r0
				continue;
     17e:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
				if (fmt[-1] == 'l') {
     182:	4599      	cmp	r9, r3
     184:	d928      	bls.n	1d8 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x6b>
     186:	18eb      	adds	r3, r5, r3
					if (fmt[-2] == 'l') {
     188:	f108 37ff 	add.w	r7, r8, #4294967295
     18c:	d204      	bcs.n	198 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x2b>
     18e:	4599      	cmp	r9, r3
				parsing = false;
     190:	d902      	bls.n	198 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x2b>
					if (fmt[-2] == 'l') {
     192:	f1a8 0702 	sub.w	r7, r8, #2
						align = VA_STACK_ALIGN(long long);
     196:	442b      	add	r3, r5
				size = sizeof(void *);
     198:	eba3 0309 	sub.w	r3, r3, r9
					v.ld = va_arg(ap, long double);
     19c:	b2a4      	uxth	r4, r4
     19e:	fbb3 fcfe 	udiv	ip, r3, lr
     1a2:	fb0e 331c 	mls	r3, lr, ip, r3
     1a6:	fb0c f000 	mul.w	r0, ip, r0
				buf = (void *) ROUND_UP(buf, align);
     1aa:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
				if (buf0 != NULL) {
     1ae:	42a0      	cmp	r0, r4
					if (BUF_OFFSET + size > len) {
     1b0:	d914      	bls.n	1dc <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x6f>
     1b2:	192c      	adds	r4, r5, r4
     1b4:	f10c 33ff 	add.w	r3, ip, #4294967295
     1b8:	d204      	bcs.n	1c4 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x57>
						*(long double *)buf = v.ld;
     1ba:	42a0      	cmp	r0, r4
     1bc:	d902      	bls.n	1c4 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x57>
				buf += size;
     1be:	f1ac 0302 	sub.w	r3, ip, #2
				parsing = false;
     1c2:	442c      	add	r4, r5
			switch (*fmt) {
     1c4:	1a24      	subs	r4, r4, r0
     1c6:	ea43 4007 	orr.w	r0, r3, r7, lsl #16
			if (*++fmt == '\0') {
     1ca:	b11e      	cbz	r6, 1d4 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x67>
     1cc:	40d4      	lsrs	r4, r2
     1ce:	2300      	movs	r3, #0
     1d0:	6034      	str	r4, [r6, #0]
			if (!parsing) {
     1d2:	6073      	str	r3, [r6, #4]
     1d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     1d8:	4647      	mov	r7, r8
				if (*fmt == '%') {
     1da:	e7dd      	b.n	198 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x2b>
     1dc:	4663      	mov	r3, ip
					arg_idx++;
     1de:	e7f1      	b.n	1c4 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x57>
     1e0:	bb92      	cbnz	r2, 248 <CONFIG_I2C_NRFX_TRANSFER_TIMEOUT+0x54>
     1e2:	1b43      	subs	r3, r0, r5
					parsing = true;
     1e4:	2101      	movs	r1, #1
     1e6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
				align = VA_STACK_ALIGN(size_t);
     1ea:	b2af      	uxth	r7, r5
     1ec:	fbb3 fcfe 	udiv	ip, r3, lr
			switch (*fmt) {
     1f0:	0c20      	lsrs	r0, r4, #16
     1f2:	fb0e 331c 	mls	r3, lr, ip, r3
				parsing = false;
     1f6:	fb0c f807 	mul.w	r8, ip, r7

			if (buf0 != NULL) {
				*(long *)buf = v;
			}
			buf += sizeof(long);
		} else if (size == sizeof(long long)) {
     1fa:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
					return -EINVAL;
     1fe:	4598      	cmp	r8, r3
     200:	d962      	bls.n	2c8 <__data_size+0x14>
			long long v = va_arg(ap, long long);
     202:	18eb      	adds	r3, r5, r3
     204:	f10c 30ff 	add.w	r0, ip, #4294967295
     208:	d204      	bcs.n	214 <CONFIG_I2C_NRFX_TRANSFER_TIMEOUT+0x20>
     20a:	4598      	cmp	r8, r3
     20c:	d902      	bls.n	214 <CONFIG_I2C_NRFX_TRANSFER_TIMEOUT+0x20>

			if (buf0 != NULL) {
				if (Z_CBPRINTF_VA_STACK_LL_DBL_MEMCPY) {
					memcpy(buf, &v, sizeof(long long));
				} else {
					*(long long *)buf = v;
     20e:	f1ac 0002 	sub.w	r0, ip, #2
				}
			}
			buf += sizeof(long long);
     212:	442b      	add	r3, r5
     214:	eba3 0308 	sub.w	r3, r3, r8
		if (is_str_arg) {
     218:	b2a4      	uxth	r4, r4
		} else if (size == sizeof(int)) {
     21a:	fbb3 fcfe 	udiv	ip, r3, lr
			int v = va_arg(ap, int);
     21e:	fb0e 331c 	mls	r3, lr, ip, r3
			if (buf0 != NULL) {
     222:	fb0c f707 	mul.w	r7, ip, r7
		} else if (size == sizeof(long long)) {
     226:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
			long long v = va_arg(ap, long long);
     22a:	42a7      	cmp	r7, r4
     22c:	d94e      	bls.n	2cc <__data_size+0x18>
     22e:	192c      	adds	r4, r5, r4
     230:	f10c 33ff 	add.w	r3, ip, #4294967295
			if (buf0 != NULL) {
     234:	d204      	bcs.n	240 <CONFIG_I2C_NRFX_TRANSFER_TIMEOUT+0x4c>
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
     236:	42a7      	cmp	r7, r4
     238:	d902      	bls.n	240 <CONFIG_I2C_NRFX_TRANSFER_TIMEOUT+0x4c>
     23a:	f1ac 0302 	sub.w	r3, ip, #2
			s = va_arg(ap, char *);
     23e:	442c      	add	r4, r5
     240:	1be4      	subs	r4, r4, r7
     242:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
			if (is_ro && !do_ro) {
     246:	e7c0      	b.n	1ca <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x5d>
     248:	f1c2 0320 	rsb	r3, r2, #32
				uint32_t s_ptr_idx = BUF_OFFSET / sizeof(int);
     24c:	fa20 f103 	lsr.w	r1, r0, r3
     250:	4095      	lsls	r5, r2
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
     252:	4090      	lsls	r0, r2
     254:	fa2e f303 	lsr.w	r3, lr, r3
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
     258:	4303      	orrs	r3, r0
     25a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
				if (s_idx >= ARRAY_SIZE(str_ptr_pos)) {
     25e:	b2af      	uxth	r7, r5
				if (buf0 != NULL) {
     260:	fbb1 fcfe 	udiv	ip, r1, lr
					str_ptr_pos[s_idx] = s_ptr_idx;
     264:	fb0e 101c 	mls	r0, lr, ip, r1
     268:	0c19      	lsrs	r1, r3, #16
     26a:	fb0c f807 	mul.w	r8, ip, r7
     26e:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
					str_ptr_arg[s_idx] = arg_idx;
     272:	4588      	cmp	r8, r1
     274:	fa04 f402 	lsl.w	r4, r4, r2
					if (is_ro) {
     278:	d922      	bls.n	2c0 <__data_size+0xc>
     27a:	1869      	adds	r1, r5, r1
     27c:	f10c 30ff 	add.w	r0, ip, #4294967295
						str_ptr_pos[s_idx] |= STR_POS_RO_FLAG;
     280:	d204      	bcs.n	28c <CONFIG_I2C_NRFX_TRANSFER_TIMEOUT+0x98>
     282:	4588      	cmp	r8, r1
     284:	d902      	bls.n	28c <CONFIG_I2C_NRFX_TRANSFER_TIMEOUT+0x98>
						s_ro_cnt++;
     286:	f1ac 0002 	sub.w	r0, ip, #2
				s_idx++;
     28a:	4429      	add	r1, r5
					if (BUF_OFFSET + size > len) {
     28c:	eba1 0108 	sub.w	r1, r1, r8
			buf += sizeof(char *);
     290:	b29b      	uxth	r3, r3
					if (BUF_OFFSET + size > len) {
     292:	fbb1 fcfe 	udiv	ip, r1, lr
			switch (*fmt) {
     296:	fb0e 111c 	mls	r1, lr, ip, r1
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
     29a:	fb0c f707 	mul.w	r7, ip, r7
     29e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
				} else if (is_ro) {
     2a2:	429f      	cmp	r7, r3
     2a4:	d90e      	bls.n	2c4 <__data_size+0x10>
					len += 1;
     2a6:	18eb      	adds	r3, r5, r3
     2a8:	f10c 31ff 	add.w	r1, ip, #4294967295
					len += 2;
     2ac:	d204      	bcs.n	2b8 <__data_size+0x4>
				} else if (rws_pos_en) {
     2ae:	429f      	cmp	r7, r3
     2b0:	d902      	bls.n	2b8 <__data_size+0x4>
					len += strlen(s) + 1 + 1;
     2b2:	f1ac 0102 	sub.w	r1, ip, #2
     2b6:	442b      	add	r3, r5
     2b8:	1bdb      	subs	r3, r3, r7
     2ba:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
     2be:	e792      	b.n	1e6 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x79>
     2c0:	4660      	mov	r0, ip
     2c2:	e7e3      	b.n	28c <CONFIG_I2C_NRFX_TRANSFER_TIMEOUT+0x98>
	 * We remember the size of the argument list as a multiple of
	 * sizeof(int) and limit it to a 8-bit field. That means 1020 bytes
	 * worth of va_list, or about 127 arguments on a 64-bit system
	 * (twice that on 32-bit systems). That ought to be good enough.
	 */
	if (BUF_OFFSET / sizeof(int) > 255) {
     2c4:	4661      	mov	r1, ip
     2c6:	e7f7      	b.n	2b8 <__data_size+0x4>
     2c8:	4660      	mov	r0, ip
     2ca:	e7a3      	b.n	214 <CONFIG_I2C_NRFX_TRANSFER_TIMEOUT+0x20>

	/*
	 * If all we wanted was to count required buffer size
	 * then we have it now.
	 */
	if (buf0 == NULL) {
     2cc:	4663      	mov	r3, ip
		return BUF_OFFSET + len - CBPRINTF_PACKAGE_ALIGNMENT;
     2ce:	e7b7      	b.n	240 <CONFIG_I2C_NRFX_TRANSFER_TIMEOUT+0x4c>
     2d0:	4283      	cmp	r3, r0
     2d2:	d906      	bls.n	2e2 <__data_size+0x2e>
     2d4:	b916      	cbnz	r6, 2dc <__data_size+0x28>
     2d6:	2100      	movs	r1, #0
     2d8:	4608      	mov	r0, r1
     2da:	e77b      	b.n	1d4 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x67>
     2dc:	e9c6 e000 	strd	lr, r0, [r6]
	*(char **)buf0 = NULL;

	/* Record end of argument list. */
	pkg_hdr->desc.len = BUF_OFFSET / sizeof(int);

	if (rws_pos_en) {
     2e0:	e7f9      	b.n	2d6 <__data_size+0x22>
	*(char **)buf0 = NULL;
     2e2:	fab3 f783 	clz	r7, r3
	pkg_hdr->desc.len = BUF_OFFSET / sizeof(int);
     2e6:	b98f      	cbnz	r7, 30c <__data_size+0x58>
		/* Strings are appended, update location counter. */
		pkg_hdr->desc.str_cnt = 0;
		pkg_hdr->desc.rw_str_cnt = s_rw_cnt;
     2e8:	4283      	cmp	r3, r0
     2ea:	d301      	bcc.n	2f0 <__data_size+0x3c>
	if (rws_pos_en) {
     2ec:	4572      	cmp	r2, lr
		pkg_hdr->desc.rw_str_cnt = s_rw_cnt;
     2ee:	d808      	bhi.n	302 <__data_size+0x4e>
		/* Strings are appended, update append counter. */
		pkg_hdr->desc.str_cnt = s_rw_cnt;
		pkg_hdr->desc.rw_str_cnt = 0;
	}

	pkg_hdr->desc.ro_str_cnt = s_ro_cnt;
     2f0:	ebbe 0402 	subs.w	r4, lr, r2
#ifdef CONFIG_CBPRINTF_PACKAGE_HEADER_STORE_CREATION_FLAGS
	pkg_hdr->desc.pkg_flags = flags;
#endif

	/* Store strings pointer locations of read only strings. */
	if (s_ro_cnt) {
     2f4:	eb60 0303 	sbc.w	r3, r0, r3
     2f8:	2001      	movs	r0, #1
     2fa:	469c      	mov	ip, r3
		for (i = 0; i < s_idx; i++) {
     2fc:	b91e      	cbnz	r6, 306 <__data_size+0x52>
			}

			uint8_t pos = str_ptr_pos[i] & STR_POS_MASK;

			/* make sure it fits */
			if (BUF_OFFSET + 1 > len) {
     2fe:	2100      	movs	r1, #0
     300:	e768      	b.n	1d4 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x67>
		for (i = 0; i < s_idx; i++) {
     302:	4638      	mov	r0, r7
     304:	e7fa      	b.n	2fc <__data_size+0x48>
			/* find the string length including terminating '\0' */
			size = strlen(s) + 1;
		}

		/* make sure it fits */
		if (BUF_OFFSET + 1 + size > len) {
     306:	e9c6 4c00 	strd	r4, ip, [r6]
     30a:	e7f8      	b.n	2fe <__data_size+0x4a>
     30c:	f1c7 0c20 	rsb	ip, r7, #32
			*buf++ = str_ptr_arg[i];
     310:	40bb      	lsls	r3, r7
		if (BUF_OFFSET + 1 + size > len) {
     312:	fa22 f40c 	lsr.w	r4, r2, ip
			*buf++ = str_ptr_arg[i];
     316:	431c      	orrs	r4, r3
	for (i = 0; i < s_idx; i++) {
     318:	fa2e f10c 	lsr.w	r1, lr, ip
	/*
	 * TODO: remove pointers for appended strings since they're useless.
	 * TODO: explore leveraging same mechanism to remove alignment padding
	 */

	return BUF_OFFSET;
     31c:	fa20 f30c 	lsr.w	r3, r0, ip
		pkg_hdr->desc.str_cnt = s_rw_cnt;
     320:	40b8      	lsls	r0, r7
		pkg_hdr->desc.rw_str_cnt = 0;
     322:	4301      	orrs	r1, r0
			if (!(str_ptr_pos[i] & STR_POS_RO_FLAG)) {
     324:	ea4f 4914 	mov.w	r9, r4, lsr #16
     328:	fa0e f507 	lsl.w	r5, lr, r7
			if (BUF_OFFSET + 1 > len) {
     32c:	fbb3 f8f9 	udiv	r8, r3, r9
     330:	fa1f fe84 	uxth.w	lr, r4
			uint8_t pos = str_ptr_pos[i] & STR_POS_MASK;
     334:	fb09 3018 	mls	r0, r9, r8, r3
			if (BUF_OFFSET + 1 > len) {
     338:	0c0b      	lsrs	r3, r1, #16
			*buf++ = pos;
     33a:	fb08 fa0e 	mul.w	sl, r8, lr
		for (i = 0; i < s_idx; i++) {
     33e:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
		if (s_ro_cnt && str_ptr_pos[i] & STR_POS_RO_FLAG) {
     342:	459a      	cmp	sl, r3
     344:	fa02 f207 	lsl.w	r2, r2, r7
     348:	d940      	bls.n	3cc <__data_size+0x118>
     34a:	18e3      	adds	r3, r4, r3
     34c:	f108 30ff 	add.w	r0, r8, #4294967295
		if (rws_pos_en) {
     350:	d204      	bcs.n	35c <__data_size+0xa8>
     352:	459a      	cmp	sl, r3
			*buf++ = str_ptr_arg[i];
     354:	d902      	bls.n	35c <__data_size+0xa8>
     356:	f1a8 0002 	sub.w	r0, r8, #2
     35a:	4423      	add	r3, r4
			size = 0;
     35c:	eba3 030a 	sub.w	r3, r3, sl
		if (BUF_OFFSET + 1 + size > len) {
     360:	b289      	uxth	r1, r1
     362:	fbb3 f8f9 	udiv	r8, r3, r9
     366:	fb09 3318 	mls	r3, r9, r8, r3
		*buf++ = str_ptr_pos[i];
     36a:	fb08 fe0e 	mul.w	lr, r8, lr
     36e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
		memcpy(buf, s, size);
     372:	458e      	cmp	lr, r1
     374:	d92c      	bls.n	3d0 <__data_size+0x11c>
     376:	1861      	adds	r1, r4, r1
     378:	f108 33ff 	add.w	r3, r8, #4294967295
		buf += size;
     37c:	d204      	bcs.n	388 <__data_size+0xd4>
     37e:	458e      	cmp	lr, r1
	for (i = 0; i < s_idx; i++) {
     380:	d902      	bls.n	388 <__data_size+0xd4>
     382:	f1a8 0302 	sub.w	r3, r8, #2
     386:	4421      	add	r1, r4
     388:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
			s = *(char **)(buf0 + str_ptr_pos[i] * sizeof(int));
     38c:	fba0 9802 	umull	r9, r8, r0, r2
     390:	eba1 010e 	sub.w	r1, r1, lr
			*(char **)(buf0 + str_ptr_pos[i] * sizeof(int)) = NULL;
     394:	4541      	cmp	r1, r8
     396:	46ce      	mov	lr, r9
     398:	4643      	mov	r3, r8
			size = strlen(s) + 1;
     39a:	d302      	bcc.n	3a2 <__data_size+0xee>
     39c:	d106      	bne.n	3ac <__data_size+0xf8>
     39e:	454d      	cmp	r5, r9
     3a0:	d204      	bcs.n	3ac <__data_size+0xf8>
     3a2:	ebb9 0e02 	subs.w	lr, r9, r2
		return -EFAULT;
     3a6:	eb68 0304 	sbc.w	r3, r8, r4
     3aa:	3801      	subs	r0, #1
     3ac:	2e00      	cmp	r6, #0
     3ae:	d0a6      	beq.n	2fe <__data_size+0x4a>
     3b0:	ebb5 020e 	subs.w	r2, r5, lr
     3b4:	eb61 0103 	sbc.w	r1, r1, r3
     3b8:	fa01 fc0c 	lsl.w	ip, r1, ip
     3bc:	fa22 f307 	lsr.w	r3, r2, r7
     3c0:	ea4c 0303 	orr.w	r3, ip, r3
     3c4:	40f9      	lsrs	r1, r7
     3c6:	e9c6 3100 	strd	r3, r1, [r6]
     3ca:	e798      	b.n	2fe <__data_size+0x4a>
     3cc:	4640      	mov	r0, r8
     3ce:	e7c5      	b.n	35c <__data_size+0xa8>
     3d0:	4643      	mov	r3, r8
     3d2:	e7d9      	b.n	388 <__data_size+0xd4>
     3d4:	0000      	movs	r0, r0
	...

000003d8 <z_cbvprintf_impl>:
	return (int)count;
}

int z_cbvprintf_impl(cbprintf_cb out, void *ctx, const char *fp,
		     va_list ap, uint32_t flags)
{
     3d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     3dc:	b09f      	sub	sp, #124	; 0x7c
     3de:	4682      	mov	sl, r0
     3e0:	9103      	str	r1, [sp, #12]
     3e2:	4616      	mov	r6, r2
     3e4:	461c      	mov	r4, r3
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
     3e6:	2500      	movs	r5, #0
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
     3e8:	7830      	ldrb	r0, [r6, #0]
     3ea:	b910      	cbnz	r0, 3f2 <z_cbvprintf_impl+0x1a>
			OUTC(' ');
			--width;
		}
	}

	return count;
     3ec:	4628      	mov	r0, r5
     3ee:	f000 bd85 	b.w	efc <__z_interrupt_stack_SIZEOF+0x67c>
			OUTC(*fp++);
     3f2:	1c73      	adds	r3, r6, #1
		if (*fp != '%') {
     3f4:	2825      	cmp	r0, #37	; 0x25
			OUTC(*fp++);
     3f6:	9306      	str	r3, [sp, #24]
		if (*fp != '%') {
     3f8:	d006      	beq.n	408 <CONFIG_FLASH_SIZE+0x8>
			OUTC(*fp++);
     3fa:	9903      	ldr	r1, [sp, #12]
			OUTC('%');
     3fc:	47d0      	blx	sl
     3fe:	2800      	cmp	r0, #0
     400:	f2c0 857c 	blt.w	efc <__z_interrupt_stack_SIZEOF+0x67c>
     404:	3501      	adds	r5, #1
		if (bps == NULL) {
     406:	e227      	b.n	858 <CONFIG_ISR_STACK_SIZE+0x58>
		} state = {
     408:	2218      	movs	r2, #24
     40a:	2100      	movs	r1, #0
     40c:	a810      	add	r0, sp, #64	; 0x40
     40e:	f006 fe62 	bl	70d6 <memset>
	if (*sp == '%') {
     412:	7873      	ldrb	r3, [r6, #1]
     414:	2b25      	cmp	r3, #37	; 0x25
     416:	d07d      	beq.n	514 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x2c>
     418:	2300      	movs	r3, #0
     41a:	1c70      	adds	r0, r6, #1
     41c:	4698      	mov	r8, r3
     41e:	469e      	mov	lr, r3
     420:	469c      	mov	ip, r3
     422:	461f      	mov	r7, r3
     424:	4601      	mov	r1, r0
		switch (*sp) {
     426:	f810 2b01 	ldrb.w	r2, [r0], #1
     42a:	2a2b      	cmp	r2, #43	; 0x2b
     42c:	f000 80a1 	beq.w	572 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x8a>
     430:	f200 8098 	bhi.w	564 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x7c>
     434:	2a20      	cmp	r2, #32
     436:	f000 809f 	beq.w	578 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x90>
     43a:	2a23      	cmp	r2, #35	; 0x23
     43c:	f000 809f 	beq.w	57e <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x96>
     440:	b12b      	cbz	r3, 44e <CONFIG_FLASH_SIZE+0x4e>
     442:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
     446:	f043 0340 	orr.w	r3, r3, #64	; 0x40
     44a:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
     44e:	f1b8 0f00 	cmp.w	r8, #0
     452:	d005      	beq.n	460 <CONFIG_FLASH_SIZE+0x60>
     454:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
     458:	f043 0320 	orr.w	r3, r3, #32
     45c:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
     460:	f1be 0f00 	cmp.w	lr, #0
     464:	d005      	beq.n	472 <CONFIG_FLASH_SIZE+0x72>
     466:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
     46a:	f043 0310 	orr.w	r3, r3, #16
     46e:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
     472:	f1bc 0f00 	cmp.w	ip, #0
     476:	d005      	beq.n	484 <CONFIG_FLASH_SIZE+0x84>
     478:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
     47c:	f043 0308 	orr.w	r3, r3, #8
     480:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
     484:	b12f      	cbz	r7, 492 <CONFIG_FLASH_SIZE+0x92>
     486:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
     48a:	f043 0304 	orr.w	r3, r3, #4
     48e:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
	if (conv->flag_zero && conv->flag_dash) {
     492:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
     496:	f003 0044 	and.w	r0, r3, #68	; 0x44
     49a:	2844      	cmp	r0, #68	; 0x44
     49c:	d103      	bne.n	4a6 <CONFIG_FLASH_SIZE+0xa6>
		conv->flag_zero = false;
     49e:	f36f 1386 	bfc	r3, #6, #1
     4a2:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
	conv->width_present = true;
     4a6:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
	if (*sp == '*') {
     4aa:	2a2a      	cmp	r2, #42	; 0x2a
	conv->width_present = true;
     4ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
     4b0:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
	if (*sp == '*') {
     4b4:	d17f      	bne.n	5b6 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xce>
		conv->width_star = true;
     4b6:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
     4ba:	f042 0201 	orr.w	r2, r2, #1
		return ++sp;
     4be:	1c4b      	adds	r3, r1, #1
		conv->width_star = true;
     4c0:	f88d 2049 	strb.w	r2, [sp, #73]	; 0x49
	conv->prec_present = (*sp == '.');
     4c4:	781a      	ldrb	r2, [r3, #0]
     4c6:	2a2e      	cmp	r2, #46	; 0x2e
     4c8:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
     4cc:	bf0c      	ite	eq
     4ce:	2101      	moveq	r1, #1
     4d0:	2100      	movne	r1, #0
     4d2:	f361 0241 	bfi	r2, r1, #1, #1
     4d6:	f88d 2049 	strb.w	r2, [sp, #73]	; 0x49
	if (!conv->prec_present) {
     4da:	d178      	bne.n	5ce <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xe6>
	if (*sp == '*') {
     4dc:	785a      	ldrb	r2, [r3, #1]
     4de:	2a2a      	cmp	r2, #42	; 0x2a
     4e0:	d06e      	beq.n	5c0 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xd8>
	++sp;
     4e2:	3301      	adds	r3, #1
	size_t val = 0;
     4e4:	2200      	movs	r2, #0
		val = 10U * val + *sp++ - '0';
     4e6:	f04f 0c0a 	mov.w	ip, #10
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
     4ea:	4619      	mov	r1, r3
     4ec:	f811 0b01 	ldrb.w	r0, [r1], #1
     4f0:	f1a0 0730 	sub.w	r7, r0, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp) != 0) {
     4f4:	2f09      	cmp	r7, #9
     4f6:	f240 80ad 	bls.w	654 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x16c>
	conv->unsupported |= ((conv->prec_value < 0)
     4fa:	f89d 1048 	ldrb.w	r1, [sp, #72]	; 0x48
	conv->prec_value = prec;
     4fe:	9214      	str	r2, [sp, #80]	; 0x50
	conv->unsupported |= ((conv->prec_value < 0)
     500:	f3c1 0040 	ubfx	r0, r1, #1, #1
     504:	ea40 70d2 	orr.w	r0, r0, r2, lsr #31
     508:	460a      	mov	r2, r1
     50a:	f360 0241 	bfi	r2, r0, #1, #1
     50e:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
	return sp;
     512:	e05c      	b.n	5ce <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xe6>
		conv->specifier = *sp++;
     514:	1cb2      	adds	r2, r6, #2
     516:	9206      	str	r2, [sp, #24]
     518:	f88d 304b 	strb.w	r3, [sp, #75]	; 0x4b
		if (conv->width_star) {
     51c:	f89d 3049 	ldrb.w	r3, [sp, #73]	; 0x49
     520:	07d9      	lsls	r1, r3, #31
     522:	f140 8150 	bpl.w	7c6 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x2de>
			width = va_arg(ap, int);
     526:	f854 2b04 	ldr.w	r2, [r4], #4
     52a:	9204      	str	r2, [sp, #16]
			if (width < 0) {
     52c:	2a00      	cmp	r2, #0
     52e:	da08      	bge.n	542 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x5a>
				conv->flag_dash = true;
     530:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
     534:	f042 0204 	orr.w	r2, r2, #4
     538:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
				width = -width;
     53c:	9a04      	ldr	r2, [sp, #16]
     53e:	4252      	negs	r2, r2
		int width = -1;
     540:	9204      	str	r2, [sp, #16]
		if (conv->prec_star) {
     542:	075a      	lsls	r2, r3, #29
     544:	f140 8147 	bpl.w	7d6 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x2ee>
			int arg = va_arg(ap, int);
     548:	f854 7b04 	ldr.w	r7, [r4], #4
			if (arg < 0) {
     54c:	2f00      	cmp	r7, #0
     54e:	f280 8146 	bge.w	7de <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x2f6>
				conv->prec_present = false;
     552:	f89d 3049 	ldrb.w	r3, [sp, #73]	; 0x49
     556:	f36f 0341 	bfc	r3, #1, #1
     55a:	f88d 3049 	strb.w	r3, [sp, #73]	; 0x49
		int precision = -1;
     55e:	f04f 37ff 	mov.w	r7, #4294967295
     562:	e13c      	b.n	7de <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x2f6>
		switch (*sp) {
     564:	2a2d      	cmp	r2, #45	; 0x2d
     566:	d00d      	beq.n	584 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x9c>
     568:	2a30      	cmp	r2, #48	; 0x30
     56a:	f47f af69 	bne.w	440 <CONFIG_FLASH_SIZE+0x40>
     56e:	2301      	movs	r3, #1
	} while (loop);
     570:	e758      	b.n	424 <CONFIG_FLASH_SIZE+0x24>
		switch (*sp) {
     572:	f04f 0c01 	mov.w	ip, #1
     576:	e755      	b.n	424 <CONFIG_FLASH_SIZE+0x24>
     578:	f04f 0e01 	mov.w	lr, #1
     57c:	e752      	b.n	424 <CONFIG_FLASH_SIZE+0x24>
     57e:	f04f 0801 	mov.w	r8, #1
     582:	e74f      	b.n	424 <CONFIG_FLASH_SIZE+0x24>
     584:	2701      	movs	r7, #1
     586:	e74d      	b.n	424 <CONFIG_FLASH_SIZE+0x24>
		val = 10U * val + *sp++ - '0';
     588:	fb0e 7202 	mla	r2, lr, r2, r7
     58c:	3a30      	subs	r2, #48	; 0x30
     58e:	4603      	mov	r3, r0
     590:	4618      	mov	r0, r3
     592:	f810 7b01 	ldrb.w	r7, [r0], #1
     596:	f1a7 0c30 	sub.w	ip, r7, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp) != 0) {
     59a:	f1bc 0f09 	cmp.w	ip, #9
     59e:	d9f3      	bls.n	588 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xa0>
	if (sp != wp) {
     5a0:	4299      	cmp	r1, r3
     5a2:	d08f      	beq.n	4c4 <CONFIG_FLASH_SIZE+0xc4>
		conv->unsupported |= ((conv->width_value < 0)
     5a4:	f89d 1048 	ldrb.w	r1, [sp, #72]	; 0x48
		conv->width_value = width;
     5a8:	9213      	str	r2, [sp, #76]	; 0x4c
				      || (width != (size_t)conv->width_value));
     5aa:	0fd2      	lsrs	r2, r2, #31
		conv->unsupported |= ((conv->width_value < 0)
     5ac:	f362 0141 	bfi	r1, r2, #1, #1
     5b0:	f88d 1048 	strb.w	r1, [sp, #72]	; 0x48
     5b4:	e786      	b.n	4c4 <CONFIG_FLASH_SIZE+0xc4>
     5b6:	460b      	mov	r3, r1
	size_t val = 0;
     5b8:	2200      	movs	r2, #0
		val = 10U * val + *sp++ - '0';
     5ba:	f04f 0e0a 	mov.w	lr, #10
     5be:	e7e7      	b.n	590 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xa8>
		conv->prec_star = true;
     5c0:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
     5c4:	f042 0204 	orr.w	r2, r2, #4
     5c8:	f88d 2049 	strb.w	r2, [sp, #73]	; 0x49
		return ++sp;
     5cc:	3302      	adds	r3, #2
	switch (*sp) {
     5ce:	781a      	ldrb	r2, [r3, #0]
     5d0:	2a6c      	cmp	r2, #108	; 0x6c
     5d2:	d05f      	beq.n	694 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1ac>
     5d4:	d843      	bhi.n	65e <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x176>
     5d6:	2a68      	cmp	r2, #104	; 0x68
     5d8:	d049      	beq.n	66e <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x186>
     5da:	2a6a      	cmp	r2, #106	; 0x6a
     5dc:	d063      	beq.n	6a6 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1be>
     5de:	2a4c      	cmp	r2, #76	; 0x4c
     5e0:	d069      	beq.n	6b6 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1ce>
	conv->specifier = *sp++;
     5e2:	f813 2b01 	ldrb.w	r2, [r3], #1
     5e6:	9306      	str	r3, [sp, #24]
	switch (conv->specifier) {
     5e8:	2a78      	cmp	r2, #120	; 0x78
	conv->specifier = *sp++;
     5ea:	f88d 204b 	strb.w	r2, [sp, #75]	; 0x4b
	switch (conv->specifier) {
     5ee:	f200 80a9 	bhi.w	744 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x25c>
     5f2:	2a6d      	cmp	r2, #109	; 0x6d
     5f4:	d86c      	bhi.n	6d0 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1e8>
     5f6:	2a69      	cmp	r2, #105	; 0x69
     5f8:	f200 80a4 	bhi.w	744 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x25c>
     5fc:	2a57      	cmp	r2, #87	; 0x57
     5fe:	f200 8084 	bhi.w	70a <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x222>
     602:	2a41      	cmp	r2, #65	; 0x41
     604:	d004      	beq.n	610 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x128>
     606:	f1a2 0345 	sub.w	r3, r2, #69	; 0x45
     60a:	2b02      	cmp	r3, #2
     60c:	f200 809a 	bhi.w	744 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x25c>
		conv->specifier_cat = SPECIFIER_FP;
     610:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
			|| (conv->specifier == 'A');
     614:	f002 02df 	and.w	r2, r2, #223	; 0xdf
		conv->specifier_cat = SPECIFIER_FP;
     618:	2104      	movs	r1, #4
			|| (conv->specifier == 'A');
     61a:	f1a2 0741 	sub.w	r7, r2, #65	; 0x41
		conv->specifier_cat = SPECIFIER_FP;
     61e:	f361 0302 	bfi	r3, r1, #0, #3
			|| (conv->specifier == 'A');
     622:	427a      	negs	r2, r7
		conv->specifier_a = (conv->specifier == 'a')
     624:	f89d 1049 	ldrb.w	r1, [sp, #73]	; 0x49
		conv->specifier_cat = SPECIFIER_FP;
     628:	f88d 304a 	strb.w	r3, [sp, #74]	; 0x4a
			|| (conv->specifier == 'A');
     62c:	417a      	adcs	r2, r7
		conv->specifier_a = (conv->specifier == 'a')
     62e:	f362 11c7 	bfi	r1, r2, #7, #1
		if (conv->specifier_a
     632:	060a      	lsls	r2, r1, #24
		conv->specifier_a = (conv->specifier == 'a')
     634:	f88d 1049 	strb.w	r1, [sp, #73]	; 0x49
		if (conv->specifier_a
     638:	b2cb      	uxtb	r3, r1
     63a:	f100 80c2 	bmi.w	7c2 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x2da>
		if (conv->length_mod == LENGTH_L) {
     63e:	f003 0278 	and.w	r2, r3, #120	; 0x78
     642:	2a18      	cmp	r2, #24
     644:	f040 80ac 	bne.w	7a0 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x2b8>
			conv->length_mod = LENGTH_NONE;
     648:	f36f 03c6 	bfc	r3, #3, #4
     64c:	f88d 3049 	strb.w	r3, [sp, #73]	; 0x49
	bool unsupported = false;
     650:	2300      	movs	r3, #0
     652:	e09b      	b.n	78c <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x2a4>
		val = 10U * val + *sp++ - '0';
     654:	fb0c 0202 	mla	r2, ip, r2, r0
     658:	3a30      	subs	r2, #48	; 0x30
     65a:	460b      	mov	r3, r1
     65c:	e745      	b.n	4ea <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x2>
	switch (*sp) {
     65e:	2a74      	cmp	r2, #116	; 0x74
     660:	d025      	beq.n	6ae <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1c6>
     662:	2a7a      	cmp	r2, #122	; 0x7a
     664:	d1bd      	bne.n	5e2 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xfa>
		conv->length_mod = LENGTH_Z;
     666:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
     66a:	2106      	movs	r1, #6
     66c:	e00c      	b.n	688 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1a0>
		if (*++sp == 'h') {
     66e:	785a      	ldrb	r2, [r3, #1]
     670:	2a68      	cmp	r2, #104	; 0x68
     672:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
     676:	d106      	bne.n	686 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x19e>
			conv->length_mod = LENGTH_HH;
     678:	2101      	movs	r1, #1
			conv->length_mod = LENGTH_LL;
     67a:	f361 02c6 	bfi	r2, r1, #3, #4
     67e:	f88d 2049 	strb.w	r2, [sp, #73]	; 0x49
			++sp;
     682:	3302      	adds	r3, #2
     684:	e7ad      	b.n	5e2 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xfa>
			conv->length_mod = LENGTH_H;
     686:	2102      	movs	r1, #2
     688:	f361 02c6 	bfi	r2, r1, #3, #4
     68c:	f88d 2049 	strb.w	r2, [sp, #73]	; 0x49
		if (*++sp == 'h') {
     690:	3301      	adds	r3, #1
     692:	e7a6      	b.n	5e2 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xfa>
		if (*++sp == 'l') {
     694:	785a      	ldrb	r2, [r3, #1]
     696:	2a6c      	cmp	r2, #108	; 0x6c
     698:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
     69c:	d101      	bne.n	6a2 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1ba>
			conv->length_mod = LENGTH_LL;
     69e:	2104      	movs	r1, #4
     6a0:	e7eb      	b.n	67a <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x192>
			conv->length_mod = LENGTH_L;
     6a2:	2103      	movs	r1, #3
     6a4:	e7f0      	b.n	688 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1a0>
		conv->length_mod = LENGTH_J;
     6a6:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
     6aa:	2105      	movs	r1, #5
     6ac:	e7ec      	b.n	688 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1a0>
		conv->length_mod = LENGTH_T;
     6ae:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
     6b2:	2107      	movs	r1, #7
     6b4:	e7e8      	b.n	688 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1a0>
		conv->unsupported = true;
     6b6:	f8bd 2048 	ldrh.w	r2, [sp, #72]	; 0x48
     6ba:	f422 42f0 	bic.w	r2, r2, #30720	; 0x7800
     6be:	f022 0202 	bic.w	r2, r2, #2
     6c2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
     6c6:	f042 0202 	orr.w	r2, r2, #2
     6ca:	f8ad 2048 	strh.w	r2, [sp, #72]	; 0x48
		break;
     6ce:	e7df      	b.n	690 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1a8>
	switch (conv->specifier) {
     6d0:	3a6e      	subs	r2, #110	; 0x6e
     6d2:	b2d3      	uxtb	r3, r2
     6d4:	2201      	movs	r2, #1
     6d6:	409a      	lsls	r2, r3
     6d8:	f240 4382 	movw	r3, #1154	; 0x482
     6dc:	421a      	tst	r2, r3
     6de:	f89d 3049 	ldrb.w	r3, [sp, #73]	; 0x49
     6e2:	d136      	bne.n	752 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x26a>
     6e4:	f012 0f24 	tst.w	r2, #36	; 0x24
     6e8:	d15e      	bne.n	7a8 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x2c0>
     6ea:	07d1      	lsls	r1, r2, #31
     6ec:	d52a      	bpl.n	744 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x25c>
		conv->specifier_cat = SPECIFIER_PTR;
     6ee:	f89d 204a 	ldrb.w	r2, [sp, #74]	; 0x4a
		if (conv->length_mod == LENGTH_UPPER_L) {
     6f2:	f003 0378 	and.w	r3, r3, #120	; 0x78
     6f6:	f1a3 0040 	sub.w	r0, r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_PTR;
     6fa:	2103      	movs	r1, #3
     6fc:	f361 0202 	bfi	r2, r1, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
     700:	4243      	negs	r3, r0
		conv->specifier_cat = SPECIFIER_PTR;
     702:	f88d 204a 	strb.w	r2, [sp, #74]	; 0x4a
		if (conv->length_mod == LENGTH_UPPER_L) {
     706:	4143      	adcs	r3, r0
     708:	e040      	b.n	78c <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x2a4>
	switch (conv->specifier) {
     70a:	f1a2 0158 	sub.w	r1, r2, #88	; 0x58
     70e:	b2c9      	uxtb	r1, r1
     710:	2001      	movs	r0, #1
     712:	fa00 f101 	lsl.w	r1, r0, r1
     716:	f411 4f62 	tst.w	r1, #57856	; 0xe200
     71a:	f47f af79 	bne.w	610 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x128>
     71e:	f640 0301 	movw	r3, #2049	; 0x801
     722:	4219      	tst	r1, r3
     724:	f89d 3049 	ldrb.w	r3, [sp, #73]	; 0x49
     728:	d119      	bne.n	75e <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x276>
     72a:	f411 3f04 	tst.w	r1, #135168	; 0x21000
     72e:	d009      	beq.n	744 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x25c>
		conv->specifier_cat = SPECIFIER_SINT;
     730:	f89d 204a 	ldrb.w	r2, [sp, #74]	; 0x4a
     734:	f360 0202 	bfi	r2, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
     738:	f003 0378 	and.w	r3, r3, #120	; 0x78
     73c:	2b40      	cmp	r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_UINT;
     73e:	f88d 204a 	strb.w	r2, [sp, #74]	; 0x4a
		if (conv->length_mod == LENGTH_UPPER_L) {
     742:	d185      	bne.n	650 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x168>
		conv->invalid = true;
     744:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
     748:	f043 0301 	orr.w	r3, r3, #1
     74c:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
		break;
     750:	e77e      	b.n	650 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x168>
		conv->specifier_cat = SPECIFIER_UINT;
     752:	f89d 204a 	ldrb.w	r2, [sp, #74]	; 0x4a
     756:	2102      	movs	r1, #2
     758:	f361 0202 	bfi	r2, r1, #0, #3
     75c:	e7ec      	b.n	738 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x250>
     75e:	f89d 104a 	ldrb.w	r1, [sp, #74]	; 0x4a
     762:	2002      	movs	r0, #2
		if (conv->length_mod == LENGTH_UPPER_L) {
     764:	f003 0378 	and.w	r3, r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_UINT;
     768:	f360 0102 	bfi	r1, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
     76c:	2b40      	cmp	r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_UINT;
     76e:	f88d 104a 	strb.w	r1, [sp, #74]	; 0x4a
			conv->invalid = true;
     772:	bf02      	ittt	eq
     774:	f89d 1048 	ldrbeq.w	r1, [sp, #72]	; 0x48
     778:	f041 0101 	orreq.w	r1, r1, #1
     77c:	f88d 1048 	strbeq.w	r1, [sp, #72]	; 0x48
		if (conv->specifier == 'c') {
     780:	2a63      	cmp	r2, #99	; 0x63
     782:	f47f af65 	bne.w	650 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x168>
			unsupported = (conv->length_mod != LENGTH_NONE);
     786:	3b00      	subs	r3, #0
     788:	bf18      	it	ne
     78a:	2301      	movne	r3, #1
	conv->unsupported |= unsupported;
     78c:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
     790:	f3c2 0140 	ubfx	r1, r2, #1, #1
     794:	430b      	orrs	r3, r1
     796:	f363 0241 	bfi	r2, r3, #1, #1
     79a:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
	return sp;
     79e:	e6bd      	b.n	51c <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x34>
		} else if ((conv->length_mod != LENGTH_NONE)
     7a0:	f013 0f38 	tst.w	r3, #56	; 0x38
     7a4:	d1ce      	bne.n	744 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x25c>
     7a6:	e753      	b.n	650 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x168>
		conv->specifier_cat = SPECIFIER_PTR;
     7a8:	f89d 204a 	ldrb.w	r2, [sp, #74]	; 0x4a
     7ac:	2103      	movs	r1, #3
		if (conv->length_mod != LENGTH_NONE) {
     7ae:	f013 0f78 	tst.w	r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_PTR;
     7b2:	f361 0202 	bfi	r2, r1, #0, #3
     7b6:	f88d 204a 	strb.w	r2, [sp, #74]	; 0x4a
		if (conv->length_mod != LENGTH_NONE) {
     7ba:	bf14      	ite	ne
     7bc:	2301      	movne	r3, #1
     7be:	2300      	moveq	r3, #0
     7c0:	e7e4      	b.n	78c <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x2a4>
			unsupported = true;
     7c2:	2301      	movs	r3, #1
     7c4:	e7e2      	b.n	78c <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x2a4>
		} else if (conv->width_present) {
     7c6:	f99d 2048 	ldrsb.w	r2, [sp, #72]	; 0x48
     7ca:	2a00      	cmp	r2, #0
			width = conv->width_value;
     7cc:	bfb4      	ite	lt
     7ce:	9a13      	ldrlt	r2, [sp, #76]	; 0x4c
		int width = -1;
     7d0:	f04f 32ff 	movge.w	r2, #4294967295
     7d4:	e6b4      	b.n	540 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x58>
		} else if (conv->prec_present) {
     7d6:	079f      	lsls	r7, r3, #30
     7d8:	f57f aec1 	bpl.w	55e <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x76>
			precision = conv->prec_value;
     7dc:	9f14      	ldr	r7, [sp, #80]	; 0x50
		conv->pad0_value = 0;
     7de:	2300      	movs	r3, #0
		conv->pad0_pre_exp = 0;
     7e0:	e9cd 3313 	strd	r3, r3, [sp, #76]	; 0x4c
		    && (conv->specifier_cat == SPECIFIER_FP)
     7e4:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
		if (IS_ENABLED(CONFIG_CBPRINTF_FP_SUPPORT)
     7e8:	f003 0207 	and.w	r2, r3, #7
     7ec:	2a04      	cmp	r2, #4
     7ee:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
     7f2:	d107      	bne.n	804 <CONFIG_ISR_STACK_SIZE+0x4>
		    && !conv->prec_present) {
     7f4:	0790      	lsls	r0, r2, #30
     7f6:	d405      	bmi.n	804 <CONFIG_ISR_STACK_SIZE+0x4>
			if (conv->specifier_a) {
     7f8:	f99d 1049 	ldrsb.w	r1, [sp, #73]	; 0x49
				precision = FRACTION_HEX;
     7fc:	2900      	cmp	r1, #0
     7fe:	bfac      	ite	ge
     800:	2706      	movge	r7, #6
     802:	270d      	movlt	r7, #13
		enum specifier_cat_enum specifier_cat
     804:	f003 0307 	and.w	r3, r3, #7
		if (specifier_cat == SPECIFIER_SINT) {
     808:	2b01      	cmp	r3, #1
			= (enum length_mod_enum)conv->length_mod;
     80a:	f3c2 02c3 	ubfx	r2, r2, #3, #4
		if (specifier_cat == SPECIFIER_SINT) {
     80e:	d133      	bne.n	878 <CONFIG_ISR_STACK_SIZE+0x78>
			switch (length_mod) {
     810:	1ed3      	subs	r3, r2, #3
     812:	2b04      	cmp	r3, #4
     814:	d804      	bhi.n	820 <CONFIG_ISR_STACK_SIZE+0x20>
     816:	e8df f003 	tbb	[pc, r3]
     81a:	4621      	.short	0x4621
     81c:	2146      	.short	0x2146
     81e:	21          	.byte	0x21
     81f:	00          	.byte	0x00
				value->sint = va_arg(ap, int);
     820:	6823      	ldr	r3, [r4, #0]
			if (length_mod == LENGTH_HH) {
     822:	2a01      	cmp	r2, #1
				value->sint = va_arg(ap, int);
     824:	ea4f 71e3 	mov.w	r1, r3, asr #31
     828:	e9cd 3110 	strd	r3, r1, [sp, #64]	; 0x40
			if (length_mod == LENGTH_HH) {
     82c:	d11c      	bne.n	868 <CONFIG_ISR_STACK_SIZE+0x68>
				value->sint = (signed char)value->sint;
     82e:	f99d 3040 	ldrsb.w	r3, [sp, #64]	; 0x40
     832:	17d9      	asrs	r1, r3, #31
     834:	e9cd 3110 	strd	r3, r1, [sp, #64]	; 0x40
				value->sint = va_arg(ap, int);
     838:	3404      	adds	r4, #4
		if (conv->invalid || conv->unsupported) {
     83a:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
     83e:	9307      	str	r3, [sp, #28]
     840:	0799      	lsls	r1, r3, #30
     842:	d050      	beq.n	8e6 <__z_interrupt_stack_SIZEOF+0x66>
			OUTS(sp, fp);
     844:	9b06      	ldr	r3, [sp, #24]
     846:	9903      	ldr	r1, [sp, #12]
     848:	4632      	mov	r2, r6
     84a:	4650      	mov	r0, sl
     84c:	f006 fbf1 	bl	7032 <outs>
     850:	2800      	cmp	r0, #0
     852:	f2c0 8353 	blt.w	efc <__z_interrupt_stack_SIZEOF+0x67c>
     856:	4405      	add	r5, r0
			continue;
     858:	9e06      	ldr	r6, [sp, #24]
     85a:	e5c5      	b.n	3e8 <z_cbvprintf_impl+0x10>
					(sint_value_type)va_arg(ap, ptrdiff_t);
     85c:	f854 3b04 	ldr.w	r3, [r4], #4
     860:	17d9      	asrs	r1, r3, #31
				value->uint = (unsigned char)value->uint;
     862:	e9cd 3110 	strd	r3, r1, [sp, #64]	; 0x40
     866:	e7e8      	b.n	83a <CONFIG_ISR_STACK_SIZE+0x3a>
			} else if (length_mod == LENGTH_H) {
     868:	2a02      	cmp	r2, #2
     86a:	d1e5      	bne.n	838 <CONFIG_ISR_STACK_SIZE+0x38>
				value->sint = (short)value->sint;
     86c:	b219      	sxth	r1, r3
     86e:	f343 33c0 	sbfx	r3, r3, #15, #1
     872:	e9cd 1310 	strd	r1, r3, [sp, #64]	; 0x40
     876:	e7df      	b.n	838 <CONFIG_ISR_STACK_SIZE+0x38>
		} else if (specifier_cat == SPECIFIER_UINT) {
     878:	2b02      	cmp	r3, #2
     87a:	d124      	bne.n	8c6 <__z_interrupt_stack_SIZEOF+0x46>
			switch (length_mod) {
     87c:	1ed3      	subs	r3, r2, #3
     87e:	2b04      	cmp	r3, #4
     880:	d804      	bhi.n	88c <__z_interrupt_stack_SIZEOF+0xc>
     882:	e8df f003 	tbb	[pc, r3]
     886:	1018      	.short	0x1018
     888:	1810      	.short	0x1810
     88a:	18          	.byte	0x18
     88b:	00          	.byte	0x00
			if (length_mod == LENGTH_HH) {
     88c:	2a01      	cmp	r2, #1
				value->uint = va_arg(ap, unsigned int);
     88e:	f854 3b04 	ldr.w	r3, [r4], #4
			if (length_mod == LENGTH_HH) {
     892:	f04f 0100 	mov.w	r1, #0
     896:	d014      	beq.n	8c2 <__z_interrupt_stack_SIZEOF+0x42>
			} else if (length_mod == LENGTH_H) {
     898:	2a02      	cmp	r2, #2
				value->uint = va_arg(ap, unsigned int);
     89a:	e9cd 3110 	strd	r3, r1, [sp, #64]	; 0x40
			} else if (length_mod == LENGTH_H) {
     89e:	d1cc      	bne.n	83a <CONFIG_ISR_STACK_SIZE+0x3a>
				value->uint = (unsigned short)value->uint;
     8a0:	b29b      	uxth	r3, r3
			value->ptr = va_arg(ap, void *);
     8a2:	9310      	str	r3, [sp, #64]	; 0x40
     8a4:	e7c9      	b.n	83a <CONFIG_ISR_STACK_SIZE+0x3a>
					(uint_value_type)va_arg(ap,
     8a6:	3407      	adds	r4, #7
     8a8:	f024 0407 	bic.w	r4, r4, #7
				value->uint =
     8ac:	e8f4 0102 	ldrd	r0, r1, [r4], #8
     8b0:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
			if (length_mod == LENGTH_HH) {
     8b4:	e7c1      	b.n	83a <CONFIG_ISR_STACK_SIZE+0x3a>
					(uint_value_type)va_arg(ap, size_t);
     8b6:	f854 3b04 	ldr.w	r3, [r4], #4
     8ba:	9310      	str	r3, [sp, #64]	; 0x40
     8bc:	2300      	movs	r3, #0
     8be:	9311      	str	r3, [sp, #68]	; 0x44
			} else if (length_mod == LENGTH_H) {
     8c0:	e7bb      	b.n	83a <CONFIG_ISR_STACK_SIZE+0x3a>
				value->uint = (unsigned char)value->uint;
     8c2:	b2db      	uxtb	r3, r3
     8c4:	e7cd      	b.n	862 <CONFIG_ISR_STACK_SIZE+0x62>
		} else if (specifier_cat == SPECIFIER_FP) {
     8c6:	2b04      	cmp	r3, #4
     8c8:	d108      	bne.n	8dc <__z_interrupt_stack_SIZEOF+0x5c>
					(sint_value_type)va_arg(ap, long long);
     8ca:	3407      	adds	r4, #7
				value->ldbl = va_arg(ap, long double);
     8cc:	f024 0407 	bic.w	r4, r4, #7
     8d0:	e9d4 0100 	ldrd	r0, r1, [r4]
     8d4:	3408      	adds	r4, #8
     8d6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
     8da:	e7ae      	b.n	83a <CONFIG_ISR_STACK_SIZE+0x3a>
		} else if (specifier_cat == SPECIFIER_PTR) {
     8dc:	2b03      	cmp	r3, #3
     8de:	d1ac      	bne.n	83a <CONFIG_ISR_STACK_SIZE+0x3a>
			value->ptr = va_arg(ap, void *);
     8e0:	f854 3b04 	ldr.w	r3, [r4], #4
     8e4:	e7dd      	b.n	8a2 <__z_interrupt_stack_SIZEOF+0x22>
		switch (conv->specifier) {
     8e6:	f89d b04b 	ldrb.w	fp, [sp, #75]	; 0x4b
     8ea:	f1bb 0f78 	cmp.w	fp, #120	; 0x78
     8ee:	d8b3      	bhi.n	858 <CONFIG_ISR_STACK_SIZE+0x58>
     8f0:	f1bb 0f57 	cmp.w	fp, #87	; 0x57
     8f4:	d849      	bhi.n	98a <__z_interrupt_stack_SIZEOF+0x10a>
     8f6:	f1bb 0f25 	cmp.w	fp, #37	; 0x25
     8fa:	f000 8091 	beq.w	a20 <__z_interrupt_stack_SIZEOF+0x1a0>
     8fe:	f1bb 0f24 	cmp.w	fp, #36	; 0x24
     902:	d9a9      	bls.n	858 <CONFIG_ISR_STACK_SIZE+0x58>
     904:	f1bb 0f41 	cmp.w	fp, #65	; 0x41
     908:	d003      	beq.n	912 <__z_interrupt_stack_SIZEOF+0x92>
     90a:	f1ab 0245 	sub.w	r2, fp, #69	; 0x45
     90e:	2a02      	cmp	r2, #2
     910:	d8a2      	bhi.n	858 <CONFIG_ISR_STACK_SIZE+0x58>
	} u = {
     912:	e9dd 1210 	ldrd	r1, r2, [sp, #64]	; 0x40
	if ((u.u64 & SIGN_MASK) != 0U) {
     916:	2a00      	cmp	r2, #0
     918:	f2c0 8136 	blt.w	b88 <__z_interrupt_stack_SIZEOF+0x308>
	} else if (conv->flag_plus) {
     91c:	9b07      	ldr	r3, [sp, #28]
     91e:	071e      	lsls	r6, r3, #28
     920:	f100 8135 	bmi.w	b8e <__z_interrupt_stack_SIZEOF+0x30e>
	} else if (conv->flag_space) {
     924:	f3c3 1900 	ubfx	r9, r3, #4, #1
     928:	ea4f 1949 	mov.w	r9, r9, lsl #5
	int expo = (u.u64 >> FRACTION_BITS) & BIT_MASK(EXPONENT_BITS);
     92c:	f3c2 500a 	ubfx	r0, r2, #20, #11
	uint64_t fract = u.u64 & BIT64_MASK(FRACTION_BITS);
     930:	f3c2 0213 	ubfx	r2, r2, #0, #20
	bool is_subnormal = (expo == 0) && (fract != 0);
     934:	2800      	cmp	r0, #0
     936:	f040 812d 	bne.w	b94 <__z_interrupt_stack_SIZEOF+0x314>
     93a:	ea51 0602 	orrs.w	r6, r1, r2
     93e:	bf14      	ite	ne
     940:	2601      	movne	r6, #1
     942:	2600      	moveq	r6, #0
	fract <<= EXPONENT_BITS;
     944:	02d2      	lsls	r2, r2, #11
     946:	ea42 5251 	orr.w	r2, r2, r1, lsr #21
     94a:	02c9      	lsls	r1, r1, #11
		c = 'f';
     94c:	f1bb 0f46 	cmp.w	fp, #70	; 0x46
	if ((expo | fract) != 0) {
     950:	ea40 0e01 	orr.w	lr, r0, r1
     954:	ea42 7ce0 	orr.w	ip, r2, r0, asr #31
		c = 'f';
     958:	bf08      	it	eq
     95a:	f04f 0b66 	moveq.w	fp, #102	; 0x66
	if ((expo | fract) != 0) {
     95e:	ea5e 0c0c 	orrs.w	ip, lr, ip
	fract &= ~SIGN_MASK;
     962:	e9cd 120c 	strd	r1, r2, [sp, #48]	; 0x30
	if ((expo | fract) != 0) {
     966:	f000 8197 	beq.w	c98 <__z_interrupt_stack_SIZEOF+0x418>
		if (is_subnormal) {
     96a:	2e00      	cmp	r6, #0
     96c:	f040 8144 	bne.w	bf8 <__z_interrupt_stack_SIZEOF+0x378>
		fract |= BIT_63;
     970:	9a0d      	ldr	r2, [sp, #52]	; 0x34
     972:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
		expo -= (1023 - 1);	/* +1 since .1 vs 1. */
     976:	f2a0 38fe 	subw	r8, r0, #1022	; 0x3fe
		fract |= BIT_63;
     97a:	920d      	str	r2, [sp, #52]	; 0x34
	int expo = (u.u64 >> FRACTION_BITS) & BIT_MASK(EXPONENT_BITS);
     97c:	2000      	movs	r0, #0
     97e:	e9dd 120c 	ldrd	r1, r2, [sp, #48]	; 0x30
     982:	4606      	mov	r6, r0
		fract *= 5U;
     984:	f04f 0c05 	mov.w	ip, #5
     988:	e150      	b.n	c2c <__z_interrupt_stack_SIZEOF+0x3ac>
		switch (conv->specifier) {
     98a:	f1ab 0158 	sub.w	r1, fp, #88	; 0x58
     98e:	2920      	cmp	r1, #32
     990:	f63f af62 	bhi.w	858 <CONFIG_ISR_STACK_SIZE+0x58>
     994:	a001      	add	r0, pc, #4	; (adr r0, 99c <__z_interrupt_stack_SIZEOF+0x11c>)
     996:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
     99a:	bf00      	nop
     99c:	00000b27 	.word	0x00000b27
     9a0:	00000859 	.word	0x00000859
     9a4:	00000859 	.word	0x00000859
     9a8:	00000859 	.word	0x00000859
     9ac:	00000859 	.word	0x00000859
     9b0:	00000859 	.word	0x00000859
     9b4:	00000859 	.word	0x00000859
     9b8:	00000859 	.word	0x00000859
     9bc:	00000859 	.word	0x00000859
     9c0:	00000913 	.word	0x00000913
     9c4:	00000859 	.word	0x00000859
     9c8:	00000aab 	.word	0x00000aab
     9cc:	00000abf 	.word	0x00000abf
     9d0:	00000913 	.word	0x00000913
     9d4:	00000913 	.word	0x00000913
     9d8:	00000913 	.word	0x00000913
     9dc:	00000859 	.word	0x00000859
     9e0:	00000abf 	.word	0x00000abf
     9e4:	00000859 	.word	0x00000859
     9e8:	00000859 	.word	0x00000859
     9ec:	00000859 	.word	0x00000859
     9f0:	00000859 	.word	0x00000859
     9f4:	00000b61 	.word	0x00000b61
     9f8:	00000b27 	.word	0x00000b27
     9fc:	00000b2d 	.word	0x00000b2d
     a00:	00000859 	.word	0x00000859
     a04:	00000859 	.word	0x00000859
     a08:	00000a27 	.word	0x00000a27
     a0c:	00000859 	.word	0x00000859
     a10:	00000b27 	.word	0x00000b27
     a14:	00000859 	.word	0x00000859
     a18:	00000859 	.word	0x00000859
     a1c:	00000b27 	.word	0x00000b27
			OUTC('%');
     a20:	9903      	ldr	r1, [sp, #12]
     a22:	4658      	mov	r0, fp
     a24:	e4ea      	b.n	3fc <z_cbvprintf_impl+0x24>
			if (precision >= 0) {
     a26:	2f00      	cmp	r7, #0
			bps = (const char *)value->ptr;
     a28:	9e10      	ldr	r6, [sp, #64]	; 0x40
			if (precision >= 0) {
     a2a:	db3a      	blt.n	aa2 <__z_interrupt_stack_SIZEOF+0x222>
				len = strnlen(bps, precision);
     a2c:	4639      	mov	r1, r7
     a2e:	4630      	mov	r0, r6
     a30:	f006 fb3d 	bl	70ae <strnlen>
			bpe = bps + len;
     a34:	1837      	adds	r7, r6, r0
		if (bps == NULL) {
     a36:	2e00      	cmp	r6, #0
     a38:	f43f af0e 	beq.w	858 <CONFIG_ISR_STACK_SIZE+0x58>
		char sign = 0;
     a3c:	f04f 0900 	mov.w	r9, #0
		if (conv->altform_0c) {
     a40:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
     a44:	f013 0210 	ands.w	r2, r3, #16
     a48:	9205      	str	r2, [sp, #20]
     a4a:	f000 824c 	beq.w	ee6 <__z_interrupt_stack_SIZEOF+0x666>
			nj_len += 2U;
     a4e:	3002      	adds	r0, #2
		if (conv->pad_fp) {
     a50:	f013 0340 	ands.w	r3, r3, #64	; 0x40
		nj_len += conv->pad0_value;
     a54:	f8dd 804c 	ldr.w	r8, [sp, #76]	; 0x4c
		if (conv->pad_fp) {
     a58:	9308      	str	r3, [sp, #32]
			nj_len += conv->pad0_pre_exp;
     a5a:	bf18      	it	ne
     a5c:	9b14      	ldrne	r3, [sp, #80]	; 0x50
		nj_len += conv->pad0_value;
     a5e:	f8cd 801c 	str.w	r8, [sp, #28]
     a62:	4440      	add	r0, r8
			nj_len += conv->pad0_pre_exp;
     a64:	bf18      	it	ne
     a66:	18c0      	addne	r0, r0, r3
		if (width > 0) {
     a68:	9b04      	ldr	r3, [sp, #16]
     a6a:	2b00      	cmp	r3, #0
     a6c:	f340 8256 	ble.w	f1c <__z_interrupt_stack_SIZEOF+0x69c>
			if (!conv->flag_dash) {
     a70:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
			width -= (int)nj_len;
     a74:	1a1b      	subs	r3, r3, r0
     a76:	9304      	str	r3, [sp, #16]
			if (!conv->flag_dash) {
     a78:	0753      	lsls	r3, r2, #29
     a7a:	f3c2 0b80 	ubfx	fp, r2, #2, #1
     a7e:	f100 824d 	bmi.w	f1c <__z_interrupt_stack_SIZEOF+0x69c>
				if (conv->flag_zero) {
     a82:	0650      	lsls	r0, r2, #25
     a84:	f140 823d 	bpl.w	f02 <__z_interrupt_stack_SIZEOF+0x682>
					if (sign != 0) {
     a88:	f1b9 0f00 	cmp.w	r9, #0
     a8c:	d007      	beq.n	a9e <__z_interrupt_stack_SIZEOF+0x21e>
						OUTC(sign);
     a8e:	9903      	ldr	r1, [sp, #12]
     a90:	4648      	mov	r0, r9
     a92:	47d0      	blx	sl
     a94:	2800      	cmp	r0, #0
     a96:	f2c0 8231 	blt.w	efc <__z_interrupt_stack_SIZEOF+0x67c>
     a9a:	3501      	adds	r5, #1
						sign = 0;
     a9c:	46d9      	mov	r9, fp
					pad = '0';
     a9e:	2230      	movs	r2, #48	; 0x30
     aa0:	e230      	b.n	f04 <__z_interrupt_stack_SIZEOF+0x684>
				len = strlen(bps);
     aa2:	4630      	mov	r0, r6
     aa4:	f006 fafc 	bl	70a0 <strlen>
     aa8:	e7c4      	b.n	a34 <__z_interrupt_stack_SIZEOF+0x1b4>
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
     aaa:	9b10      	ldr	r3, [sp, #64]	; 0x40
     aac:	f88d 305c 	strb.w	r3, [sp, #92]	; 0x5c
		char sign = 0;
     ab0:	f04f 0900 	mov.w	r9, #0
			bpe = buf + 1;
     ab4:	f10d 075d 	add.w	r7, sp, #93	; 0x5d
			bps = buf;
     ab8:	ae17      	add	r6, sp, #92	; 0x5c
		size_t nj_len = (bpe - bps);
     aba:	2001      	movs	r0, #1
     abc:	e7c0      	b.n	a40 <__z_interrupt_stack_SIZEOF+0x1c0>
			if (conv->flag_plus) {
     abe:	9b07      	ldr	r3, [sp, #28]
     ac0:	071a      	lsls	r2, r3, #28
			} else if (conv->flag_space) {
     ac2:	bf58      	it	pl
     ac4:	f3c3 1900 	ubfxpl	r9, r3, #4, #1
			sint = value->sint;
     ac8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
			} else if (conv->flag_space) {
     acc:	bf54      	ite	pl
     ace:	ea4f 1949 	movpl.w	r9, r9, lsl #5
				sign = '+';
     ad2:	f04f 092b 	movmi.w	r9, #43	; 0x2b
			if (sint < 0) {
     ad6:	2b00      	cmp	r3, #0
     ad8:	da06      	bge.n	ae8 <__z_interrupt_stack_SIZEOF+0x268>
				value->uint = (uint_value_type)-sint;
     ada:	4252      	negs	r2, r2
     adc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
     ae0:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
				sign = '-';
     ae4:	f04f 092d 	mov.w	r9, #45	; 0x2d
			bps = encode_uint(value->uint, conv, buf, bpe);
     ae8:	f10d 0375 	add.w	r3, sp, #117	; 0x75
     aec:	9300      	str	r3, [sp, #0]
     aee:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
     af2:	ab17      	add	r3, sp, #92	; 0x5c
     af4:	aa12      	add	r2, sp, #72	; 0x48
     af6:	f006 fa56 	bl	6fa6 <encode_uint>
     afa:	4606      	mov	r6, r0
			if (precision >= 0) {
     afc:	2f00      	cmp	r7, #0
     afe:	db0c      	blt.n	b1a <__z_interrupt_stack_SIZEOF+0x29a>
				conv->flag_zero = false;
     b00:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
				size_t len = bpe - bps;
     b04:	f10d 0375 	add.w	r3, sp, #117	; 0x75
     b08:	1b9b      	subs	r3, r3, r6
				conv->flag_zero = false;
     b0a:	f36f 1286 	bfc	r2, #6, #1
				if (len < (size_t)precision) {
     b0e:	429f      	cmp	r7, r3
				conv->flag_zero = false;
     b10:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
				if (len < (size_t)precision) {
     b14:	d901      	bls.n	b1a <__z_interrupt_stack_SIZEOF+0x29a>
					conv->pad0_value = precision - (int)len;
     b16:	1afb      	subs	r3, r7, r3
     b18:	9313      	str	r3, [sp, #76]	; 0x4c
		if (bps == NULL) {
     b1a:	2e00      	cmp	r6, #0
     b1c:	f43f ae9c 	beq.w	858 <CONFIG_ISR_STACK_SIZE+0x58>
     b20:	f10d 0775 	add.w	r7, sp, #117	; 0x75
     b24:	e056      	b.n	bd4 <__z_interrupt_stack_SIZEOF+0x354>
		switch (conv->specifier) {
     b26:	f04f 0900 	mov.w	r9, #0
     b2a:	e7dd      	b.n	ae8 <__z_interrupt_stack_SIZEOF+0x268>
			if (value->ptr != NULL) {
     b2c:	9810      	ldr	r0, [sp, #64]	; 0x40
     b2e:	2800      	cmp	r0, #0
     b30:	f000 81d4 	beq.w	edc <__z_interrupt_stack_SIZEOF+0x65c>
				bps = encode_uint((uintptr_t)value->ptr, conv,
     b34:	f10d 0375 	add.w	r3, sp, #117	; 0x75
     b38:	9300      	str	r3, [sp, #0]
     b3a:	aa12      	add	r2, sp, #72	; 0x48
     b3c:	ab17      	add	r3, sp, #92	; 0x5c
     b3e:	2100      	movs	r1, #0
     b40:	f006 fa31 	bl	6fa6 <encode_uint>
				conv->altform_0c = true;
     b44:	f8bd 304a 	ldrh.w	r3, [sp, #74]	; 0x4a
     b48:	f003 03ef 	and.w	r3, r3, #239	; 0xef
     b4c:	f443 43f0 	orr.w	r3, r3, #30720	; 0x7800
     b50:	f043 0310 	orr.w	r3, r3, #16
				bps = encode_uint((uintptr_t)value->ptr, conv,
     b54:	4606      	mov	r6, r0
				conv->altform_0c = true;
     b56:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
		char sign = 0;
     b5a:	f04f 0900 	mov.w	r9, #0
				goto prec_int_pad0;
     b5e:	e7cd      	b.n	afc <__z_interrupt_stack_SIZEOF+0x27c>
				store_count(conv, value->ptr, count);
     b60:	9b10      	ldr	r3, [sp, #64]	; 0x40
	switch ((enum length_mod_enum)conv->length_mod) {
     b62:	2a07      	cmp	r2, #7
     b64:	f63f ae78 	bhi.w	858 <CONFIG_ISR_STACK_SIZE+0x58>
     b68:	e8df f002 	tbb	[pc, r2]
     b6c:	0c06040c 	.word	0x0c06040c
     b70:	0c0c0808 	.word	0x0c0c0808
		*(signed char *)dp = (signed char)count;
     b74:	701d      	strb	r5, [r3, #0]
		break;
     b76:	e66f      	b.n	858 <CONFIG_ISR_STACK_SIZE+0x58>
		*(short *)dp = (short)count;
     b78:	801d      	strh	r5, [r3, #0]
		break;
     b7a:	e66d      	b.n	858 <CONFIG_ISR_STACK_SIZE+0x58>
		*(intmax_t *)dp = (intmax_t)count;
     b7c:	17ea      	asrs	r2, r5, #31
     b7e:	e9c3 5200 	strd	r5, r2, [r3]
		break;
     b82:	e669      	b.n	858 <CONFIG_ISR_STACK_SIZE+0x58>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
     b84:	601d      	str	r5, [r3, #0]
		break;
     b86:	e667      	b.n	858 <CONFIG_ISR_STACK_SIZE+0x58>
		*sign = '-';
     b88:	f04f 092d 	mov.w	r9, #45	; 0x2d
     b8c:	e6ce      	b.n	92c <__z_interrupt_stack_SIZEOF+0xac>
		*sign = '+';
     b8e:	f04f 092b 	mov.w	r9, #43	; 0x2b
     b92:	e6cb      	b.n	92c <__z_interrupt_stack_SIZEOF+0xac>
	if (expo == BIT_MASK(EXPONENT_BITS)) {
     b94:	f240 76ff 	movw	r6, #2047	; 0x7ff
     b98:	42b0      	cmp	r0, r6
     b9a:	d12a      	bne.n	bf2 <__z_interrupt_stack_SIZEOF+0x372>
		if (fract == 0) {
     b9c:	430a      	orrs	r2, r1
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
     b9e:	f1ab 0341 	sub.w	r3, fp, #65	; 0x41
     ba2:	d11e      	bne.n	be2 <__z_interrupt_stack_SIZEOF+0x362>
			if (isupper((unsigned char)c) != 0) {
     ba4:	2b1a      	cmp	r3, #26
     ba6:	bf35      	itete	cc
     ba8:	2349      	movcc	r3, #73	; 0x49
     baa:	2369      	movcs	r3, #105	; 0x69
     bac:	214e      	movcc	r1, #78	; 0x4e
     bae:	216e      	movcs	r1, #110	; 0x6e
     bb0:	bf34      	ite	cc
     bb2:	2246      	movcc	r2, #70	; 0x46
     bb4:	2266      	movcs	r2, #102	; 0x66
				*buf++ = 'I';
     bb6:	f88d 305c 	strb.w	r3, [sp, #92]	; 0x5c
		conv->flag_zero = false;
     bba:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
				*buf++ = 'N';
     bbe:	f88d 105d 	strb.w	r1, [sp, #93]	; 0x5d
		conv->flag_zero = false;
     bc2:	f36f 1386 	bfc	r3, #6, #1
				*buf++ = 'F';
     bc6:	f88d 205e 	strb.w	r2, [sp, #94]	; 0x5e
		conv->flag_zero = false;
     bca:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
		*bpe = buf;
     bce:	f10d 075f 	add.w	r7, sp, #95	; 0x5f
				bps = encode_float(value->dbl, conv, precision,
     bd2:	ae17      	add	r6, sp, #92	; 0x5c
		size_t nj_len = (bpe - bps);
     bd4:	1bb8      	subs	r0, r7, r6
		if (sign != 0) {
     bd6:	f1b9 0f00 	cmp.w	r9, #0
     bda:	f43f af31 	beq.w	a40 <__z_interrupt_stack_SIZEOF+0x1c0>
			nj_len += 1U;
     bde:	3001      	adds	r0, #1
     be0:	e72e      	b.n	a40 <__z_interrupt_stack_SIZEOF+0x1c0>
			if (isupper((unsigned char)c) != 0) {
     be2:	2b19      	cmp	r3, #25
     be4:	bf8b      	itete	hi
     be6:	236e      	movhi	r3, #110	; 0x6e
     be8:	234e      	movls	r3, #78	; 0x4e
     bea:	2161      	movhi	r1, #97	; 0x61
     bec:	2141      	movls	r1, #65	; 0x41
     bee:	461a      	mov	r2, r3
     bf0:	e7e1      	b.n	bb6 <__z_interrupt_stack_SIZEOF+0x336>
	bool is_subnormal = (expo == 0) && (fract != 0);
     bf2:	2600      	movs	r6, #0
     bf4:	e6a6      	b.n	944 <__z_interrupt_stack_SIZEOF+0xc4>
				expo--;
     bf6:	3801      	subs	r0, #1
			while (((fract <<= 1) & BIT_63) == 0) {
     bf8:	1849      	adds	r1, r1, r1
     bfa:	4152      	adcs	r2, r2
     bfc:	2a00      	cmp	r2, #0
     bfe:	dafa      	bge.n	bf6 <__z_interrupt_stack_SIZEOF+0x376>
     c00:	e9cd 120c 	strd	r1, r2, [sp, #48]	; 0x30
     c04:	e6b4      	b.n	970 <__z_interrupt_stack_SIZEOF+0xf0>
			fract >>= 1;
     c06:	0849      	lsrs	r1, r1, #1
     c08:	ea41 71c2 	orr.w	r1, r1, r2, lsl #31
     c0c:	0852      	lsrs	r2, r2, #1
		} while ((uint32_t)(fract >> 32) >= (UINT32_MAX / 5U));
     c0e:	f1b2 3f33 	cmp.w	r2, #858993459	; 0x33333333
     c12:	4640      	mov	r0, r8
			expo++;
     c14:	f108 0801 	add.w	r8, r8, #1
		} while ((uint32_t)(fract >> 32) >= (UINT32_MAX / 5U));
     c18:	d2f5      	bcs.n	c06 <__z_interrupt_stack_SIZEOF+0x386>
		fract *= 5U;
     c1a:	fb0c fe02 	mul.w	lr, ip, r2
     c1e:	fba1 120c 	umull	r1, r2, r1, ip
		expo++;
     c22:	f100 0802 	add.w	r8, r0, #2
		fract *= 5U;
     c26:	4472      	add	r2, lr
		decexp--;
     c28:	3e01      	subs	r6, #1
     c2a:	2001      	movs	r0, #1
	while (expo < -2) {
     c2c:	f118 0f02 	cmn.w	r8, #2
     c30:	dbe9      	blt.n	c06 <__z_interrupt_stack_SIZEOF+0x386>
     c32:	b108      	cbz	r0, c38 <__z_interrupt_stack_SIZEOF+0x3b8>
     c34:	e9cd 120c 	strd	r1, r2, [sp, #48]	; 0x30
	while (expo > 0) {
     c38:	f1b8 0f00 	cmp.w	r8, #0
		fract += 2;
     c3c:	e9dd 210c 	ldrd	r2, r1, [sp, #48]	; 0x30
	while (expo > 0) {
     c40:	dc2d      	bgt.n	c9e <__z_interrupt_stack_SIZEOF+0x41e>
	fract >>= (4 - expo);
     c42:	f1c8 0004 	rsb	r0, r8, #4
     c46:	f1a0 0c20 	sub.w	ip, r0, #32
     c4a:	f108 081c 	add.w	r8, r8, #28
     c4e:	40c2      	lsrs	r2, r0
     c50:	fa01 f808 	lsl.w	r8, r1, r8
     c54:	fa21 fc0c 	lsr.w	ip, r1, ip
     c58:	40c1      	lsrs	r1, r0
	if ((c == 'g') || (c == 'G')) {
     c5a:	f00b 00df 	and.w	r0, fp, #223	; 0xdf
	fract >>= (4 - expo);
     c5e:	ea42 0208 	orr.w	r2, r2, r8
	if ((c == 'g') || (c == 'G')) {
     c62:	2847      	cmp	r0, #71	; 0x47
	fract >>= (4 - expo);
     c64:	ea42 020c 	orr.w	r2, r2, ip
	if ((c == 'g') || (c == 'G')) {
     c68:	d13a      	bne.n	ce0 <__z_interrupt_stack_SIZEOF+0x460>
		if (decexp < (-4 + 1) || decexp > precision) {
     c6a:	1cf0      	adds	r0, r6, #3
     c6c:	db01      	blt.n	c72 <__z_interrupt_stack_SIZEOF+0x3f2>
     c6e:	42b7      	cmp	r7, r6
     c70:	da2b      	bge.n	cca <__z_interrupt_stack_SIZEOF+0x44a>
			c += 'e' - 'g';  /* e or E */
     c72:	f1ab 0302 	sub.w	r3, fp, #2
			if (precision > 0) {
     c76:	2f00      	cmp	r7, #0
			c += 'e' - 'g';  /* e or E */
     c78:	fa5f fb83 	uxtb.w	fp, r3
			if (precision > 0) {
     c7c:	dd7d      	ble.n	d7a <__z_interrupt_stack_SIZEOF+0x4fa>
		if (!conv->flag_hash && (precision > 0)) {
     c7e:	f89d 0048 	ldrb.w	r0, [sp, #72]	; 0x48
     c82:	0683      	lsls	r3, r0, #26
				precision--;
     c84:	f107 37ff 	add.w	r7, r7, #4294967295
		if (!conv->flag_hash && (precision > 0)) {
     c88:	d477      	bmi.n	d7a <__z_interrupt_stack_SIZEOF+0x4fa>
     c8a:	1e3b      	subs	r3, r7, #0
     c8c:	bf18      	it	ne
     c8e:	2301      	movne	r3, #1
	bool prune_zero = false;
     c90:	9305      	str	r3, [sp, #20]
		decimals = precision + 1;
     c92:	f107 0801 	add.w	r8, r7, #1
     c96:	e02d      	b.n	cf4 <__z_interrupt_stack_SIZEOF+0x474>
	int expo = (u.u64 >> FRACTION_BITS) & BIT_MASK(EXPONENT_BITS);
     c98:	f04f 0800 	mov.w	r8, #0
     c9c:	e66e      	b.n	97c <__z_interrupt_stack_SIZEOF+0xfc>
		fract += 2;
     c9e:	3202      	adds	r2, #2
     ca0:	f141 0100 	adc.w	r1, r1, #0
		_ldiv5(&fract);
     ca4:	a80c      	add	r0, sp, #48	; 0x30
		fract += 2;
     ca6:	e9cd 210c 	strd	r2, r1, [sp, #48]	; 0x30
		_ldiv5(&fract);
     caa:	f006 f94d 	bl	6f48 <_ldiv5>
		expo--;
     cae:	e9dd 210c 	ldrd	r2, r1, [sp, #48]	; 0x30
     cb2:	f108 38ff 	add.w	r8, r8, #4294967295
		decexp++;
     cb6:	3601      	adds	r6, #1
			fract <<= 1;
     cb8:	1892      	adds	r2, r2, r2
     cba:	4149      	adcs	r1, r1
		} while (!(fract & BIT_63));
     cbc:	2900      	cmp	r1, #0
			expo--;
     cbe:	f108 38ff 	add.w	r8, r8, #4294967295
		} while (!(fract & BIT_63));
     cc2:	daf9      	bge.n	cb8 <__z_interrupt_stack_SIZEOF+0x438>
     cc4:	e9cd 210c 	strd	r2, r1, [sp, #48]	; 0x30
     cc8:	e7b6      	b.n	c38 <__z_interrupt_stack_SIZEOF+0x3b8>
		if (!conv->flag_hash && (precision > 0)) {
     cca:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
     cce:	0698      	lsls	r0, r3, #26
			precision -= decexp;
     cd0:	eba7 0706 	sub.w	r7, r7, r6
		if (!conv->flag_hash && (precision > 0)) {
     cd4:	d44f      	bmi.n	d76 <__z_interrupt_stack_SIZEOF+0x4f6>
     cd6:	1e3b      	subs	r3, r7, #0
     cd8:	bf18      	it	ne
     cda:	2301      	movne	r3, #1
	bool prune_zero = false;
     cdc:	9305      	str	r3, [sp, #20]
     cde:	e004      	b.n	cea <__z_interrupt_stack_SIZEOF+0x46a>
     ce0:	2300      	movs	r3, #0
	if (c == 'f') {
     ce2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
	bool prune_zero = false;
     ce6:	9305      	str	r3, [sp, #20]
	if (c == 'f') {
     ce8:	d1d3      	bne.n	c92 <__z_interrupt_stack_SIZEOF+0x412>
		if (decimals < 0) {
     cea:	eb17 0806 	adds.w	r8, r7, r6
     cee:	f04f 0b66 	mov.w	fp, #102	; 0x66
     cf2:	d444      	bmi.n	d7e <__z_interrupt_stack_SIZEOF+0x4fe>
	if (decimals > 16) {
     cf4:	f1b8 0f10 	cmp.w	r8, #16
     cf8:	bfa8      	it	ge
     cfa:	f04f 0810 	movge.w	r8, #16
	uint64_t round = BIT64(59); /* 0.5 */
     cfe:	ed9f 7bb2 	vldr	d7, [pc, #712]	; fc8 <__z_interrupt_stack_SIZEOF+0x748>
     d02:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
     d06:	2010      	movs	r0, #16
     d08:	900b      	str	r0, [sp, #44]	; 0x2c
	*v >>= 1;
     d0a:	e9dd 030e 	ldrd	r0, r3, [sp, #56]	; 0x38
	while (decimals--) {
     d0e:	f1b8 0f00 	cmp.w	r8, #0
     d12:	d137      	bne.n	d84 <__z_interrupt_stack_SIZEOF+0x504>
	fract += round;
     d14:	1812      	adds	r2, r2, r0
     d16:	eb41 0103 	adc.w	r1, r1, r3
	if (fract >= BIT64(60)) {
     d1a:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
     d1e:	d241      	bcs.n	da4 <__z_interrupt_stack_SIZEOF+0x524>
	fract += round;
     d20:	e9cd 210c 	strd	r2, r1, [sp, #48]	; 0x30
		if (conv->flag_hash || (precision > 0)) {
     d24:	9b07      	ldr	r3, [sp, #28]
	if (c == 'f') {
     d26:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
		if (conv->flag_hash || (precision > 0)) {
     d2a:	f003 0220 	and.w	r2, r3, #32
	if (c == 'f') {
     d2e:	f040 80b4 	bne.w	e9a <__z_interrupt_stack_SIZEOF+0x61a>
		if (decexp > 0) {
     d32:	2e00      	cmp	r6, #0
     d34:	dc41      	bgt.n	dba <__z_interrupt_stack_SIZEOF+0x53a>
			*buf++ = '0';
     d36:	2130      	movs	r1, #48	; 0x30
     d38:	f88d 105c 	strb.w	r1, [sp, #92]	; 0x5c
		if (conv->flag_hash || (precision > 0)) {
     d3c:	2a00      	cmp	r2, #0
     d3e:	d165      	bne.n	e0c <__z_interrupt_stack_SIZEOF+0x58c>
     d40:	2f00      	cmp	r7, #0
     d42:	f340 81b2 	ble.w	10aa <CONFIG_FPROTECT_BLOCK_SIZE+0xaa>
			*buf++ = '.';
     d46:	222e      	movs	r2, #46	; 0x2e
     d48:	f88d 205d 	strb.w	r2, [sp, #93]	; 0x5d
		if (decexp < 0 && precision > 0) {
     d4c:	b186      	cbz	r6, d70 <__z_interrupt_stack_SIZEOF+0x4f0>
			conv->pad0_value = -decexp;
     d4e:	4272      	negs	r2, r6
     d50:	42ba      	cmp	r2, r7
     d52:	bfa8      	it	ge
     d54:	463a      	movge	r2, r7
			conv->pad_postdp = (conv->pad0_value > 0);
     d56:	f89d 104a 	ldrb.w	r1, [sp, #74]	; 0x4a
     d5a:	9213      	str	r2, [sp, #76]	; 0x4c
     d5c:	2a00      	cmp	r2, #0
			precision -= conv->pad0_value;
     d5e:	eba7 0702 	sub.w	r7, r7, r2
			conv->pad_postdp = (conv->pad0_value > 0);
     d62:	bfd4      	ite	le
     d64:	2200      	movle	r2, #0
     d66:	2201      	movgt	r2, #1
     d68:	f362 1145 	bfi	r1, r2, #5, #1
     d6c:	f88d 104a 	strb.w	r1, [sp, #74]	; 0x4a
			*buf++ = '.';
     d70:	f10d 085e 	add.w	r8, sp, #94	; 0x5e
     d74:	e039      	b.n	dea <__z_interrupt_stack_SIZEOF+0x56a>
	bool prune_zero = false;
     d76:	2300      	movs	r3, #0
     d78:	e7b0      	b.n	cdc <__z_interrupt_stack_SIZEOF+0x45c>
     d7a:	2300      	movs	r3, #0
     d7c:	e788      	b.n	c90 <__z_interrupt_stack_SIZEOF+0x410>
			decimals = 0;
     d7e:	f04f 0800 	mov.w	r8, #0
     d82:	e7bc      	b.n	cfe <__z_interrupt_stack_SIZEOF+0x47e>
	*v >>= 1;
     d84:	0840      	lsrs	r0, r0, #1
     d86:	ea40 70c3 	orr.w	r0, r0, r3, lsl #31
     d8a:	085b      	lsrs	r3, r3, #1
     d8c:	e9cd 030e 	strd	r0, r3, [sp, #56]	; 0x38
	_ldiv5(v);
     d90:	a80e      	add	r0, sp, #56	; 0x38
     d92:	e9cd 2108 	strd	r2, r1, [sp, #32]
     d96:	f108 38ff 	add.w	r8, r8, #4294967295
     d9a:	f006 f8d5 	bl	6f48 <_ldiv5>
     d9e:	e9dd 2108 	ldrd	r2, r1, [sp, #32]
}
     da2:	e7b2      	b.n	d0a <__z_interrupt_stack_SIZEOF+0x48a>
	*v >>= 1;
     da4:	0852      	lsrs	r2, r2, #1
     da6:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
	_ldiv5(v);
     daa:	a80c      	add	r0, sp, #48	; 0x30
	*v >>= 1;
     dac:	0849      	lsrs	r1, r1, #1
     dae:	e9cd 210c 	strd	r2, r1, [sp, #48]	; 0x30
		decexp++;
     db2:	3601      	adds	r6, #1
	_ldiv5(v);
     db4:	f006 f8c8 	bl	6f48 <_ldiv5>
		decexp++;
     db8:	e7b4      	b.n	d24 <__z_interrupt_stack_SIZEOF+0x4a4>
	char *buf = bps;
     dba:	f10d 085c 	add.w	r8, sp, #92	; 0x5c
			while (decexp > 0 && digit_count > 0) {
     dbe:	990b      	ldr	r1, [sp, #44]	; 0x2c
     dc0:	2900      	cmp	r1, #0
     dc2:	dd09      	ble.n	dd8 <__z_interrupt_stack_SIZEOF+0x558>
				*buf++ = _get_digit(&fract, &digit_count);
     dc4:	a90b      	add	r1, sp, #44	; 0x2c
     dc6:	a80c      	add	r0, sp, #48	; 0x30
     dc8:	9207      	str	r2, [sp, #28]
     dca:	f006 f8d5 	bl	6f78 <_get_digit>
			while (decexp > 0 && digit_count > 0) {
     dce:	3e01      	subs	r6, #1
				*buf++ = _get_digit(&fract, &digit_count);
     dd0:	f808 0b01 	strb.w	r0, [r8], #1
			while (decexp > 0 && digit_count > 0) {
     dd4:	9a07      	ldr	r2, [sp, #28]
     dd6:	d1f2      	bne.n	dbe <__z_interrupt_stack_SIZEOF+0x53e>
			conv->pad0_value = decexp;
     dd8:	9613      	str	r6, [sp, #76]	; 0x4c
		if (conv->flag_hash || (precision > 0)) {
     dda:	b99a      	cbnz	r2, e04 <__z_interrupt_stack_SIZEOF+0x584>
     ddc:	2f00      	cmp	r7, #0
     dde:	f340 8162 	ble.w	10a6 <CONFIG_FPROTECT_BLOCK_SIZE+0xa6>
			*buf++ = '.';
     de2:	212e      	movs	r1, #46	; 0x2e
     de4:	f808 1b01 	strb.w	r1, [r8], #1
     de8:	2600      	movs	r6, #0
	while (precision > 0 && digit_count > 0) {
     dea:	2f00      	cmp	r7, #0
     dec:	dd17      	ble.n	e1e <__z_interrupt_stack_SIZEOF+0x59e>
     dee:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
     df0:	2a00      	cmp	r2, #0
     df2:	dd14      	ble.n	e1e <__z_interrupt_stack_SIZEOF+0x59e>
		*buf++ = _get_digit(&fract, &digit_count);
     df4:	a90b      	add	r1, sp, #44	; 0x2c
     df6:	a80c      	add	r0, sp, #48	; 0x30
     df8:	f006 f8be 	bl	6f78 <_get_digit>
		precision--;
     dfc:	3f01      	subs	r7, #1
		*buf++ = _get_digit(&fract, &digit_count);
     dfe:	f808 0b01 	strb.w	r0, [r8], #1
		precision--;
     e02:	e7f2      	b.n	dea <__z_interrupt_stack_SIZEOF+0x56a>
			*buf++ = '.';
     e04:	222e      	movs	r2, #46	; 0x2e
     e06:	f808 2b01 	strb.w	r2, [r8], #1
     e0a:	e7ed      	b.n	de8 <__z_interrupt_stack_SIZEOF+0x568>
     e0c:	222e      	movs	r2, #46	; 0x2e
     e0e:	f88d 205d 	strb.w	r2, [sp, #93]	; 0x5d
		if (decexp < 0 && precision > 0) {
     e12:	2e00      	cmp	r6, #0
     e14:	d0ac      	beq.n	d70 <__z_interrupt_stack_SIZEOF+0x4f0>
     e16:	2f00      	cmp	r7, #0
     e18:	dc99      	bgt.n	d4e <__z_interrupt_stack_SIZEOF+0x4ce>
			*buf++ = '.';
     e1a:	f10d 085e 	add.w	r8, sp, #94	; 0x5e
	if (prune_zero) {
     e1e:	9b05      	ldr	r3, [sp, #20]
     e20:	2b00      	cmp	r3, #0
     e22:	d14e      	bne.n	ec2 <__z_interrupt_stack_SIZEOF+0x642>
	conv->pad0_pre_exp = precision;
     e24:	9714      	str	r7, [sp, #80]	; 0x50
     e26:	4647      	mov	r7, r8
	if ((c == 'e') || (c == 'E')) {
     e28:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
     e2c:	2a45      	cmp	r2, #69	; 0x45
     e2e:	d123      	bne.n	e78 <__z_interrupt_stack_SIZEOF+0x5f8>
		if (decexp < 0) {
     e30:	2e00      	cmp	r6, #0
			decexp = -decexp;
     e32:	bfba      	itte	lt
     e34:	4276      	neglt	r6, r6
			*buf++ = '-';
     e36:	232d      	movlt	r3, #45	; 0x2d
			*buf++ = '+';
     e38:	232b      	movge	r3, #43	; 0x2b
		if (decexp >= 100) {
     e3a:	2e63      	cmp	r6, #99	; 0x63
			*buf++ = (decexp / 100) + '0';
     e3c:	bfc8      	it	gt
     e3e:	2164      	movgt	r1, #100	; 0x64
     e40:	707b      	strb	r3, [r7, #1]
			*buf++ = '-';
     e42:	bfd1      	iteee	le
     e44:	1cba      	addle	r2, r7, #2
			*buf++ = (decexp / 100) + '0';
     e46:	fbb6 f3f1 	udivgt	r3, r6, r1
     e4a:	1cfa      	addgt	r2, r7, #3
     e4c:	f103 0030 	addgt.w	r0, r3, #48	; 0x30
			decexp %= 100;
     e50:	bfc8      	it	gt
     e52:	fb01 6613 	mlsgt	r6, r1, r3, r6
		*buf++ = (decexp / 10) + '0';
     e56:	f04f 010a 	mov.w	r1, #10
			*buf++ = (decexp / 100) + '0';
     e5a:	bfc8      	it	gt
     e5c:	70b8      	strbgt	r0, [r7, #2]
		*buf++ = c;
     e5e:	f887 b000 	strb.w	fp, [r7]
		*buf++ = (decexp / 10) + '0';
     e62:	fbb6 f3f1 	udiv	r3, r6, r1
     e66:	4617      	mov	r7, r2
     e68:	f103 0030 	add.w	r0, r3, #48	; 0x30
		*buf++ = (decexp % 10) + '0';
     e6c:	fb01 6313 	mls	r3, r1, r3, r6
     e70:	3330      	adds	r3, #48	; 0x30
		*buf++ = (decexp / 10) + '0';
     e72:	f807 0b02 	strb.w	r0, [r7], #2
		*buf++ = (decexp % 10) + '0';
     e76:	7053      	strb	r3, [r2, #1]
		|| (conv->pad0_pre_exp > 0);
     e78:	9b13      	ldr	r3, [sp, #76]	; 0x4c
     e7a:	2b00      	cmp	r3, #0
     e7c:	dc2c      	bgt.n	ed8 <__z_interrupt_stack_SIZEOF+0x658>
     e7e:	9b14      	ldr	r3, [sp, #80]	; 0x50
     e80:	2b00      	cmp	r3, #0
     e82:	bfd4      	ite	le
     e84:	2300      	movle	r3, #0
     e86:	2301      	movgt	r3, #1
	conv->pad_fp = (conv->pad0_value > 0)
     e88:	f89d 204a 	ldrb.w	r2, [sp, #74]	; 0x4a
     e8c:	f363 1286 	bfi	r2, r3, #6, #1
	*buf = 0;
     e90:	2300      	movs	r3, #0
	conv->pad_fp = (conv->pad0_value > 0)
     e92:	f88d 204a 	strb.w	r2, [sp, #74]	; 0x4a
	*buf = 0;
     e96:	703b      	strb	r3, [r7, #0]
	return bps;
     e98:	e69b      	b.n	bd2 <__z_interrupt_stack_SIZEOF+0x352>
		*buf = _get_digit(&fract, &digit_count);
     e9a:	a90b      	add	r1, sp, #44	; 0x2c
     e9c:	a80c      	add	r0, sp, #48	; 0x30
     e9e:	9207      	str	r2, [sp, #28]
     ea0:	f006 f86a 	bl	6f78 <_get_digit>
		if (*buf++ != '0') {
     ea4:	9a07      	ldr	r2, [sp, #28]
		*buf = _get_digit(&fract, &digit_count);
     ea6:	f88d 005c 	strb.w	r0, [sp, #92]	; 0x5c
		if (*buf++ != '0') {
     eaa:	2830      	cmp	r0, #48	; 0x30
			decexp--;
     eac:	bf18      	it	ne
     eae:	f106 36ff 	addne.w	r6, r6, #4294967295
		if (conv->flag_hash || (precision > 0)) {
     eb2:	b912      	cbnz	r2, eba <__z_interrupt_stack_SIZEOF+0x63a>
     eb4:	2f00      	cmp	r7, #0
     eb6:	f340 80f8 	ble.w	10aa <CONFIG_FPROTECT_BLOCK_SIZE+0xaa>
			*buf++ = '.';
     eba:	222e      	movs	r2, #46	; 0x2e
     ebc:	f88d 205d 	strb.w	r2, [sp, #93]	; 0x5d
     ec0:	e756      	b.n	d70 <__z_interrupt_stack_SIZEOF+0x4f0>
		while (*--buf == '0') {
     ec2:	4647      	mov	r7, r8
     ec4:	f108 38ff 	add.w	r8, r8, #4294967295
     ec8:	f817 2c01 	ldrb.w	r2, [r7, #-1]
     ecc:	2a30      	cmp	r2, #48	; 0x30
     ece:	d0f8      	beq.n	ec2 <__z_interrupt_stack_SIZEOF+0x642>
     ed0:	2a2e      	cmp	r2, #46	; 0x2e
     ed2:	bf08      	it	eq
     ed4:	4647      	moveq	r7, r8
     ed6:	e7a7      	b.n	e28 <__z_interrupt_stack_SIZEOF+0x5a8>
		|| (conv->pad0_pre_exp > 0);
     ed8:	2301      	movs	r3, #1
     eda:	e7d5      	b.n	e88 <__z_interrupt_stack_SIZEOF+0x608>
			bpe = bps + 5;
     edc:	4f3c      	ldr	r7, [pc, #240]	; (fd0 <__z_interrupt_stack_SIZEOF+0x750>)
		char sign = 0;
     ede:	4681      	mov	r9, r0
			bps = "(nil)";
     ee0:	1f7e      	subs	r6, r7, #5
		size_t nj_len = (bpe - bps);
     ee2:	2005      	movs	r0, #5
     ee4:	e5ac      	b.n	a40 <__z_interrupt_stack_SIZEOF+0x1c0>
		} else if (conv->altform_0) {
     ee6:	071a      	lsls	r2, r3, #28
			nj_len += 1U;
     ee8:	bf48      	it	mi
     eea:	3001      	addmi	r0, #1
     eec:	e5b0      	b.n	a50 <__z_interrupt_stack_SIZEOF+0x1d0>
					OUTC(pad);
     eee:	4610      	mov	r0, r2
     ef0:	9209      	str	r2, [sp, #36]	; 0x24
     ef2:	9903      	ldr	r1, [sp, #12]
     ef4:	47d0      	blx	sl
     ef6:	2800      	cmp	r0, #0
     ef8:	9a09      	ldr	r2, [sp, #36]	; 0x24
     efa:	da05      	bge.n	f08 <__z_interrupt_stack_SIZEOF+0x688>
#undef OUTS
#undef OUTC
}
     efc:	b01f      	add	sp, #124	; 0x7c
     efe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				char pad = ' ';
     f02:	2220      	movs	r2, #32
					pad = '0';
     f04:	f8dd b010 	ldr.w	fp, [sp, #16]
				while (width-- > 0) {
     f08:	4659      	mov	r1, fp
     f0a:	2900      	cmp	r1, #0
     f0c:	f10b 3bff 	add.w	fp, fp, #4294967295
     f10:	dced      	bgt.n	eee <__z_interrupt_stack_SIZEOF+0x66e>
     f12:	9b04      	ldr	r3, [sp, #16]
     f14:	f8cd b010 	str.w	fp, [sp, #16]
     f18:	442b      	add	r3, r5
     f1a:	1a5d      	subs	r5, r3, r1
		if (sign != 0) {
     f1c:	f1b9 0f00 	cmp.w	r9, #0
     f20:	d005      	beq.n	f2e <__z_interrupt_stack_SIZEOF+0x6ae>
			OUTC(sign);
     f22:	9903      	ldr	r1, [sp, #12]
     f24:	4648      	mov	r0, r9
     f26:	47d0      	blx	sl
     f28:	2800      	cmp	r0, #0
     f2a:	dbe7      	blt.n	efc <__z_interrupt_stack_SIZEOF+0x67c>
     f2c:	3501      	adds	r5, #1
		if (IS_ENABLED(CONFIG_CBPRINTF_FP_SUPPORT) && conv->pad_fp) {
     f2e:	9b08      	ldr	r3, [sp, #32]
     f30:	2b00      	cmp	r3, #0
     f32:	d07d      	beq.n	1030 <CONFIG_FPROTECT_BLOCK_SIZE+0x30>
			if (conv->specifier_a) {
     f34:	f99d 3049 	ldrsb.w	r3, [sp, #73]	; 0x49
     f38:	2b00      	cmp	r3, #0
     f3a:	db28      	blt.n	f8e <__z_interrupt_stack_SIZEOF+0x70e>
     f3c:	46b3      	mov	fp, r6
				while (isdigit((unsigned char)*cp) != 0) {
     f3e:	f89b 0000 	ldrb.w	r0, [fp]
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
     f42:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
     f46:	2b09      	cmp	r3, #9
     f48:	46d9      	mov	r9, fp
     f4a:	f10b 0b01 	add.w	fp, fp, #1
     f4e:	d946      	bls.n	fde <__z_interrupt_stack_SIZEOF+0x75e>
				if (!conv->pad_postdp) {
     f50:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
     f54:	1bae      	subs	r6, r5, r6
     f56:	0699      	lsls	r1, r3, #26
     f58:	444e      	add	r6, r9
     f5a:	d407      	bmi.n	f6c <__z_interrupt_stack_SIZEOF+0x6ec>
					while (pad_len-- > 0) {
     f5c:	4642      	mov	r2, r8
     f5e:	2a00      	cmp	r2, #0
     f60:	f108 38ff 	add.w	r8, r8, #4294967295
     f64:	dc40      	bgt.n	fe8 <__z_interrupt_stack_SIZEOF+0x768>
     f66:	9b07      	ldr	r3, [sp, #28]
     f68:	4433      	add	r3, r6
     f6a:	1a9e      	subs	r6, r3, r2
				if (*cp == '.') {
     f6c:	f899 0000 	ldrb.w	r0, [r9]
     f70:	282e      	cmp	r0, #46	; 0x2e
     f72:	d10a      	bne.n	f8a <__z_interrupt_stack_SIZEOF+0x70a>
					OUTC(*cp++);
     f74:	9903      	ldr	r1, [sp, #12]
     f76:	47d0      	blx	sl
						OUTC('0');
     f78:	2800      	cmp	r0, #0
     f7a:	dbbf      	blt.n	efc <__z_interrupt_stack_SIZEOF+0x67c>
					while (pad_len-- > 0) {
     f7c:	f1b8 0f00 	cmp.w	r8, #0
						OUTC('0');
     f80:	f106 0601 	add.w	r6, r6, #1
					while (pad_len-- > 0) {
     f84:	dc36      	bgt.n	ff4 <__z_interrupt_stack_SIZEOF+0x774>
					OUTC(*cp++);
     f86:	f109 0901 	add.w	r9, r9, #1
			if (conv->specifier_a) {
     f8a:	464d      	mov	r5, r9
     f8c:	e03d      	b.n	100a <CONFIG_FPROTECT_BLOCK_SIZE+0xa>
     f8e:	46b1      	mov	r9, r6
				while (*cp != 'p') {
     f90:	f899 0000 	ldrb.w	r0, [r9]
     f94:	2870      	cmp	r0, #112	; 0x70
     f96:	46c8      	mov	r8, r9
     f98:	f109 0901 	add.w	r9, r9, #1
     f9c:	d11a      	bne.n	fd4 <__z_interrupt_stack_SIZEOF+0x754>
     f9e:	1bae      	subs	r6, r5, r6
     fa0:	9d14      	ldr	r5, [sp, #80]	; 0x50
     fa2:	4446      	add	r6, r8
			while (pad_len-- > 0) {
     fa4:	4435      	add	r5, r6
     fa6:	1bab      	subs	r3, r5, r6
     fa8:	2b00      	cmp	r3, #0
     faa:	dc39      	bgt.n	1020 <CONFIG_FPROTECT_BLOCK_SIZE+0x20>
			OUTS(cp, bpe);
     fac:	9903      	ldr	r1, [sp, #12]
     fae:	463b      	mov	r3, r7
     fb0:	4642      	mov	r2, r8
     fb2:	4650      	mov	r0, sl
     fb4:	f006 f83d 	bl	7032 <outs>
     fb8:	2800      	cmp	r0, #0
     fba:	db9f      	blt.n	efc <__z_interrupt_stack_SIZEOF+0x67c>
     fbc:	4430      	add	r0, r6
     fbe:	9e04      	ldr	r6, [sp, #16]
			while (pad_len-- > 0) {
     fc0:	4605      	mov	r5, r0
     fc2:	4406      	add	r6, r0
     fc4:	e06a      	b.n	109c <CONFIG_FPROTECT_BLOCK_SIZE+0x9c>
     fc6:	bf00      	nop
     fc8:	00000000 	.word	0x00000000
     fcc:	08000000 	.word	0x08000000
     fd0:	00008a76 	.word	0x00008a76
					OUTC(*cp++);
     fd4:	9903      	ldr	r1, [sp, #12]
     fd6:	47d0      	blx	sl
     fd8:	2800      	cmp	r0, #0
     fda:	dad9      	bge.n	f90 <__z_interrupt_stack_SIZEOF+0x710>
     fdc:	e78e      	b.n	efc <__z_interrupt_stack_SIZEOF+0x67c>
					OUTC(*cp++);
     fde:	9903      	ldr	r1, [sp, #12]
     fe0:	47d0      	blx	sl
     fe2:	2800      	cmp	r0, #0
     fe4:	daab      	bge.n	f3e <__z_interrupt_stack_SIZEOF+0x6be>
     fe6:	e789      	b.n	efc <__z_interrupt_stack_SIZEOF+0x67c>
						OUTC('0');
     fe8:	9903      	ldr	r1, [sp, #12]
     fea:	2030      	movs	r0, #48	; 0x30
     fec:	47d0      	blx	sl
     fee:	2800      	cmp	r0, #0
     ff0:	dab4      	bge.n	f5c <__z_interrupt_stack_SIZEOF+0x6dc>
     ff2:	e783      	b.n	efc <__z_interrupt_stack_SIZEOF+0x67c>
						OUTC('0');
     ff4:	9903      	ldr	r1, [sp, #12]
     ff6:	2030      	movs	r0, #48	; 0x30
     ff8:	47d0      	blx	sl
     ffa:	f108 38ff 	add.w	r8, r8, #4294967295
     ffe:	e7bb      	b.n	f78 <__z_interrupt_stack_SIZEOF+0x6f8>
					OUTC(*cp++);
    1000:	9903      	ldr	r1, [sp, #12]
    1002:	47d0      	blx	sl
    1004:	2800      	cmp	r0, #0
    1006:	f6ff af79 	blt.w	efc <__z_interrupt_stack_SIZEOF+0x67c>
				while (isdigit((unsigned char)*cp) != 0) {
    100a:	7828      	ldrb	r0, [r5, #0]
    100c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
    1010:	2b09      	cmp	r3, #9
    1012:	46a8      	mov	r8, r5
    1014:	f105 0501 	add.w	r5, r5, #1
    1018:	d9f2      	bls.n	1000 <CONFIG_FPROTECT_BLOCK_SIZE>
    101a:	eba6 0609 	sub.w	r6, r6, r9
    101e:	e7bf      	b.n	fa0 <__z_interrupt_stack_SIZEOF+0x720>
				OUTC('0');
    1020:	9903      	ldr	r1, [sp, #12]
    1022:	2030      	movs	r0, #48	; 0x30
    1024:	47d0      	blx	sl
    1026:	2800      	cmp	r0, #0
    1028:	f6ff af68 	blt.w	efc <__z_interrupt_stack_SIZEOF+0x67c>
    102c:	3601      	adds	r6, #1
    102e:	e7ba      	b.n	fa6 <__z_interrupt_stack_SIZEOF+0x726>
			if (conv->altform_0c | conv->altform_0) {
    1030:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
    1034:	06da      	lsls	r2, r3, #27
    1036:	d401      	bmi.n	103c <CONFIG_FPROTECT_BLOCK_SIZE+0x3c>
    1038:	071b      	lsls	r3, r3, #28
    103a:	d506      	bpl.n	104a <CONFIG_FPROTECT_BLOCK_SIZE+0x4a>
				OUTC('0');
    103c:	9903      	ldr	r1, [sp, #12]
    103e:	2030      	movs	r0, #48	; 0x30
    1040:	47d0      	blx	sl
    1042:	2800      	cmp	r0, #0
    1044:	f6ff af5a 	blt.w	efc <__z_interrupt_stack_SIZEOF+0x67c>
    1048:	3501      	adds	r5, #1
			if (conv->altform_0c) {
    104a:	9b05      	ldr	r3, [sp, #20]
    104c:	b13b      	cbz	r3, 105e <CONFIG_FPROTECT_BLOCK_SIZE+0x5e>
				OUTC(conv->specifier);
    104e:	9903      	ldr	r1, [sp, #12]
    1050:	f89d 004b 	ldrb.w	r0, [sp, #75]	; 0x4b
    1054:	47d0      	blx	sl
    1056:	2800      	cmp	r0, #0
    1058:	f6ff af50 	blt.w	efc <__z_interrupt_stack_SIZEOF+0x67c>
    105c:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
    105e:	44a8      	add	r8, r5
    1060:	e006      	b.n	1070 <CONFIG_FPROTECT_BLOCK_SIZE+0x70>
				OUTC('0');
    1062:	9903      	ldr	r1, [sp, #12]
    1064:	2030      	movs	r0, #48	; 0x30
    1066:	47d0      	blx	sl
    1068:	2800      	cmp	r0, #0
    106a:	f6ff af47 	blt.w	efc <__z_interrupt_stack_SIZEOF+0x67c>
    106e:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
    1070:	eba8 0305 	sub.w	r3, r8, r5
    1074:	2b00      	cmp	r3, #0
    1076:	dcf4      	bgt.n	1062 <CONFIG_FPROTECT_BLOCK_SIZE+0x62>
			OUTS(bps, bpe);
    1078:	9903      	ldr	r1, [sp, #12]
    107a:	463b      	mov	r3, r7
    107c:	4632      	mov	r2, r6
    107e:	4650      	mov	r0, sl
    1080:	f005 ffd7 	bl	7032 <outs>
    1084:	2800      	cmp	r0, #0
    1086:	f6ff af39 	blt.w	efc <__z_interrupt_stack_SIZEOF+0x67c>
    108a:	4428      	add	r0, r5
    108c:	e797      	b.n	fbe <__z_interrupt_stack_SIZEOF+0x73e>
			OUTC(' ');
    108e:	9903      	ldr	r1, [sp, #12]
    1090:	2020      	movs	r0, #32
    1092:	47d0      	blx	sl
    1094:	2800      	cmp	r0, #0
    1096:	f6ff af31 	blt.w	efc <__z_interrupt_stack_SIZEOF+0x67c>
    109a:	3501      	adds	r5, #1
		while (width > 0) {
    109c:	1b73      	subs	r3, r6, r5
    109e:	2b00      	cmp	r3, #0
    10a0:	dcf5      	bgt.n	108e <CONFIG_FPROTECT_BLOCK_SIZE+0x8e>
    10a2:	f7ff bbd9 	b.w	858 <CONFIG_ISR_STACK_SIZE+0x58>
			decexp = 0;
    10a6:	4616      	mov	r6, r2
    10a8:	e6b9      	b.n	e1e <__z_interrupt_stack_SIZEOF+0x59e>
		if (*buf++ != '0') {
    10aa:	f10d 085d 	add.w	r8, sp, #93	; 0x5d
	while (precision > 0 && digit_count > 0) {
    10ae:	e6b6      	b.n	e1e <__z_interrupt_stack_SIZEOF+0x59e>

000010b0 <work_queue_main>:
/* Loop executed by a work queue thread.
 *
 * @param workq_ptr pointer to the work queue structure
 */
static void work_queue_main(void *workq_ptr, void *p2, void *p3)
{
    10b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    10b4:	ed2d 8b02 	vpush	{d8}
			 * stop.  Just go to sleep: when something happens the
			 * work thread will be woken and we can check again.
			 */

			(void)z_sched_wait(&lock, key, &queue->notifyq,
					   K_FOREVER, NULL);
    10b8:	ed9f 8b49 	vldr	d8, [pc, #292]	; 11e0 <work_queue_main+0x130>
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
    10bc:	4e4a      	ldr	r6, [pc, #296]	; (11e8 <work_queue_main+0x138>)
{
    10be:	b084      	sub	sp, #16
    10c0:	4604      	mov	r4, r0
		:
		: "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	unsigned int tmp;

	__asm__ volatile(
    10c2:	f04f 0320 	mov.w	r3, #32
    10c6:	f3ef 8711 	mrs	r7, BASEPRI
    10ca:	f383 8812 	msr	BASEPRI_MAX, r3
    10ce:	f3bf 8f6f 	isb	sy
    10d2:	f8d4 50c0 	ldr.w	r5, [r4, #192]	; 0xc0
 *
 * @return A pointer to the first node of the list (or NULL if empty)
 */
static inline sys_snode_t *sys_slist_get(sys_slist_t *list);

Z_GENLIST_GET(slist, snode)
    10d6:	b98d      	cbnz	r5, 10fc <work_queue_main+0x4c>
		} else if (flag_test_and_clear(&queue->flags,
    10d8:	2102      	movs	r1, #2
    10da:	f104 00d8 	add.w	r0, r4, #216	; 0xd8
    10de:	f006 ffc4 	bl	806a <flag_test_and_clear>
    10e2:	2800      	cmp	r0, #0
    10e4:	d143      	bne.n	116e <work_queue_main+0xbe>
			(void)z_sched_wait(&lock, key, &queue->notifyq,
    10e6:	2300      	movs	r3, #0
    10e8:	ed8d 8b00 	vstr	d8, [sp]
    10ec:	9302      	str	r3, [sp, #8]
    10ee:	f104 02c8 	add.w	r2, r4, #200	; 0xc8
    10f2:	4639      	mov	r1, r7
    10f4:	483d      	ldr	r0, [pc, #244]	; (11ec <work_queue_main+0x13c>)
    10f6:	f005 f979 	bl	63ec <z_sched_wait>
			continue;
    10fa:	e7e2      	b.n	10c2 <work_queue_main+0x12>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    10fc:	f8d4 20c4 	ldr.w	r2, [r4, #196]	; 0xc4
	return node->next;
    1100:	682b      	ldr	r3, [r5, #0]
	list->head = node;
    1102:	f8c4 30c0 	str.w	r3, [r4, #192]	; 0xc0
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    1106:	4295      	cmp	r5, r2
	list->tail = node;
    1108:	bf08      	it	eq
    110a:	f8c4 30c4 	streq.w	r3, [r4, #196]	; 0xc4
	*flagp |= BIT(bit);
    110e:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
    1112:	f043 0302 	orr.w	r3, r3, #2
    1116:	f8c4 30d8 	str.w	r3, [r4, #216]	; 0xd8
	*flagp &= ~BIT(bit);
    111a:	68eb      	ldr	r3, [r5, #12]
    111c:	f023 0304 	bic.w	r3, r3, #4
    1120:	f043 0301 	orr.w	r3, r3, #1
    1124:	60eb      	str	r3, [r5, #12]
			handler = work->handler;
    1126:	686b      	ldr	r3, [r5, #4]
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
    1128:	f387 8811 	msr	BASEPRI, r7
    112c:	f3bf 8f6f 	isb	sy
		}

		k_spin_unlock(&lock, key);

		__ASSERT_NO_MSG(handler != NULL);
		handler(work);
    1130:	4628      	mov	r0, r5
    1132:	4798      	blx	r3
	__asm__ volatile(
    1134:	f04f 0320 	mov.w	r3, #32
    1138:	f3ef 8911 	mrs	r9, BASEPRI
    113c:	f383 8812 	msr	BASEPRI_MAX, r3
    1140:	f3bf 8f6f 	isb	sy
	*flagp &= ~BIT(bit);
    1144:	68eb      	ldr	r3, [r5, #12]
		 * starving other threads.
		 */
		key = k_spin_lock(&lock);

		flag_clear(&work->flags, K_WORK_RUNNING_BIT);
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
    1146:	0799      	lsls	r1, r3, #30
	*flagp &= ~BIT(bit);
    1148:	f023 0201 	bic.w	r2, r3, #1
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
    114c:	d419      	bmi.n	1182 <work_queue_main+0xd2>
	*flagp &= ~BIT(bit);
    114e:	60ea      	str	r2, [r5, #12]
    1150:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
    1154:	f023 0302 	bic.w	r3, r3, #2
    1158:	f8c4 30d8 	str.w	r3, [r4, #216]	; 0xd8
	__asm__ volatile(
    115c:	f389 8811 	msr	BASEPRI, r9
    1160:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		/* Optionally yield to prevent the work queue from
		 * starving other threads.
		 */
		if (yield) {
    1164:	05db      	lsls	r3, r3, #23
    1166:	d4ac      	bmi.n	10c2 <work_queue_main+0x12>
		(void) arch_syscall_invoke0(K_SYSCALL_K_YIELD);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_yield();
    1168:	f005 f83e 	bl	61e8 <z_impl_k_yield>
}
    116c:	e7a9      	b.n	10c2 <work_queue_main+0x12>
			(void)z_sched_wake_all(&queue->drainq, 1, NULL);
    116e:	f104 05d0 	add.w	r5, r4, #208	; 0xd0
static inline bool z_sched_wake_all(_wait_q_t *wait_q, int swap_retval,
				    void *swap_data)
{
	bool woken = false;

	while (z_sched_wake(wait_q, swap_retval, swap_data)) {
    1172:	2200      	movs	r2, #0
    1174:	2101      	movs	r1, #1
    1176:	4628      	mov	r0, r5
    1178:	f007 f84d 	bl	8216 <z_sched_wake>
    117c:	2800      	cmp	r0, #0
    117e:	d1f8      	bne.n	1172 <work_queue_main+0xc2>
    1180:	e7b1      	b.n	10e6 <work_queue_main+0x36>
	return list->head;
    1182:	6830      	ldr	r0, [r6, #0]
	*flagp &= ~BIT(bit);
    1184:	f023 0303 	bic.w	r3, r3, #3
    1188:	60eb      	str	r3, [r5, #12]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
    118a:	2800      	cmp	r0, #0
    118c:	d0e0      	beq.n	1150 <work_queue_main+0xa0>
	return node->next;
    118e:	2700      	movs	r7, #0
    1190:	f8d0 8000 	ldr.w	r8, [r0]
	parent->next = child;
    1194:	46ba      	mov	sl, r7
    1196:	2800      	cmp	r0, #0
    1198:	d0da      	beq.n	1150 <work_queue_main+0xa0>
		if (wc->work == work) {
    119a:	6842      	ldr	r2, [r0, #4]
    119c:	4295      	cmp	r5, r2
			sys_slist_remove(&pending_cancels, prev, &wc->node);
    119e:	4601      	mov	r1, r0
		if (wc->work == work) {
    11a0:	d10b      	bne.n	11ba <work_queue_main+0x10a>
	return node->next;
    11a2:	6801      	ldr	r1, [r0, #0]
 */
static inline void sys_slist_remove(sys_slist_t *list,
				    sys_snode_t *prev_node,
				    sys_snode_t *node);

Z_GENLIST_REMOVE(slist, snode)
    11a4:	b997      	cbnz	r7, 11cc <work_queue_main+0x11c>
    11a6:	6872      	ldr	r2, [r6, #4]
	list->head = node;
    11a8:	6031      	str	r1, [r6, #0]
Z_GENLIST_REMOVE(slist, snode)
    11aa:	4282      	cmp	r2, r0
    11ac:	d100      	bne.n	11b0 <work_queue_main+0x100>
	list->tail = node;
    11ae:	6071      	str	r1, [r6, #4]
	parent->next = child;
    11b0:	f840 ab08 	str.w	sl, [r0], #8
		(void) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
    11b4:	f004 fd3a 	bl	5c2c <z_impl_k_sem_give>
}
    11b8:	4639      	mov	r1, r7
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
    11ba:	f1b8 0f00 	cmp.w	r8, #0
    11be:	d00b      	beq.n	11d8 <work_queue_main+0x128>
	return node->next;
    11c0:	f8d8 2000 	ldr.w	r2, [r8]
    11c4:	4640      	mov	r0, r8
    11c6:	460f      	mov	r7, r1
    11c8:	4690      	mov	r8, r2
    11ca:	e7e4      	b.n	1196 <work_queue_main+0xe6>
	parent->next = child;
    11cc:	6039      	str	r1, [r7, #0]
Z_GENLIST_REMOVE(slist, snode)
    11ce:	6872      	ldr	r2, [r6, #4]
    11d0:	4282      	cmp	r2, r0
	list->tail = node;
    11d2:	bf08      	it	eq
    11d4:	6077      	streq	r7, [r6, #4]
}
    11d6:	e7eb      	b.n	11b0 <work_queue_main+0x100>
    11d8:	4642      	mov	r2, r8
    11da:	e7f3      	b.n	11c4 <work_queue_main+0x114>
    11dc:	f3af 8000 	nop.w
    11e0:	ffffffff 	.word	0xffffffff
    11e4:	ffffffff 	.word	0xffffffff
    11e8:	20000d9c 	.word	0x20000d9c
    11ec:	200013a9 	.word	0x200013a9

000011f0 <main>:
 * See the sample documentation for information on how to fix this.
 */
static const struct gpio_dt_spec led = GPIO_DT_SPEC_GET(LED0_NODE, gpios);

int main(void)
{
    11f0:	b538      	push	{r3, r4, r5, lr}
 */
__syscall bool device_is_ready(const struct device *dev);

static inline bool z_impl_device_is_ready(const struct device *dev)
{
	return z_device_is_ready(dev);
    11f2:	4c10      	ldr	r4, [pc, #64]	; (1234 <main+0x44>)
    11f4:	4620      	mov	r0, r4
    11f6:	f006 fe94 	bl	7f22 <z_device_is_ready>
	int ret;

	if (!gpio_is_ready_dt(&led)) {
    11fa:	b1c8      	cbz	r0, 1230 <main+0x40>
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->api;
	__unused const struct gpio_driver_config *const cfg =
		(const struct gpio_driver_config *)port->config;
	struct gpio_driver_data *data =
    11fc:	6922      	ldr	r2, [r4, #16]
	const struct gpio_driver_api *api =
    11fe:	68a5      	ldr	r5, [r4, #8]

	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
		 "Unsupported pin");

	if ((flags & GPIO_ACTIVE_LOW) != 0) {
		data->invert |= (gpio_port_pins_t)BIT(pin);
    1200:	6813      	ldr	r3, [r2, #0]
    1202:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    1206:	6013      	str	r3, [r2, #0]
	} else {
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
	}

	return api->pin_configure(port, pin, flags);
    1208:	682b      	ldr	r3, [r5, #0]
    120a:	4a0b      	ldr	r2, [pc, #44]	; (1238 <main+0x48>)
    120c:	2111      	movs	r1, #17
    120e:	4620      	mov	r0, r4
    1210:	4798      	blx	r3
		return 0;
	}

	ret = gpio_pin_configure_dt(&led, GPIO_OUTPUT_ACTIVE);
	if (ret < 0) {
    1212:	2800      	cmp	r0, #0
    1214:	db0c      	blt.n	1230 <main+0x40>
					       gpio_port_pins_t pins)
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->api;

	return api->port_toggle_bits(port, pins);
    1216:	f44f 3100 	mov.w	r1, #131072	; 0x20000
    121a:	696b      	ldr	r3, [r5, #20]
    121c:	4620      	mov	r0, r4
    121e:	4798      	blx	r3
		return 0;
	}

	while (1) {
		ret = gpio_pin_toggle_dt(&led);
		if (ret < 0) {
    1220:	2800      	cmp	r0, #0
    1222:	db05      	blt.n	1230 <main+0x40>
	return z_impl_k_sleep(timeout);
    1224:	2100      	movs	r1, #0
    1226:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    122a:	f005 f85f 	bl	62ec <z_impl_k_sleep>
 * @return Zero if the requested time has elapsed or the number of milliseconds
 * left to sleep, if thread was woken up by \ref k_wakeup call.
 */
static inline int32_t k_msleep(int32_t ms)
{
	return k_sleep(Z_TIMEOUT_MS(ms));
    122e:	e7f2      	b.n	1216 <main+0x26>
			return 0;
		}
		k_msleep(SLEEP_TIME_MS);
	}
	return 0;
}
    1230:	2000      	movs	r0, #0
    1232:	bd38      	pop	{r3, r4, r5, pc}
    1234:	000083dc 	.word	0x000083dc
    1238:	00060001 	.word	0x00060001

0000123c <char_out>:
}

static int char_out(int c, void *ctx_p)
{
	(void) ctx_p;
	return _char_out(c);
    123c:	4b01      	ldr	r3, [pc, #4]	; (1244 <char_out+0x8>)
    123e:	681b      	ldr	r3, [r3, #0]
    1240:	4718      	bx	r3
    1242:	bf00      	nop
    1244:	20000098 	.word	0x20000098

00001248 <__printk_hook_install>:
	_char_out = fn;
    1248:	4b01      	ldr	r3, [pc, #4]	; (1250 <__printk_hook_install+0x8>)
    124a:	6018      	str	r0, [r3, #0]
}
    124c:	4770      	bx	lr
    124e:	bf00      	nop
    1250:	20000098 	.word	0x20000098

00001254 <vprintk>:
}

void vprintk(const char *fmt, va_list ap)
{
    1254:	b507      	push	{r0, r1, r2, lr}
    1256:	460b      	mov	r3, r1
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap);
#else
static inline
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap)
{
	return z_cbvprintf_impl(out, ctx, format, ap, 0);
    1258:	2100      	movs	r1, #0
    125a:	4602      	mov	r2, r0
    125c:	9100      	str	r1, [sp, #0]
    125e:	4803      	ldr	r0, [pc, #12]	; (126c <vprintk+0x18>)
    1260:	f7ff f8ba 	bl	3d8 <z_cbvprintf_impl>

#ifdef CONFIG_PRINTK_SYNC
		k_spin_unlock(&lock, key);
#endif
	}
}
    1264:	b003      	add	sp, #12
    1266:	f85d fb04 	ldr.w	pc, [sp], #4
    126a:	bf00      	nop
    126c:	0000123d 	.word	0x0000123d

00001270 <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
    1270:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    1274:	8b05      	ldrh	r5, [r0, #24]
{
    1276:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
    1278:	0728      	lsls	r0, r5, #28
{
    127a:	4690      	mov	r8, r2
	if (processing) {
    127c:	d411      	bmi.n	12a2 <process_event+0x32>

	sys_slist_init(&clients);
	do {
		onoff_transition_fn transit = NULL;

		if (evt == EVT_RECHECK) {
    127e:	2902      	cmp	r1, #2
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    1280:	f005 0507 	and.w	r5, r5, #7
		if (evt == EVT_RECHECK) {
    1284:	f040 80cd 	bne.w	1422 <process_event+0x1b2>
			evt = process_recheck(mgr);
    1288:	4620      	mov	r0, r4
    128a:	f005 fd5e 	bl	6d4a <process_recheck>
		}

		if (evt == EVT_NOP) {
    128e:	b178      	cbz	r0, 12b0 <process_event+0x40>
			break;
		}

		res = 0;
		if (evt == EVT_COMPLETE) {
    1290:	3801      	subs	r0, #1
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    1292:	8b21      	ldrh	r1, [r4, #24]
    1294:	2804      	cmp	r0, #4
    1296:	d811      	bhi.n	12bc <process_event+0x4c>
    1298:	e8df f000 	tbb	[pc, r0]
    129c:	856d10c3 	.word	0x856d10c3
    12a0:	95          	.byte	0x95
    12a1:	00          	.byte	0x00
		if (evt == EVT_COMPLETE) {
    12a2:	2901      	cmp	r1, #1
			mgr->flags |= ONOFF_FLAG_COMPLETE;
    12a4:	bf0c      	ite	eq
    12a6:	f045 0510 	orreq.w	r5, r5, #16
			mgr->flags |= ONOFF_FLAG_RECHECK;
    12aa:	f045 0520 	orrne.w	r5, r5, #32
    12ae:	8325      	strh	r5, [r4, #24]
    12b0:	f388 8811 	msr	BASEPRI, r8
    12b4:	f3bf 8f6f 	isb	sy
		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
}
    12b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    12bc:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
    12c0:	45aa      	cmp	sl, r5
    12c2:	f000 80a6 	beq.w	1412 <process_event+0x1a2>
	 * a memory barrier when used like this, and we don't have a
	 * Zephyr framework for that.
	 */
	atomic_clear(&l->locked);
#endif
	arch_irq_unlock(key.key);
    12c6:	2700      	movs	r7, #0
    12c8:	46b9      	mov	r9, r7
    12ca:	463e      	mov	r6, r7
    12cc:	68a3      	ldr	r3, [r4, #8]
    12ce:	2b00      	cmp	r3, #0
    12d0:	f000 80bd 	beq.w	144e <process_event+0x1de>
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
    12d4:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
    12d8:	8321      	strh	r1, [r4, #24]
    12da:	f388 8811 	msr	BASEPRI, r8
    12de:	f3bf 8f6f 	isb	sy
	return list->head;
    12e2:	68a1      	ldr	r1, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    12e4:	2900      	cmp	r1, #0
    12e6:	f000 80bb 	beq.w	1460 <process_event+0x1f0>
	return node->next;
    12ea:	680d      	ldr	r5, [r1, #0]
    12ec:	2900      	cmp	r1, #0
    12ee:	f000 80b7 	beq.w	1460 <process_event+0x1f0>
		mon->callback(mgr, mon, state, res);
    12f2:	f8d1 8004 	ldr.w	r8, [r1, #4]
    12f6:	4633      	mov	r3, r6
    12f8:	4652      	mov	r2, sl
    12fa:	4620      	mov	r0, r4
    12fc:	47c0      	blx	r8
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    12fe:	2d00      	cmp	r5, #0
    1300:	d076      	beq.n	13f0 <process_event+0x180>
    1302:	682b      	ldr	r3, [r5, #0]
    1304:	4629      	mov	r1, r5
    1306:	461d      	mov	r5, r3
    1308:	e7f0      	b.n	12ec <process_event+0x7c>
    130a:	f001 0307 	and.w	r3, r1, #7
		   || (state == ONOFF_STATE_RESETTING)) {
    130e:	1f5a      	subs	r2, r3, #5
	} else if ((state == ONOFF_STATE_TO_ON)
    1310:	2a01      	cmp	r2, #1
    1312:	d81b      	bhi.n	134c <process_event+0xdc>
	list->head = NULL;
    1314:	2200      	movs	r2, #0
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    1316:	f021 0107 	bic.w	r1, r1, #7
		if (state == ONOFF_STATE_TO_ON) {
    131a:	2b06      	cmp	r3, #6
		*clients = mgr->clients;
    131c:	6827      	ldr	r7, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    131e:	b289      	uxth	r1, r1
	list->tail = NULL;
    1320:	e9c4 2200 	strd	r2, r2, [r4]
		if (state == ONOFF_STATE_TO_ON) {
    1324:	d109      	bne.n	133a <process_event+0xca>
    1326:	463b      	mov	r3, r7
    1328:	e003      	b.n	1332 <process_event+0xc2>
				mgr->refs += 1U;
    132a:	8b62      	ldrh	r2, [r4, #26]
    132c:	3201      	adds	r2, #1
    132e:	8362      	strh	r2, [r4, #26]
	return node->next;
    1330:	681b      	ldr	r3, [r3, #0]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    1332:	2b00      	cmp	r3, #0
    1334:	d1f9      	bne.n	132a <process_event+0xba>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    1336:	f041 0102 	orr.w	r1, r1, #2
	mgr->flags = (state & ONOFF_STATE_MASK)
    133a:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
    133c:	4620      	mov	r0, r4
    133e:	f005 fd04 	bl	6d4a <process_recheck>
    1342:	2800      	cmp	r0, #0
    1344:	d07b      	beq.n	143e <process_event+0x1ce>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    1346:	f041 0120 	orr.w	r1, r1, #32
    134a:	e077      	b.n	143c <process_event+0x1cc>
	} else if (state == ONOFF_STATE_TO_OFF) {
    134c:	2b04      	cmp	r3, #4
    134e:	d10a      	bne.n	1366 <process_event+0xf6>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    1350:	f021 0107 	bic.w	r1, r1, #7
    1354:	b289      	uxth	r1, r1
	mgr->flags = (state & ONOFF_STATE_MASK)
    1356:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
    1358:	4620      	mov	r0, r4
    135a:	f005 fcf6 	bl	6d4a <process_recheck>
    135e:	b110      	cbz	r0, 1366 <process_event+0xf6>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    1360:	f041 0120 	orr.w	r1, r1, #32
    1364:	8321      	strh	r1, [r4, #24]
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    1366:	8b21      	ldrh	r1, [r4, #24]
    1368:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
    136c:	45aa      	cmp	sl, r5
    136e:	d050      	beq.n	1412 <process_event+0x1a2>
    1370:	2700      	movs	r7, #0
		onoff_transition_fn transit = NULL;
    1372:	46b9      	mov	r9, r7
    1374:	e7aa      	b.n	12cc <process_event+0x5c>
			transit = mgr->transitions->start;
    1376:	6923      	ldr	r3, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    1378:	f021 0107 	bic.w	r1, r1, #7
    137c:	f041 0106 	orr.w	r1, r1, #6
				   && !sys_slist_is_empty(&mgr->monitors);
    1380:	2d06      	cmp	r5, #6
			transit = mgr->transitions->start;
    1382:	f8d3 9000 	ldr.w	r9, [r3]
	mgr->flags = (state & ONOFF_STATE_MASK)
    1386:	8321      	strh	r1, [r4, #24]
				   && !sys_slist_is_empty(&mgr->monitors);
    1388:	d12d      	bne.n	13e6 <process_event+0x176>
		    || (transit != NULL)) {
    138a:	f1b9 0f00 	cmp.w	r9, #0
    138e:	d040      	beq.n	1412 <process_event+0x1a2>
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
    1390:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
    1394:	8321      	strh	r1, [r4, #24]
    1396:	f388 8811 	msr	BASEPRI, r8
    139a:	f3bf 8f6f 	isb	sy
				transit(mgr, transition_complete);
    139e:	493a      	ldr	r1, [pc, #232]	; (1488 <process_event+0x218>)
    13a0:	4620      	mov	r0, r4
    13a2:	47c8      	blx	r9
    13a4:	e029      	b.n	13fa <process_event+0x18a>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    13a6:	f021 0107 	bic.w	r1, r1, #7
			transit = mgr->transitions->stop;
    13aa:	6923      	ldr	r3, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    13ac:	f041 0104 	orr.w	r1, r1, #4
    13b0:	b289      	uxth	r1, r1
				   && !sys_slist_is_empty(&mgr->monitors);
    13b2:	2d04      	cmp	r5, #4
			transit = mgr->transitions->stop;
    13b4:	f8d3 9004 	ldr.w	r9, [r3, #4]
	mgr->flags = (state & ONOFF_STATE_MASK)
    13b8:	8321      	strh	r1, [r4, #24]
				   && !sys_slist_is_empty(&mgr->monitors);
    13ba:	d0e6      	beq.n	138a <process_event+0x11a>
    13bc:	2700      	movs	r7, #0
		res = 0;
    13be:	463e      	mov	r6, r7
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    13c0:	f04f 0a04 	mov.w	sl, #4
    13c4:	e782      	b.n	12cc <process_event+0x5c>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    13c6:	f021 0107 	bic.w	r1, r1, #7
			transit = mgr->transitions->reset;
    13ca:	6923      	ldr	r3, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    13cc:	f041 0105 	orr.w	r1, r1, #5
    13d0:	b289      	uxth	r1, r1
				   && !sys_slist_is_empty(&mgr->monitors);
    13d2:	2d05      	cmp	r5, #5
			transit = mgr->transitions->reset;
    13d4:	f8d3 9008 	ldr.w	r9, [r3, #8]
	mgr->flags = (state & ONOFF_STATE_MASK)
    13d8:	8321      	strh	r1, [r4, #24]
				   && !sys_slist_is_empty(&mgr->monitors);
    13da:	d0d6      	beq.n	138a <process_event+0x11a>
    13dc:	2700      	movs	r7, #0
		res = 0;
    13de:	463e      	mov	r6, r7
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    13e0:	f04f 0a05 	mov.w	sl, #5
    13e4:	e772      	b.n	12cc <process_event+0x5c>
				   && !sys_slist_is_empty(&mgr->monitors);
    13e6:	2700      	movs	r7, #0
		res = 0;
    13e8:	463e      	mov	r6, r7
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    13ea:	f04f 0a06 	mov.w	sl, #6
    13ee:	e76d      	b.n	12cc <process_event+0x5c>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    13f0:	462b      	mov	r3, r5
    13f2:	e787      	b.n	1304 <process_event+0x94>
			if (transit != NULL) {
    13f4:	f1b9 0f00 	cmp.w	r9, #0
    13f8:	d1d1      	bne.n	139e <process_event+0x12e>
	__asm__ volatile(
    13fa:	f04f 0320 	mov.w	r3, #32
    13fe:	f3ef 8811 	mrs	r8, BASEPRI
    1402:	f383 8812 	msr	BASEPRI_MAX, r3
    1406:	f3bf 8f6f 	isb	sy
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
    140a:	8b23      	ldrh	r3, [r4, #24]
    140c:	f023 0308 	bic.w	r3, r3, #8
    1410:	8323      	strh	r3, [r4, #24]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
    1412:	8b25      	ldrh	r5, [r4, #24]
    1414:	06ea      	lsls	r2, r5, #27
    1416:	d52e      	bpl.n	1476 <process_event+0x206>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
    1418:	f025 0310 	bic.w	r3, r5, #16
    141c:	8323      	strh	r3, [r4, #24]
		state = mgr->flags & ONOFF_STATE_MASK;
    141e:	f005 0507 	and.w	r5, r5, #7
			res = mgr->last_res;
    1422:	6966      	ldr	r6, [r4, #20]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    1424:	8b21      	ldrh	r1, [r4, #24]
	if (res < 0) {
    1426:	2e00      	cmp	r6, #0
    1428:	f6bf af6f 	bge.w	130a <process_event+0x9a>
	list->head = NULL;
    142c:	2300      	movs	r3, #0
		*clients = mgr->clients;
    142e:	6827      	ldr	r7, [r4, #0]
	list->tail = NULL;
    1430:	e9c4 3300 	strd	r3, r3, [r4]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    1434:	f021 0107 	bic.w	r1, r1, #7
    1438:	f041 0101 	orr.w	r1, r1, #1
			mgr->flags |= ONOFF_FLAG_RECHECK;
    143c:	8321      	strh	r1, [r4, #24]
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    143e:	8b21      	ldrh	r1, [r4, #24]
    1440:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
    1444:	45aa      	cmp	sl, r5
    1446:	f04f 0900 	mov.w	r9, #0
    144a:	f47f af3f 	bne.w	12cc <process_event+0x5c>
		    || !sys_slist_is_empty(&clients)
    144e:	2f00      	cmp	r7, #0
    1450:	d09b      	beq.n	138a <process_event+0x11a>
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
    1452:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
    1456:	8321      	strh	r1, [r4, #24]
	__asm__ volatile(
    1458:	f388 8811 	msr	BASEPRI, r8
    145c:	f3bf 8f6f 	isb	sy
			if (!sys_slist_is_empty(&clients)) {
    1460:	2f00      	cmp	r7, #0
    1462:	d0c7      	beq.n	13f4 <process_event+0x184>
	return node->next;
    1464:	683d      	ldr	r5, [r7, #0]
		notify_one(mgr, cli, state, res);
    1466:	4639      	mov	r1, r7
    1468:	4633      	mov	r3, r6
    146a:	4652      	mov	r2, sl
    146c:	4620      	mov	r0, r4
    146e:	f005 fc98 	bl	6da2 <notify_one>
	list->head = node;
    1472:	462f      	mov	r7, r5
	while (!sys_slist_is_empty(list)) {
    1474:	e7f4      	b.n	1460 <process_event+0x1f0>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
    1476:	06ab      	lsls	r3, r5, #26
    1478:	f57f af1a 	bpl.w	12b0 <process_event+0x40>
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
    147c:	f025 0320 	bic.w	r3, r5, #32
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
    1480:	8323      	strh	r3, [r4, #24]
		state = mgr->flags & ONOFF_STATE_MASK;
    1482:	f005 0507 	and.w	r5, r5, #7
		if (evt == EVT_RECHECK) {
    1486:	e6ff      	b.n	1288 <process_event+0x18>
    1488:	00006dcf 	.word	0x00006dcf

0000148c <sys_reboot>:
#include <zephyr/sys/printk.h>

extern void sys_arch_reboot(int type);

FUNC_NORETURN void sys_reboot(int type)
{
    148c:	b508      	push	{r3, lr}
    148e:	4604      	mov	r4, r0
	__asm__ volatile(
    1490:	f04f 0220 	mov.w	r2, #32
    1494:	f3ef 8311 	mrs	r3, BASEPRI
    1498:	f382 8812 	msr	BASEPRI_MAX, r2
    149c:	f3bf 8f6f 	isb	sy
	sys_cache_instr_disable();
#endif /* CONFIG_ICACHE */
#endif /* CONFIG_ARCH_CACHE */

	if (IS_ENABLED(CONFIG_SYSTEM_TIMER_HAS_DISABLE_SUPPORT)) {
		sys_clock_disable();
    14a0:	f002 fce0 	bl	3e64 <sys_clock_disable>
	}

	sys_arch_reboot(type);
    14a4:	4620      	mov	r0, r4
    14a6:	f000 fef5 	bl	2294 <sys_arch_reboot>

	/* should never get here */
	printk("Failed to reboot: spinning endlessly...\n");
    14aa:	4803      	ldr	r0, [pc, #12]	; (14b8 <sys_reboot+0x2c>)
    14ac:	f005 fbd2 	bl	6c54 <printk>
 * @note In some architectures, before returning, the function unmasks interrupts
 * unconditionally.
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
    14b0:	f000 fa30 	bl	1914 <arch_cpu_idle>
    14b4:	e7fc      	b.n	14b0 <sys_reboot+0x24>
    14b6:	bf00      	nop
    14b8:	00008a77 	.word	0x00008a77

000014bc <z_arm_platform_init>:
	 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r0, =SystemInit
	bx r0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	b SystemInit
    14bc:	f002 bd16 	b.w	3eec <SystemInit>

000014c0 <pm_state_notify>:
/*
 * Function called to notify when the system is entering / exiting a
 * power state
 */
static inline void pm_state_notify(bool entering_state)
{
    14c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    14c4:	4605      	mov	r5, r0
    14c6:	f04f 0320 	mov.w	r3, #32
    14ca:	f3ef 8611 	mrs	r6, BASEPRI
    14ce:	f383 8812 	msr	BASEPRI_MAX, r3
    14d2:	f3bf 8f6f 	isb	sy
	return list->head;
    14d6:	4b0e      	ldr	r3, [pc, #56]	; (1510 <pm_state_notify+0x50>)
		} else {
			callback = notifier->state_exit;
		}

		if (callback) {
			callback(z_cpus_pm_state[_current_cpu->id].state);
    14d8:	4f0e      	ldr	r7, [pc, #56]	; (1514 <pm_state_notify+0x54>)
    14da:	681c      	ldr	r4, [r3, #0]
    14dc:	f8df 8038 	ldr.w	r8, [pc, #56]	; 1518 <pm_state_notify+0x58>
    14e0:	f04f 090c 	mov.w	r9, #12
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    14e4:	b92c      	cbnz	r4, 14f2 <pm_state_notify+0x32>
	__asm__ volatile(
    14e6:	f386 8811 	msr	BASEPRI, r6
    14ea:	f3bf 8f6f 	isb	sy
		}
	}
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
}
    14ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			callback = notifier->state_exit;
    14f2:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
			callback = notifier->state_entry;
    14f6:	2d00      	cmp	r5, #0
    14f8:	bf18      	it	ne
    14fa:	4613      	movne	r3, r2
		if (callback) {
    14fc:	b12b      	cbz	r3, 150a <pm_state_notify+0x4a>
			callback(z_cpus_pm_state[_current_cpu->id].state);
    14fe:	f898 2010 	ldrb.w	r2, [r8, #16]
    1502:	fb09 f202 	mul.w	r2, r9, r2
    1506:	5cb8      	ldrb	r0, [r7, r2]
    1508:	4798      	blx	r3
	return node->next;
    150a:	6824      	ldr	r4, [r4, #0]
    150c:	e7ea      	b.n	14e4 <pm_state_notify+0x24>
    150e:	bf00      	nop
    1510:	200005e8 	.word	0x200005e8
    1514:	200005dc 	.word	0x200005dc
    1518:	20000d70 	.word	0x20000d70

0000151c <pm_system_resume>:

void pm_system_resume(void)
{
    151c:	b570      	push	{r4, r5, r6, lr}
	uint8_t id = CURRENT_CPU;
    151e:	4b19      	ldr	r3, [pc, #100]	; (1584 <pm_system_resume+0x68>)
    1520:	7c1c      	ldrb	r4, [r3, #16]
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    1522:	f3bf 8f5b 	dmb	ish
 *
 * @return true if the bit was set, false if it wasn't.
 */
static inline bool atomic_test_and_clear_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
    1526:	f004 031f 	and.w	r3, r4, #31
    152a:	2201      	movs	r2, #1
    152c:	409a      	lsls	r2, r3
    152e:	4b16      	ldr	r3, [pc, #88]	; (1588 <pm_system_resume+0x6c>)
	atomic_val_t old;

	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    1530:	0961      	lsrs	r1, r4, #5
    1532:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    1536:	43d0      	mvns	r0, r2
    1538:	e853 1f00 	ldrex	r1, [r3]
    153c:	ea01 0500 	and.w	r5, r1, r0
    1540:	e843 5600 	strex	r6, r5, [r3]
    1544:	2e00      	cmp	r6, #0
    1546:	d1f7      	bne.n	1538 <pm_system_resume+0x1c>
    1548:	f3bf 8f5b 	dmb	ish
	 * that caused the wake. This hook will be called from the ISR.
	 * For such CPU LPS states, do post operations and restores here.
	 * The kernel scheduler will get control after the ISR finishes
	 * and it may schedule another thread.
	 */
	if (atomic_test_and_clear_bit(z_post_ops_required, id)) {
    154c:	420a      	tst	r2, r1
    154e:	d013      	beq.n	1578 <pm_system_resume+0x5c>
	if (pm_state_exit_post_ops != NULL) {
    1550:	4b0e      	ldr	r3, [pc, #56]	; (158c <pm_system_resume+0x70>)
    1552:	4d0f      	ldr	r5, [pc, #60]	; (1590 <pm_system_resume+0x74>)
    1554:	b18b      	cbz	r3, 157a <pm_system_resume+0x5e>
		pm_state_exit_post_ops(info->state, info->substate_id);
    1556:	230c      	movs	r3, #12
    1558:	4363      	muls	r3, r4
    155a:	18ea      	adds	r2, r5, r3
    155c:	5ce8      	ldrb	r0, [r5, r3]
    155e:	7851      	ldrb	r1, [r2, #1]
    1560:	f005 fdd1 	bl	7106 <pm_state_exit_post_ops>
		pm_exit_pos_ops(&z_cpus_pm_state[id]);
		pm_state_notify(false);
    1564:	2000      	movs	r0, #0
    1566:	f7ff ffab 	bl	14c0 <pm_state_notify>
		z_cpus_pm_state[id] = (struct pm_state_info){PM_STATE_ACTIVE,
    156a:	230c      	movs	r3, #12
    156c:	435c      	muls	r4, r3
    156e:	192a      	adds	r2, r5, r4
    1570:	2300      	movs	r3, #0
    1572:	512b      	str	r3, [r5, r4]
    1574:	e9c2 3301 	strd	r3, r3, [r2, #4]
			0, 0};
	}
}
    1578:	bd70      	pop	{r4, r5, r6, pc}
    157a:	f383 8811 	msr	BASEPRI, r3
    157e:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
    1582:	e7ef      	b.n	1564 <pm_system_resume+0x48>
    1584:	20000d70 	.word	0x20000d70
    1588:	200005f0 	.word	0x200005f0
    158c:	00007107 	.word	0x00007107
    1590:	200005dc 	.word	0x200005dc

00001594 <pm_system_suspend>:

	return true;
}

bool pm_system_suspend(int32_t ticks)
{
    1594:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t id = CURRENT_CPU;
    1598:	4b35      	ldr	r3, [pc, #212]	; (1670 <pm_system_suspend+0xdc>)
{
    159a:	4607      	mov	r7, r0
	uint8_t id = CURRENT_CPU;
    159c:	7c1d      	ldrb	r5, [r3, #16]
	__asm__ volatile(
    159e:	f04f 0320 	mov.w	r3, #32
    15a2:	f3ef 8811 	mrs	r8, BASEPRI
    15a6:	f383 8812 	msr	BASEPRI_MAX, r3
    15aa:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key;

	SYS_PORT_TRACING_FUNC_ENTER(pm, system_suspend, ticks);

	key = k_spin_lock(&pm_forced_state_lock);
	if (z_cpus_pm_forced_state[id].state != PM_STATE_ACTIVE) {
    15ae:	240c      	movs	r4, #12
    15b0:	4b30      	ldr	r3, [pc, #192]	; (1674 <pm_system_suspend+0xe0>)
    15b2:	4e31      	ldr	r6, [pc, #196]	; (1678 <pm_system_suspend+0xe4>)
    15b4:	436c      	muls	r4, r5
    15b6:	191a      	adds	r2, r3, r4
    15b8:	5d19      	ldrb	r1, [r3, r4]
    15ba:	2900      	cmp	r1, #0
    15bc:	d04c      	beq.n	1658 <pm_system_suspend+0xc4>
		z_cpus_pm_state[id] = z_cpus_pm_forced_state[id];
    15be:	ca07      	ldmia	r2, {r0, r1, r2}
    15c0:	eb06 0c04 	add.w	ip, r6, r4
    15c4:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
		z_cpus_pm_forced_state[id].state = PM_STATE_ACTIVE;
    15c8:	2200      	movs	r2, #0
    15ca:	551a      	strb	r2, [r3, r4]
	__asm__ volatile(
    15cc:	f388 8811 	msr	BASEPRI, r8
    15d0:	f3bf 8f6f 	isb	sy
			z_cpus_pm_state[id] = *info;
		}
	}
	k_spin_unlock(&pm_forced_state_lock, key);

	if (z_cpus_pm_state[id].state == PM_STATE_ACTIVE) {
    15d4:	230c      	movs	r3, #12
    15d6:	436b      	muls	r3, r5
    15d8:	18f2      	adds	r2, r6, r3
    15da:	5cf0      	ldrb	r0, [r6, r3]
    15dc:	2800      	cmp	r0, #0
    15de:	d039      	beq.n	1654 <pm_system_suspend+0xc0>
		SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);
		return false;
	}

	if (ticks != K_TICKS_FOREVER) {
    15e0:	1c7b      	adds	r3, r7, #1
    15e2:	d010      	beq.n	1606 <pm_system_suspend+0x72>
		} else {
			return t * ((uint64_t)to_hz / from_hz);
		}
	} else {
		if (result32) {
			return (uint32_t)((t * to_hz + off) / from_hz);
    15e4:	f8d2 c008 	ldr.w	ip, [r2, #8]
    15e8:	4c24      	ldr	r4, [pc, #144]	; (167c <pm_system_suspend+0xe8>)
    15ea:	4a25      	ldr	r2, [pc, #148]	; (1680 <pm_system_suspend+0xec>)
    15ec:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    15f0:	2100      	movs	r1, #0
    15f2:	fbec 4100 	umlal	r4, r1, ip, r0
    15f6:	2300      	movs	r3, #0
    15f8:	4620      	mov	r0, r4
    15fa:	f7fe fd81 	bl	100 <__aeabi_uldivmod>
		/*
		 * We need to set the timer to interrupt a little bit early to
		 * accommodate the time required by the CPU to fully wake up.
		 */
		sys_clock_set_timeout(ticks -
    15fe:	2101      	movs	r1, #1
    1600:	1a38      	subs	r0, r7, r0
    1602:	f002 fbf3 	bl	3dec <sys_clock_set_timeout>
	 * state. We don't want to be scheduled out yet, first we need
	 * to send a notification about leaving the idle state. So,
	 * we lock the scheduler here and unlock just after we have
	 * sent the notification in pm_system_resume().
	 */
	k_sched_lock();
    1606:	f004 fdb7 	bl	6178 <k_sched_lock>
	pm_stats_start();
	/* Enter power state */
	pm_state_notify(true);
    160a:	2001      	movs	r0, #1
    160c:	f7ff ff58 	bl	14c0 <pm_state_notify>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    1610:	f3bf 8f5b 	dmb	ish
    1614:	4b1b      	ldr	r3, [pc, #108]	; (1684 <pm_system_suspend+0xf0>)
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    1616:	096a      	lsrs	r2, r5, #5
    1618:	eb03 0382 	add.w	r3, r3, r2, lsl #2
	atomic_val_t mask = ATOMIC_MASK(bit);
    161c:	f005 011f 	and.w	r1, r5, #31
    1620:	2201      	movs	r2, #1
    1622:	408a      	lsls	r2, r1
    1624:	e853 0f00 	ldrex	r0, [r3]
    1628:	4310      	orrs	r0, r2
    162a:	e843 0100 	strex	r1, r0, [r3]
    162e:	2900      	cmp	r1, #0
    1630:	d1f8      	bne.n	1624 <pm_system_suspend+0x90>
    1632:	f3bf 8f5b 	dmb	ish
	if (pm_state_set != NULL) {
    1636:	4b14      	ldr	r3, [pc, #80]	; (1688 <pm_system_suspend+0xf4>)
    1638:	b13b      	cbz	r3, 164a <pm_system_suspend+0xb6>
		pm_state_set(info->state, info->substate_id);
    163a:	230c      	movs	r3, #12
    163c:	fb03 f005 	mul.w	r0, r3, r5
    1640:	1833      	adds	r3, r6, r0
    1642:	5c30      	ldrb	r0, [r6, r0]
    1644:	7859      	ldrb	r1, [r3, #1]
    1646:	f005 fd52 	bl	70ee <pm_state_set>
	if (atomic_add(&z_cpus_active, 1) == 0) {
		pm_resume_devices();
	}
#endif
	pm_stats_update(z_cpus_pm_state[id].state);
	pm_system_resume();
    164a:	f7ff ff67 	bl	151c <pm_system_resume>
	k_sched_unlock();
    164e:	f004 fda7 	bl	61a0 <k_sched_unlock>
	SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);

	return true;
    1652:	2001      	movs	r0, #1
}
    1654:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		info = pm_policy_next_state(id, ticks);
    1658:	4601      	mov	r1, r0
    165a:	4628      	mov	r0, r5
    165c:	f000 f816 	bl	168c <pm_policy_next_state>
		if (info != NULL) {
    1660:	2800      	cmp	r0, #0
    1662:	d0b3      	beq.n	15cc <pm_system_suspend+0x38>
			z_cpus_pm_state[id] = *info;
    1664:	c807      	ldmia	r0, {r0, r1, r2}
    1666:	4434      	add	r4, r6
    1668:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    166c:	e7ae      	b.n	15cc <pm_system_suspend+0x38>
    166e:	bf00      	nop
    1670:	20000d70 	.word	0x20000d70
    1674:	200005d0 	.word	0x200005d0
    1678:	200005dc 	.word	0x200005dc
    167c:	000f423f 	.word	0x000f423f
    1680:	000f4240 	.word	0x000f4240
    1684:	200005f0 	.word	0x200005f0
    1688:	000070ef 	.word	0x000070ef

0000168c <pm_policy_next_state>:
	}
}

#ifdef CONFIG_PM_POLICY_DEFAULT
const struct pm_state_info *pm_policy_next_state(uint8_t cpu, int32_t ticks)
{
    168c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1690:	b085      	sub	sp, #20
    1692:	460e      	mov	r6, r1
	uint8_t num_cpu_states;
	const struct pm_state_info *cpu_states;

	num_cpu_states = pm_state_cpu_get_all(cpu, &cpu_states);
    1694:	a903      	add	r1, sp, #12
    1696:	f000 f843 	bl	1720 <pm_state_cpu_get_all>

		min_residency = k_us_to_ticks_ceil32(state->min_residency_us);
		exit_latency = k_us_to_ticks_ceil32(state->exit_latency_us);

		/* skip state if it brings too much latency */
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
    169a:	4b1e      	ldr	r3, [pc, #120]	; (1714 <pm_policy_next_state+0x88>)
    169c:	9d03      	ldr	r5, [sp, #12]
    169e:	f8d3 a000 	ldr.w	sl, [r3]
    16a2:	f8df 8078 	ldr.w	r8, [pc, #120]	; 171c <pm_policy_next_state+0x90>
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
    16a6:	1e43      	subs	r3, r0, #1
    16a8:	b21b      	sxth	r3, r3
    16aa:	eb03 0343 	add.w	r3, r3, r3, lsl #1
	num_cpu_states = pm_state_cpu_get_all(cpu, &cpu_states);
    16ae:	4604      	mov	r4, r0
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
    16b0:	eb05 0583 	add.w	r5, r5, r3, lsl #2
    16b4:	f44f 4700 	mov.w	r7, #32768	; 0x8000
    16b8:	f04f 0b00 	mov.w	fp, #0
    16bc:	b924      	cbnz	r4, 16c8 <pm_policy_next_state+0x3c>
		    (ticks >= (min_residency + exit_latency))) {
			return state;
		}
	}

	return NULL;
    16be:	46a1      	mov	r9, r4
}
    16c0:	4648      	mov	r0, r9
    16c2:	b005      	add	sp, #20
    16c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    16c8:	6868      	ldr	r0, [r5, #4]
    16ca:	4a13      	ldr	r2, [pc, #76]	; (1718 <pm_policy_next_state+0x8c>)
    16cc:	46c4      	mov	ip, r8
    16ce:	4659      	mov	r1, fp
    16d0:	fbe0 c107 	umlal	ip, r1, r0, r7
    16d4:	2300      	movs	r3, #0
    16d6:	4660      	mov	r0, ip
    16d8:	f7fe fd12 	bl	100 <__aeabi_uldivmod>
    16dc:	9001      	str	r0, [sp, #4]
    16de:	68a8      	ldr	r0, [r5, #8]
    16e0:	4a0d      	ldr	r2, [pc, #52]	; (1718 <pm_policy_next_state+0x8c>)
    16e2:	46c4      	mov	ip, r8
    16e4:	4659      	mov	r1, fp
    16e6:	fbe0 c107 	umlal	ip, r1, r0, r7
    16ea:	2300      	movs	r3, #0
    16ec:	4660      	mov	r0, ip
    16ee:	f7fe fd07 	bl	100 <__aeabi_uldivmod>
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
    16f2:	f1ba 3fff 	cmp.w	sl, #4294967295
		const struct pm_state_info *state = &cpu_states[i];
    16f6:	46a9      	mov	r9, r5
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
    16f8:	d001      	beq.n	16fe <pm_policy_next_state+0x72>
    16fa:	4582      	cmp	sl, r0
    16fc:	d905      	bls.n	170a <pm_policy_next_state+0x7e>
		if ((ticks == K_TICKS_FOREVER) ||
    16fe:	1c73      	adds	r3, r6, #1
    1700:	d0de      	beq.n	16c0 <pm_policy_next_state+0x34>
		    (ticks >= (min_residency + exit_latency))) {
    1702:	9b01      	ldr	r3, [sp, #4]
    1704:	4418      	add	r0, r3
		if ((ticks == K_TICKS_FOREVER) ||
    1706:	42b0      	cmp	r0, r6
    1708:	d9da      	bls.n	16c0 <pm_policy_next_state+0x34>
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
    170a:	3c01      	subs	r4, #1
    170c:	b2a4      	uxth	r4, r4
    170e:	3d0c      	subs	r5, #12
    1710:	e7d4      	b.n	16bc <pm_policy_next_state+0x30>
    1712:	bf00      	nop
    1714:	2000009c 	.word	0x2000009c
    1718:	000f4240 	.word	0x000f4240
    171c:	000f423f 	.word	0x000f423f

00001720 <pm_state_cpu_get_all>:
	DT_FOREACH_CHILD_SEP(DT_PATH(cpus), DT_NUM_CPU_POWER_STATES, (,))
};

uint8_t pm_state_cpu_get_all(uint8_t cpu, const struct pm_state_info **states)
{
	if (cpu >= ARRAY_SIZE(cpus_states)) {
    1720:	b908      	cbnz	r0, 1726 <pm_state_cpu_get_all+0x6>
		return 0;
	}

	*states = cpus_states[cpu];
    1722:	4b02      	ldr	r3, [pc, #8]	; (172c <pm_state_cpu_get_all+0xc>)
    1724:	600b      	str	r3, [r1, #0]

	return states_per_cpu[cpu];
}
    1726:	2000      	movs	r0, #0
    1728:	4770      	bx	lr
    172a:	bf00      	nop
    172c:	00008738 	.word	0x00008738

00001730 <nrf_cc3xx_platform_abort_init>:

/** @brief Function to initialize the nrf_cc3xx_platform abort APIs.
 */
void nrf_cc3xx_platform_abort_init(void)
{
	nrf_cc3xx_platform_set_abort(&apis);
    1730:	4801      	ldr	r0, [pc, #4]	; (1738 <nrf_cc3xx_platform_abort_init+0x8>)
    1732:	f005 b8e9 	b.w	6908 <nrf_cc3xx_platform_set_abort>
    1736:	bf00      	nop
    1738:	00008738 	.word	0x00008738

0000173c <mutex_free_platform>:
}


/** @brief Static function to free a mutex
 */
static void mutex_free_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    173c:	b538      	push	{r3, r4, r5, lr}
    /* Ensure that the mutex is valid (not NULL) */
    if (mutex == NULL) {
    173e:	4604      	mov	r4, r0
    1740:	b918      	cbnz	r0, 174a <mutex_free_platform+0xe>
        platform_abort_apis.abort_fn(
    1742:	4b0f      	ldr	r3, [pc, #60]	; (1780 <mutex_free_platform+0x44>)
    1744:	480f      	ldr	r0, [pc, #60]	; (1784 <mutex_free_platform+0x48>)
    1746:	685b      	ldr	r3, [r3, #4]
    1748:	4798      	blx	r3
            "mutex_init called with NULL parameter");
    }

    /* Check if we are freeing a mutex that is atomic */
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
    174a:	6861      	ldr	r1, [r4, #4]
    174c:	f5b1 3f68 	cmp.w	r1, #237568	; 0x3a000
    1750:	d00f      	beq.n	1772 <mutex_free_platform+0x36>
    1752:	f5b1 0f68 	cmp.w	r1, #15204352	; 0xe80000
    1756:	d00c      	beq.n	1772 <mutex_free_platform+0x36>
        /*Nothing to free*/
        return;
    }

    /* Check if we are freeing a mutex that isn't initialized */
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    1758:	4d0b      	ldr	r5, [pc, #44]	; (1788 <mutex_free_platform+0x4c>)
    175a:	42a9      	cmp	r1, r5
    175c:	d009      	beq.n	1772 <mutex_free_platform+0x36>
        /*Nothing to free*/
        return;
    }

    /* Check if the mutex was allocated or being statically defined */
    if ((mutex->flags & NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED) != 0) {
    175e:	f411 6168 	ands.w	r1, r1, #3712	; 0xe80
    1762:	d007      	beq.n	1774 <mutex_free_platform+0x38>
        k_mem_slab_free(&mutex_slab, &mutex->mutex);
    1764:	4809      	ldr	r0, [pc, #36]	; (178c <mutex_free_platform+0x50>)
    1766:	4621      	mov	r1, r4
    1768:	f006 fc29 	bl	7fbe <k_mem_slab_free>
        mutex->mutex = NULL;
    176c:	2300      	movs	r3, #0
    176e:	6023      	str	r3, [r4, #0]
    else {
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
    }

    /* Reset the mutex to invalid state */
    mutex->flags = NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID;
    1770:	6065      	str	r5, [r4, #4]
}
    1772:	bd38      	pop	{r3, r4, r5, pc}
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
    1774:	6820      	ldr	r0, [r4, #0]
    1776:	2214      	movs	r2, #20
    1778:	f005 fcad 	bl	70d6 <memset>
    177c:	e7f8      	b.n	1770 <mutex_free_platform+0x34>
    177e:	bf00      	nop
    1780:	20000254 	.word	0x20000254
    1784:	00008ab3 	.word	0x00008ab3
    1788:	a95c5f2c 	.word	0xa95c5f2c
    178c:	20000af4 	.word	0x20000af4

00001790 <mutex_lock_platform>:


/** @brief Static function to lock a mutex
 */
static int32_t mutex_lock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    1790:	b508      	push	{r3, lr}
    int ret;
    struct k_mutex * p_mutex;

    /* Ensure that the mutex param is valid (not NULL) */
    if(mutex == NULL) {
    1792:	b320      	cbz	r0, 17de <mutex_lock_platform+0x4e>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    }

    switch (mutex->flags) {
    1794:	6843      	ldr	r3, [r0, #4]
    1796:	f5b3 3f68 	cmp.w	r3, #237568	; 0x3a000
    179a:	d110      	bne.n	17be <mutex_lock_platform+0x2e>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    179c:	2201      	movs	r2, #1
    179e:	6803      	ldr	r3, [r0, #0]
    17a0:	f3bf 8f5b 	dmb	ish
    17a4:	e853 1f00 	ldrex	r1, [r3]
    17a8:	2900      	cmp	r1, #0
    17aa:	d103      	bne.n	17b4 <mutex_lock_platform+0x24>
    17ac:	e843 2000 	strex	r0, r2, [r3]
    17b0:	2800      	cmp	r0, #0
    17b2:	d1f7      	bne.n	17a4 <mutex_lock_platform+0x14>
    17b4:	f3bf 8f5b 	dmb	ish
    case NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC:
        return atomic_cas((atomic_t *)mutex->mutex, 0, 1) ?
                       NRF_CC3XX_PLATFORM_SUCCESS :
    17b8:	d10d      	bne.n	17d6 <mutex_lock_platform+0x46>

        p_mutex = (struct k_mutex *)mutex->mutex;

        ret = k_mutex_lock(p_mutex, K_FOREVER);
        if (ret == 0) {
            return NRF_CC3XX_PLATFORM_SUCCESS;
    17ba:	2000      	movs	r0, #0
        } else {
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_FAILED;
        }
    }
}
    17bc:	bd08      	pop	{r3, pc}
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    17be:	4a09      	ldr	r2, [pc, #36]	; (17e4 <mutex_lock_platform+0x54>)
    17c0:	4293      	cmp	r3, r2
    17c2:	d00a      	beq.n	17da <mutex_lock_platform+0x4a>
        p_mutex = (struct k_mutex *)mutex->mutex;
    17c4:	6800      	ldr	r0, [r0, #0]
	return z_impl_k_mutex_lock(mutex, timeout);
    17c6:	f04f 32ff 	mov.w	r2, #4294967295
    17ca:	f04f 33ff 	mov.w	r3, #4294967295
    17ce:	f004 f977 	bl	5ac0 <z_impl_k_mutex_lock>
        if (ret == 0) {
    17d2:	2800      	cmp	r0, #0
    17d4:	d0f1      	beq.n	17ba <mutex_lock_platform+0x2a>
                       NRF_CC3XX_PLATFORM_SUCCESS :
    17d6:	4804      	ldr	r0, [pc, #16]	; (17e8 <mutex_lock_platform+0x58>)
    17d8:	e7f0      	b.n	17bc <mutex_lock_platform+0x2c>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
    17da:	4804      	ldr	r0, [pc, #16]	; (17ec <mutex_lock_platform+0x5c>)
    17dc:	e7ee      	b.n	17bc <mutex_lock_platform+0x2c>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    17de:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    17e2:	e7eb      	b.n	17bc <mutex_lock_platform+0x2c>
    17e4:	a95c5f2c 	.word	0xa95c5f2c
    17e8:	ffff8fe9 	.word	0xffff8fe9
    17ec:	ffff8fea 	.word	0xffff8fea

000017f0 <mutex_unlock_platform>:

/** @brief Static function to unlock a mutex
 */
static int32_t mutex_unlock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    17f0:	b508      	push	{r3, lr}
    struct k_mutex * p_mutex;

    /* Ensure that the mutex param is valid (not NULL) */
    if(mutex == NULL) {
    17f2:	b1d8      	cbz	r0, 182c <mutex_unlock_platform+0x3c>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    }

    switch (mutex->flags)
    17f4:	6843      	ldr	r3, [r0, #4]
    17f6:	f5b3 3f68 	cmp.w	r3, #237568	; 0x3a000
    17fa:	d110      	bne.n	181e <mutex_unlock_platform+0x2e>
    17fc:	2200      	movs	r2, #0
    17fe:	6803      	ldr	r3, [r0, #0]
    1800:	f3bf 8f5b 	dmb	ish
    1804:	e853 1f00 	ldrex	r1, [r3]
    1808:	2901      	cmp	r1, #1
    180a:	d103      	bne.n	1814 <mutex_unlock_platform+0x24>
    180c:	e843 2000 	strex	r0, r2, [r3]
    1810:	2800      	cmp	r0, #0
    1812:	d1f7      	bne.n	1804 <mutex_unlock_platform+0x14>
    1814:	f3bf 8f5b 	dmb	ish
    {
    case NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC:
        return atomic_cas((atomic_t *)mutex->mutex, 1, 0) ?
                       NRF_CC3XX_PLATFORM_SUCCESS :
    1818:	d10b      	bne.n	1832 <mutex_unlock_platform+0x42>
        }

        p_mutex = (struct k_mutex *)mutex->mutex;

        k_mutex_unlock(p_mutex);
        return NRF_CC3XX_PLATFORM_SUCCESS;
    181a:	2000      	movs	r0, #0
    }
}
    181c:	bd08      	pop	{r3, pc}
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    181e:	4a07      	ldr	r2, [pc, #28]	; (183c <mutex_unlock_platform+0x4c>)
    1820:	4293      	cmp	r3, r2
    1822:	d008      	beq.n	1836 <mutex_unlock_platform+0x46>
        p_mutex = (struct k_mutex *)mutex->mutex;
    1824:	6800      	ldr	r0, [r0, #0]
	return z_impl_k_mutex_unlock(mutex);
    1826:	f004 f9c5 	bl	5bb4 <z_impl_k_mutex_unlock>
    182a:	e7f6      	b.n	181a <mutex_unlock_platform+0x2a>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    182c:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    1830:	e7f4      	b.n	181c <mutex_unlock_platform+0x2c>
                       NRF_CC3XX_PLATFORM_SUCCESS :
    1832:	4803      	ldr	r0, [pc, #12]	; (1840 <mutex_unlock_platform+0x50>)
    1834:	e7f2      	b.n	181c <mutex_unlock_platform+0x2c>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
    1836:	4803      	ldr	r0, [pc, #12]	; (1844 <mutex_unlock_platform+0x54>)
    1838:	e7f0      	b.n	181c <mutex_unlock_platform+0x2c>
    183a:	bf00      	nop
    183c:	a95c5f2c 	.word	0xa95c5f2c
    1840:	ffff8fe9 	.word	0xffff8fe9
    1844:	ffff8fea 	.word	0xffff8fea

00001848 <mutex_init_platform>:
static void mutex_init_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    1848:	b510      	push	{r4, lr}
    if (mutex == NULL) {
    184a:	4604      	mov	r4, r0
    184c:	b918      	cbnz	r0, 1856 <mutex_init_platform+0xe>
        platform_abort_apis.abort_fn(
    184e:	4b1d      	ldr	r3, [pc, #116]	; (18c4 <mutex_init_platform+0x7c>)
    1850:	481d      	ldr	r0, [pc, #116]	; (18c8 <mutex_init_platform+0x80>)
    1852:	685b      	ldr	r3, [r3, #4]
    1854:	4798      	blx	r3
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
    1856:	6863      	ldr	r3, [r4, #4]
    1858:	f5b3 3f68 	cmp.w	r3, #237568	; 0x3a000
    185c:	d02f      	beq.n	18be <mutex_init_platform+0x76>
    185e:	f5b3 0f68 	cmp.w	r3, #15204352	; 0xe80000
    1862:	d02c      	beq.n	18be <mutex_init_platform+0x76>
    if ((mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID && mutex->mutex == NULL) ||
    1864:	4a19      	ldr	r2, [pc, #100]	; (18cc <mutex_init_platform+0x84>)
    1866:	4293      	cmp	r3, r2
    1868:	d119      	bne.n	189e <mutex_init_platform+0x56>
    186a:	6823      	ldr	r3, [r4, #0]
    186c:	bb03      	cbnz	r3, 18b0 <mutex_init_platform+0x68>
        ret = k_mem_slab_alloc(&mutex_slab, &mutex->mutex, K_FOREVER);
    186e:	4818      	ldr	r0, [pc, #96]	; (18d0 <mutex_init_platform+0x88>)
    1870:	f04f 32ff 	mov.w	r2, #4294967295
    1874:	f04f 33ff 	mov.w	r3, #4294967295
    1878:	4621      	mov	r1, r4
    187a:	f004 f81d 	bl	58b8 <k_mem_slab_alloc>
        if(ret != 0 || mutex->mutex == NULL)
    187e:	b908      	cbnz	r0, 1884 <mutex_init_platform+0x3c>
    1880:	6823      	ldr	r3, [r4, #0]
    1882:	b91b      	cbnz	r3, 188c <mutex_init_platform+0x44>
            platform_abort_apis.abort_fn(
    1884:	4b0f      	ldr	r3, [pc, #60]	; (18c4 <mutex_init_platform+0x7c>)
    1886:	4813      	ldr	r0, [pc, #76]	; (18d4 <mutex_init_platform+0x8c>)
    1888:	685b      	ldr	r3, [r3, #4]
    188a:	4798      	blx	r3
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
    188c:	6820      	ldr	r0, [r4, #0]
    188e:	2214      	movs	r2, #20
    1890:	2100      	movs	r1, #0
    1892:	f005 fc20 	bl	70d6 <memset>
        mutex->flags = NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED;
    1896:	f44f 6368 	mov.w	r3, #3712	; 0xe80
    189a:	6063      	str	r3, [r4, #4]
    189c:	e008      	b.n	18b0 <mutex_init_platform+0x68>
    switch(flags){
    189e:	f5b3 3f68 	cmp.w	r3, #237568	; 0x3a000
    18a2:	d80d      	bhi.n	18c0 <mutex_init_platform+0x78>
    18a4:	2b3a      	cmp	r3, #58	; 0x3a
    18a6:	d003      	beq.n	18b0 <mutex_init_platform+0x68>
    18a8:	f640 62ba 	movw	r2, #3770	; 0xeba
    18ac:	4293      	cmp	r3, r2
    18ae:	d1de      	bne.n	186e <mutex_init_platform+0x26>
    p_mutex = (struct k_mutex *)mutex->mutex;
    18b0:	6820      	ldr	r0, [r4, #0]
	return z_impl_k_mutex_init(mutex);
    18b2:	f006 fbc7 	bl	8044 <z_impl_k_mutex_init>
    mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_VALID;
    18b6:	6863      	ldr	r3, [r4, #4]
    18b8:	f043 033a 	orr.w	r3, r3, #58	; 0x3a
    18bc:	6063      	str	r3, [r4, #4]
}
    18be:	bd10      	pop	{r4, pc}
    switch(flags){
    18c0:	4a05      	ldr	r2, [pc, #20]	; (18d8 <mutex_init_platform+0x90>)
    18c2:	e7f3      	b.n	18ac <mutex_init_platform+0x64>
    18c4:	20000254 	.word	0x20000254
    18c8:	00008ab3 	.word	0x00008ab3
    18cc:	a95c5f2c 	.word	0xa95c5f2c
    18d0:	20000af4 	.word	0x20000af4
    18d4:	00008ad9 	.word	0x00008ad9
    18d8:	3a00003a 	.word	0x3a00003a

000018dc <nrf_cc3xx_platform_mutex_init>:
};

/** @brief Function to initialize the nrf_cc3xx_platform mutex APIs
 */
void nrf_cc3xx_platform_mutex_init(void)
{
    18dc:	b508      	push	{r3, lr}
    k_mem_slab_init(&mutex_slab,
    18de:	4906      	ldr	r1, [pc, #24]	; (18f8 <nrf_cc3xx_platform_mutex_init+0x1c>)
    18e0:	4806      	ldr	r0, [pc, #24]	; (18fc <nrf_cc3xx_platform_mutex_init+0x20>)
    18e2:	2340      	movs	r3, #64	; 0x40
    18e4:	2214      	movs	r2, #20
    18e6:	f006 fb5c 	bl	7fa2 <k_mem_slab_init>
                mutex_slab_buffer,
                sizeof(struct k_mutex),
                NUM_MUTEXES);

    nrf_cc3xx_platform_set_mutexes(&mutex_apis, &mutexes);
}
    18ea:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrf_cc3xx_platform_set_mutexes(&mutex_apis, &mutexes);
    18ee:	4904      	ldr	r1, [pc, #16]	; (1900 <nrf_cc3xx_platform_mutex_init+0x24>)
    18f0:	4804      	ldr	r0, [pc, #16]	; (1904 <nrf_cc3xx_platform_mutex_init+0x28>)
    18f2:	f005 b87b 	b.w	69ec <nrf_cc3xx_platform_set_mutexes>
    18f6:	bf00      	nop
    18f8:	200005f4 	.word	0x200005f4
    18fc:	20000af4 	.word	0x20000af4
    1900:	00008740 	.word	0x00008740
    1904:	00008754 	.word	0x00008754

00001908 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
    1908:	4901      	ldr	r1, [pc, #4]	; (1910 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
    190a:	2210      	movs	r2, #16
	str	r2, [r1]
    190c:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
    190e:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
    1910:	e000ed10 	.word	0xe000ed10

00001914 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
    1914:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
    1916:	4040      	eors	r0, r0
	msr	BASEPRI, r0
    1918:	f380 8811 	msr	BASEPRI, r0
	isb
    191c:	f3bf 8f6f 	isb	sy
	 * (i.e. if the caller sets _kernel.idle).
	 */
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */

	/* Enter low power state */
	_sleep_if_allowed wfi
    1920:	f3bf 8f4f 	dsb	sy
    1924:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
    1926:	b662      	cpsie	i
	isb
    1928:	f3bf 8f6f 	isb	sy

	bx	lr
    192c:	4770      	bx	lr
    192e:	bf00      	nop

00001930 <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
    1930:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
    1932:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
    1934:	f381 8811 	msr	BASEPRI, r1

	_sleep_if_allowed wfe
    1938:	f3bf 8f4f 	dsb	sy
    193c:	bf20      	wfe

	msr	BASEPRI, r0
    193e:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
    1942:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
    1944:	4770      	bx	lr
    1946:	bf00      	nop

00001948 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    1948:	b240      	sxtb	r0, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    194a:	2800      	cmp	r0, #0
    194c:	db07      	blt.n	195e <arch_irq_enable+0x16>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    194e:	4a04      	ldr	r2, [pc, #16]	; (1960 <arch_irq_enable+0x18>)
    1950:	0941      	lsrs	r1, r0, #5
    1952:	2301      	movs	r3, #1
    1954:	f000 001f 	and.w	r0, r0, #31
    1958:	4083      	lsls	r3, r0
    195a:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
}
    195e:	4770      	bx	lr
    1960:	e000e100 	.word	0xe000e100

00001964 <arch_irq_disable>:

void arch_irq_disable(unsigned int irq)
{
	NVIC_DisableIRQ((IRQn_Type)irq);
    1964:	b240      	sxtb	r0, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    1966:	2800      	cmp	r0, #0
    1968:	db0c      	blt.n	1984 <arch_irq_disable+0x20>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    196a:	0943      	lsrs	r3, r0, #5
    196c:	4906      	ldr	r1, [pc, #24]	; (1988 <arch_irq_disable+0x24>)
    196e:	f000 001f 	and.w	r0, r0, #31
    1972:	3320      	adds	r3, #32
    1974:	2201      	movs	r2, #1
    1976:	4082      	lsls	r2, r0
    1978:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    197c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1980:	f3bf 8f6f 	isb	sy
}
    1984:	4770      	bx	lr
    1986:	bf00      	nop
    1988:	e000e100 	.word	0xe000e100

0000198c <arch_irq_is_enabled>:

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
    198c:	4b05      	ldr	r3, [pc, #20]	; (19a4 <arch_irq_is_enabled+0x18>)
    198e:	0942      	lsrs	r2, r0, #5
    1990:	f000 001f 	and.w	r0, r0, #31
    1994:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    1998:	2301      	movs	r3, #1
    199a:	fa03 f000 	lsl.w	r0, r3, r0
}
    199e:	4010      	ands	r0, r2
    19a0:	4770      	bx	lr
    19a2:	bf00      	nop
    19a4:	e000e100 	.word	0xe000e100

000019a8 <z_arm_irq_priority_set>:
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    19a8:	b240      	sxtb	r0, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
    19aa:	2800      	cmp	r0, #0
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    19ac:	bfa8      	it	ge
    19ae:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
		prio += _IRQ_PRIO_OFFSET;
    19b2:	f101 0101 	add.w	r1, r1, #1
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    19b6:	bfb8      	it	lt
    19b8:	4b06      	ldrlt	r3, [pc, #24]	; (19d4 <z_arm_irq_priority_set+0x2c>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    19ba:	ea4f 1141 	mov.w	r1, r1, lsl #5
    19be:	bfac      	ite	ge
    19c0:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    19c4:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    19c8:	b2c9      	uxtb	r1, r1
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    19ca:	bfb4      	ite	lt
    19cc:	5419      	strblt	r1, [r3, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    19ce:	f880 1300 	strbge.w	r1, [r0, #768]	; 0x300
}
    19d2:	4770      	bx	lr
    19d4:	e000ed14 	.word	0xe000ed14

000019d8 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
    19d8:	bf30      	wfi
    b z_SysNmiOnReset
    19da:	f7ff bffd 	b.w	19d8 <z_SysNmiOnReset>
    19de:	bf00      	nop

000019e0 <z_arm_prep_c>:

#define VECTOR_ADDRESS ((uintptr_t)_vector_start)

static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    19e0:	4a14      	ldr	r2, [pc, #80]	; (1a34 <z_arm_prep_c+0x54>)
 *
 * This routine prepares for the execution of and runs C code.
 *
 */
void z_arm_prep_c(void)
{
    19e2:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    19e4:	4b14      	ldr	r3, [pc, #80]	; (1a38 <z_arm_prep_c+0x58>)
    19e6:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    19ea:	609a      	str	r2, [r3, #8]
  __ASM volatile ("dsb 0xF":::"memory");
    19ec:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    19f0:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
    19f4:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    19f8:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    19fc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	SCB->CPACR |= CPACR_CP10_PRIV_ACCESS | CPACR_CP11_PRIV_ACCESS;
    1a00:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    1a04:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
    1a08:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	FPU->FPCCR = FPU_FPCCR_ASPEN_Msk | FPU_FPCCR_LSPEN_Msk;
    1a0c:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
    1a10:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234
  __ASM volatile ("dsb 0xF":::"memory");
    1a14:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1a18:	f3bf 8f6f 	isb	sy
     (defined (__FPU_USED   ) && (__FPU_USED    == 1U))     )
#if __has_builtin(__builtin_arm_set_fpscr)
// Re-enable using built-in when GCC has been fixed
// || (__GNUC__ > 7) || (__GNUC__ == 7 && __GNUC_MINOR__ >= 2)
  /* see https://gcc.gnu.org/ml/gcc-patches/2017-04/msg00443.html */
  __builtin_arm_set_fpscr(fpscr);
    1a1c:	2300      	movs	r3, #0
    1a1e:	eee1 3a10 	vmsr	fpscr, r3
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
    1a22:	f003 fe83 	bl	572c <z_bss_zero>
	z_data_copy();
    1a26:	f004 fcf3 	bl	6410 <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
    1a2a:	f000 fa9f 	bl	1f6c <z_arm_interrupt_init>
	z_cstart();
    1a2e:	f003 fec1 	bl	57b4 <z_cstart>
    1a32:	bf00      	nop
    1a34:	00000000 	.word	0x00000000
    1a38:	e000ed00 	.word	0xe000ed00

00001a3c <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
    1a3c:	4a09      	ldr	r2, [pc, #36]	; (1a64 <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
    1a3e:	490a      	ldr	r1, [pc, #40]	; (1a68 <arch_swap+0x2c>)
	_current->arch.basepri = key;
    1a40:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
    1a42:	6809      	ldr	r1, [r1, #0]
    1a44:	6799      	str	r1, [r3, #120]	; 0x78

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    1a46:	4909      	ldr	r1, [pc, #36]	; (1a6c <arch_swap+0x30>)
	_current->arch.basepri = key;
    1a48:	6758      	str	r0, [r3, #116]	; 0x74
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    1a4a:	684b      	ldr	r3, [r1, #4]
    1a4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    1a50:	604b      	str	r3, [r1, #4]
    1a52:	2300      	movs	r3, #0
    1a54:	f383 8811 	msr	BASEPRI, r3
    1a58:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
    1a5c:	6893      	ldr	r3, [r2, #8]
}
    1a5e:	6f98      	ldr	r0, [r3, #120]	; 0x78
    1a60:	4770      	bx	lr
    1a62:	bf00      	nop
    1a64:	20000d70 	.word	0x20000d70
    1a68:	000089bc 	.word	0x000089bc
    1a6c:	e000ed00 	.word	0xe000ed00

00001a70 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    1a70:	4921      	ldr	r1, [pc, #132]	; (1af8 <in_fp_endif+0x2a>)
    ldr r2, [r1, #_kernel_offset_to_current]
    1a72:	688a      	ldr	r2, [r1, #8]

#if defined(CONFIG_ARM_STORE_EXC_RETURN)
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
    1a74:	f882 e0bd 	strb.w	lr, [r2, #189]	; 0xbd
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    1a78:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
    1a7c:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
    1a7e:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    1a82:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#ifdef CONFIG_FPU_SHARING
    /* Assess whether switched-out thread had been using the FP registers. */
    tst lr, #_EXC_RETURN_FTYPE_Msk
    1a86:	f01e 0f10 	tst.w	lr, #16
    bne out_fp_endif
    1a8a:	d103      	bne.n	1a94 <out_fp_endif>
    /* FP context active: set FP state and store callee-saved registers.
     * Note: if Lazy FP stacking is enabled, storing the callee-saved
     * registers will automatically trigger FP state preservation in
     * the thread's stack. This will also clear the FPCCR.LSPACT flag.
     */
    add r0, r2, #_thread_offset_to_preempt_float
    1a8c:	f102 007c 	add.w	r0, r2, #124	; 0x7c
    vstmia r0, {s16-s31}
    1a90:	ec80 8a10 	vstmia	r0, {s16-s31}

00001a94 <out_fp_endif>:

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    1a94:	2020      	movs	r0, #32
    msr BASEPRI_MAX, r0
    1a96:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
    1a9a:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
    1a9e:	4f17      	ldr	r7, [pc, #92]	; (1afc <in_fp_endif+0x2e>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    1aa0:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
    1aa4:	69ca      	ldr	r2, [r1, #28]

    str r2, [r1, #_kernel_offset_to_current]
    1aa6:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
    1aa8:	603e      	str	r6, [r7, #0]

#endif

#if defined(CONFIG_ARM_STORE_EXC_RETURN)
    /* Restore EXC_RETURN value. */
    ldrsb lr, [r2, #_thread_offset_to_mode_exc_return]
    1aaa:	f992 e0bd 	ldrsb.w	lr, [r2, #189]	; 0xbd

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
    1aae:	6f50      	ldr	r0, [r2, #116]	; 0x74
    movs r3, #0
    1ab0:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    1ab2:	6753      	str	r3, [r2, #116]	; 0x74
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    1ab4:	f380 8811 	msr	BASEPRI, r0

#ifdef CONFIG_FPU_SHARING
    /* Assess whether switched-in thread had been using the FP registers. */
    tst lr, #_EXC_RETURN_FTYPE_Msk
    1ab8:	f01e 0f10 	tst.w	lr, #16
    beq in_fp_active
    1abc:	d003      	beq.n	1ac6 <in_fp_active>
    /* FP context inactive for swapped-in thread:
     * - reset FPSCR to 0
     * - set EXC_RETURN.F_Type (prevents FP frame un-stacking when returning
     *   from pendSV)
     */
    movs.n r3, #0
    1abe:	2300      	movs	r3, #0
    vmsr fpscr, r3
    1ac0:	eee1 3a10 	vmsr	fpscr, r3
    b in_fp_endif
    1ac4:	e003      	b.n	1ace <in_fp_endif>

00001ac6 <in_fp_active>:
    /* FP context active:
     * - clear EXC_RETURN.F_Type
     * - FPSCR and caller-saved registers will be restored automatically
     * - restore callee-saved FP registers
     */
    add r0, r2, #_thread_offset_to_preempt_float
    1ac6:	f102 007c 	add.w	r0, r2, #124	; 0x7c
    vldmia r0, {s16-s31}
    1aca:	ec90 8a10 	vldmia	r0, {s16-s31}

00001ace <in_fp_endif>:
in_fp_endif:
    /* Clear CONTROL.FPCA that may have been set by FP instructions */
    mrs r3, CONTROL
    1ace:	f3ef 8314 	mrs	r3, CONTROL
    bic r3, #_CONTROL_FPCA_Msk
    1ad2:	f023 0304 	bic.w	r3, r3, #4
    msr CONTROL, r3
    1ad6:	f383 8814 	msr	CONTROL, r3
    isb
    1ada:	f3bf 8f6f 	isb	sy
#endif

#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
    /* Re-program dynamic memory map */
    push {r2,lr}
    1ade:	b504      	push	{r2, lr}
    mov r0, r2 /* _current thread */
    1ae0:	4610      	mov	r0, r2
    bl z_arm_configure_dynamic_mpu_regions
    1ae2:	f000 fadf 	bl	20a4 <z_arm_configure_dynamic_mpu_regions>
    pop {r2,lr}
    1ae6:	e8bd 4004 	ldmia.w	sp!, {r2, lr}
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    1aea:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
    1aee:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
    1af2:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
    1af6:	4770      	bx	lr
    ldr r1, =_kernel
    1af8:	20000d70 	.word	0x20000d70
    ldr v4, =_SCS_ICSR
    1afc:	e000ed04 	.word	0xe000ed04

00001b00 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
    1b00:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    1b04:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    1b06:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    1b0a:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    1b0e:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
    1b10:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
    1b14:	2902      	cmp	r1, #2
    beq _oops
    1b16:	d0ff      	beq.n	1b18 <_oops>

00001b18 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
    1b18:	b501      	push	{r0, lr}
    push {r1, r2}
    push {r4-r11}
    mov  r1, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    bl z_do_kernel_oops
    1b1a:	f005 faa8 	bl	706e <z_do_kernel_oops>
     * the MSP to its value prior to entering the function
     */
    add sp, #40
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    pop {r0, pc}
    1b1e:	bd01      	pop	{r0, pc}

00001b20 <arch_new_thread>:
		thread->stack_info.start += MPU_GUARD_ALIGN_AND_SIZE;
		thread->stack_info.size -= MPU_GUARD_ALIGN_AND_SIZE;
	}
#endif /* CONFIG_USERSPACE */
#if FP_GUARD_EXTRA_SIZE > 0
	if ((thread->base.user_options & K_FP_REGS) != 0) {
    1b20:	7b01      	ldrb	r1, [r0, #12]
    1b22:	0789      	lsls	r1, r1, #30
    1b24:	d505      	bpl.n	1b32 <arch_new_thread+0x12>
		/* Larger guard needed due to lazy stacking of FP regs may
		 * overshoot the guard area without writing anything. We
		 * carve it out of the stack buffer as-needed instead of
		 * unconditionally reserving it.
		 */
		thread->stack_info.start += FP_GUARD_EXTRA_SIZE;
    1b26:	6e41      	ldr	r1, [r0, #100]	; 0x64
    1b28:	3140      	adds	r1, #64	; 0x40
    1b2a:	6641      	str	r1, [r0, #100]	; 0x64
		thread->stack_info.size -= FP_GUARD_EXTRA_SIZE;
    1b2c:	6e81      	ldr	r1, [r0, #104]	; 0x68
    1b2e:	3940      	subs	r1, #64	; 0x40
    1b30:	6681      	str	r1, [r0, #104]	; 0x68

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
    1b32:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
    1b36:	9b00      	ldr	r3, [sp, #0]
    1b38:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->pc &= 0xfffffffe;
    1b3c:	490f      	ldr	r1, [pc, #60]	; (1b7c <arch_new_thread+0x5c>)
	iframe->a3 = (uint32_t)p2;
    1b3e:	9b01      	ldr	r3, [sp, #4]
    1b40:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
    1b44:	9b02      	ldr	r3, [sp, #8]
    1b46:	f842 3c14 	str.w	r3, [r2, #-20]
	iframe->pc &= 0xfffffffe;
    1b4a:	f021 0101 	bic.w	r1, r1, #1

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
    1b4e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    1b52:	f842 3c04 	str.w	r3, [r2, #-4]
	iframe->pc &= 0xfffffffe;
    1b56:	f842 1c08 	str.w	r1, [r2, #-8]
		((uintptr_t)iframe - sizeof(struct __fpu_sf));
	memset(iframe, 0, sizeof(struct __fpu_sf));
#endif

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
    1b5a:	2300      	movs	r3, #0
    1b5c:	6743      	str	r3, [r0, #116]	; 0x74
	thread->arch.mode = 0;
#if defined(CONFIG_ARM_STORE_EXC_RETURN)
	thread->arch.mode_exc_return = DEFAULT_EXC_RETURN;
#endif
#if FP_GUARD_EXTRA_SIZE > 0
	if ((thread->base.user_options & K_FP_REGS) != 0) {
    1b5e:	7b03      	ldrb	r3, [r0, #12]
		thread->arch.mode |= Z_ARM_MODE_MPU_GUARD_FLOAT_Msk;
    1b60:	f013 0f02 	tst.w	r3, #2
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
    1b64:	f1a2 0220 	sub.w	r2, r2, #32
		thread->arch.mode |= Z_ARM_MODE_MPU_GUARD_FLOAT_Msk;
    1b68:	f64f 5308 	movw	r3, #64776	; 0xfd08
    1b6c:	bf08      	it	eq
    1b6e:	f44f 437d 	moveq.w	r3, #64768	; 0xfd00
	thread->callee_saved.psp = (uint32_t)iframe;
    1b72:	6502      	str	r2, [r0, #80]	; 0x50
	if ((thread->base.user_options & K_FP_REGS) != 0) {
    1b74:	f8c0 30bc 	str.w	r3, [r0, #188]	; 0xbc
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
    1b78:	4770      	bx	lr
    1b7a:	bf00      	nop
    1b7c:	00006c6f 	.word	0x00006c6f

00001b80 <z_arm_mpu_stack_guard_and_fpu_adjust>:
 * policy and the stack_info values for the thread that is
 * being switched in.
 */
uint32_t z_arm_mpu_stack_guard_and_fpu_adjust(struct k_thread *thread)
{
	if (((thread->base.user_options & K_FP_REGS) != 0) ||
    1b80:	7b03      	ldrb	r3, [r0, #12]
    1b82:	f013 0f02 	tst.w	r3, #2
    1b86:	4b19      	ldr	r3, [pc, #100]	; (1bec <z_arm_mpu_stack_guard_and_fpu_adjust+0x6c>)
    1b88:	d103      	bne.n	1b92 <z_arm_mpu_stack_guard_and_fpu_adjust+0x12>
    1b8a:	f890 20bd 	ldrb.w	r2, [r0, #189]	; 0xbd
    1b8e:	06d2      	lsls	r2, r2, #27
    1b90:	d417      	bmi.n	1bc2 <z_arm_mpu_stack_guard_and_fpu_adjust+0x42>
		 * The thread is not pre-tagged with K_FP_REGS, but it has
		 * generated an FP context. Activate lazy stacking and
		 * program a large MPU guard to detect privilege thread
		 * stack overflows.
		 */
		FPU->FPCCR |= FPU_FPCCR_LSPEN_Msk;
    1b92:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    1b94:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
    1b98:	635a      	str	r2, [r3, #52]	; 0x34
		if ((thread->arch.mode &
    1b9a:	f8d0 30bc 	ldr.w	r3, [r0, #188]	; 0xbc
    1b9e:	0719      	lsls	r1, r3, #28
    1ba0:	d409      	bmi.n	1bb6 <z_arm_mpu_stack_guard_and_fpu_adjust+0x36>
			thread->arch.mode |= Z_ARM_MODE_MPU_GUARD_FLOAT_Msk;
    1ba2:	f043 0308 	orr.w	r3, r3, #8
    1ba6:	f8c0 30bc 	str.w	r3, [r0, #188]	; 0xbc
				thread->stack_info.start +=
    1baa:	6e43      	ldr	r3, [r0, #100]	; 0x64
    1bac:	3340      	adds	r3, #64	; 0x40
    1bae:	6643      	str	r3, [r0, #100]	; 0x64
				thread->stack_info.size -=
    1bb0:	6e83      	ldr	r3, [r0, #104]	; 0x68
    1bb2:	3b40      	subs	r3, #64	; 0x40
    1bb4:	6683      	str	r3, [r0, #104]	; 0x68

		z_arm_thread_stack_info_adjust(thread, true);

		/* Tag the thread with K_FP_REGS */
		thread->base.user_options |= K_FP_REGS;
    1bb6:	7b03      	ldrb	r3, [r0, #12]
    1bb8:	f043 0302 	orr.w	r3, r3, #2
    1bbc:	7303      	strb	r3, [r0, #12]

		return MPU_GUARD_ALIGN_AND_SIZE_FLOAT;
    1bbe:	2080      	movs	r0, #128	; 0x80
    1bc0:	4770      	bx	lr
	/* Thread is not pre-tagged with K_FP_REGS, and it has
	 * not been using the FPU. Since there is no active FPU
	 * context, de-activate lazy stacking and program the
	 * default MPU guard size.
	 */
	FPU->FPCCR &= (~FPU_FPCCR_LSPEN_Msk);
    1bc2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    1bc4:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
    1bc8:	635a      	str	r2, [r3, #52]	; 0x34
		if ((thread->arch.mode &
    1bca:	f8d0 30bc 	ldr.w	r3, [r0, #188]	; 0xbc
    1bce:	071a      	lsls	r2, r3, #28
    1bd0:	d401      	bmi.n	1bd6 <z_arm_mpu_stack_guard_and_fpu_adjust+0x56>

	z_arm_thread_stack_info_adjust(thread, false);

	return MPU_GUARD_ALIGN_AND_SIZE;
    1bd2:	2040      	movs	r0, #64	; 0x40
}
    1bd4:	4770      	bx	lr
			thread->arch.mode &= ~Z_ARM_MODE_MPU_GUARD_FLOAT_Msk;
    1bd6:	f023 0308 	bic.w	r3, r3, #8
    1bda:	f8c0 30bc 	str.w	r3, [r0, #188]	; 0xbc
				thread->stack_info.start -=
    1bde:	6e43      	ldr	r3, [r0, #100]	; 0x64
    1be0:	3b40      	subs	r3, #64	; 0x40
    1be2:	6643      	str	r3, [r0, #100]	; 0x64
				thread->stack_info.size +=
    1be4:	6e83      	ldr	r3, [r0, #104]	; 0x68
    1be6:	3340      	adds	r3, #64	; 0x40
    1be8:	6683      	str	r3, [r0, #104]	; 0x68
    1bea:	e7f2      	b.n	1bd2 <z_arm_mpu_stack_guard_and_fpu_adjust+0x52>
    1bec:	e000ef00 	.word	0xe000ef00

00001bf0 <z_check_thread_stack_fail>:
 *         thread stack corruption, otherwise return 0.
 */
uint32_t z_check_thread_stack_fail(const uint32_t fault_addr, const uint32_t psp)
{
#if defined(CONFIG_MULTITHREADING)
	const struct k_thread *thread = _current;
    1bf0:	4a0c      	ldr	r2, [pc, #48]	; (1c24 <z_check_thread_stack_fail+0x34>)
{
    1bf2:	4603      	mov	r3, r0
	const struct k_thread *thread = _current;
    1bf4:	6890      	ldr	r0, [r2, #8]

	if (thread == NULL) {
    1bf6:	b1a0      	cbz	r0, 1c22 <z_check_thread_stack_fail+0x32>
#endif

#if (defined(CONFIG_FPU) && defined(CONFIG_FPU_SHARING)) && \
	defined(CONFIG_MPU_STACK_GUARD)
	uint32_t guard_len =
		((_current->arch.mode & Z_ARM_MODE_MPU_GUARD_FLOAT_Msk) != 0) ?
    1bf8:	f8d0 20bc 	ldr.w	r2, [r0, #188]	; 0xbc
			return thread->stack_info.start;
		}
	}
#else /* CONFIG_USERSPACE */
#if defined(CONFIG_MULTITHREADING)
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
    1bfc:	6e40      	ldr	r0, [r0, #100]	; 0x64
		MPU_GUARD_ALIGN_AND_SIZE_FLOAT : MPU_GUARD_ALIGN_AND_SIZE;
    1bfe:	f012 0f08 	tst.w	r2, #8
    1c02:	bf0c      	ite	eq
    1c04:	2240      	moveq	r2, #64	; 0x40
    1c06:	2280      	movne	r2, #128	; 0x80
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
    1c08:	f113 0f16 	cmn.w	r3, #22
    1c0c:	d004      	beq.n	1c18 <z_check_thread_stack_fail+0x28>
    1c0e:	1a82      	subs	r2, r0, r2
    1c10:	429a      	cmp	r2, r3
    1c12:	d805      	bhi.n	1c20 <z_check_thread_stack_fail+0x30>
    1c14:	4283      	cmp	r3, r0
    1c16:	d203      	bcs.n	1c20 <z_check_thread_stack_fail+0x30>
		return 0;
    1c18:	4281      	cmp	r1, r0
    1c1a:	bf28      	it	cs
    1c1c:	2000      	movcs	r0, #0
    1c1e:	4770      	bx	lr
    1c20:	2000      	movs	r0, #0
	}
#endif
#endif /* CONFIG_USERSPACE */

	return 0;
}
    1c22:	4770      	bx	lr
    1c24:	20000d70 	.word	0x20000d70

00001c28 <arch_switch_to_main_thread>:
#endif /* CONFIG_FPU */
}

void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
    1c28:	b508      	push	{r3, lr}
    1c2a:	4614      	mov	r4, r2
    1c2c:	460d      	mov	r5, r1
    1c2e:	2200      	movs	r2, #0
    1c30:	eee1 2a10 	vmsr	fpscr, r2
  __ASM volatile ("MRS %0, control" : "=r" (result) );
    1c34:	f3ef 8214 	mrs	r2, CONTROL
	__set_CONTROL(__get_CONTROL() & (~(CONTROL_FPCA_Msk)));
    1c38:	f022 0204 	bic.w	r2, r2, #4
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
    1c3c:	f382 8814 	msr	CONTROL, r2
  __ASM volatile ("isb 0xF":::"memory");
    1c40:	f3bf 8f6f 	isb	sy
    1c44:	f3bf 8f6f 	isb	sy
	z_arm_prepare_switch_to_main();

	_current = main_thread;
    1c48:	4a08      	ldr	r2, [pc, #32]	; (1c6c <arch_switch_to_main_thread+0x44>)
    1c4a:	6090      	str	r0, [r2, #8]
#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
	/*
	 * If stack protection is enabled, make sure to set it
	 * before jumping to thread entry function
	 */
	z_arm_configure_dynamic_mpu_regions(main_thread);
    1c4c:	f000 fa2a 	bl	20a4 <z_arm_configure_dynamic_mpu_regions>

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
    1c50:	4620      	mov	r0, r4
    1c52:	f385 8809 	msr	PSP, r5
    1c56:	2100      	movs	r1, #0
    1c58:	b663      	cpsie	if
    1c5a:	f381 8811 	msr	BASEPRI, r1
    1c5e:	f3bf 8f6f 	isb	sy
    1c62:	2200      	movs	r2, #0
    1c64:	2300      	movs	r3, #0
    1c66:	f005 f802 	bl	6c6e <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
    1c6a:	bf00      	nop
    1c6c:	20000d70 	.word	0x20000d70

00001c70 <_isr_wrapper>:
 *
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
    1c70:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
    1c72:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    1c74:	4a0b      	ldr	r2, [pc, #44]	; (1ca4 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
    1c76:	6990      	ldr	r0, [r2, #24]
	cmp r0, #0
    1c78:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
    1c7a:	bf1e      	ittt	ne
	movne	r1, #0
    1c7c:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
    1c7e:	6191      	strne	r1, [r2, #24]
		blne	z_pm_save_idle_exit
    1c80:	f006 f9d1 	blne	8026 <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
    1c84:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
    1c86:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    1c8a:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    1c8e:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
    1c92:	4905      	ldr	r1, [pc, #20]	; (1ca8 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    1c94:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    1c96:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
    1c98:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
    1c9a:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
    1c9e:	4903      	ldr	r1, [pc, #12]	; (1cac <_isr_wrapper+0x3c>)
	bx r1
    1ca0:	4708      	bx	r1
    1ca2:	0000      	.short	0x0000
	ldr r2, =_kernel
    1ca4:	20000d70 	.word	0x20000d70
	ldr r1, =_sw_isr_table
    1ca8:	0000849c 	.word	0x0000849c
	ldr r1, =z_arm_int_exit
    1cac:	00001cb1 	.word	0x00001cb1

00001cb0 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
    1cb0:	4b04      	ldr	r3, [pc, #16]	; (1cc4 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
    1cb2:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
    1cb4:	69d8      	ldr	r0, [r3, #28]
	cmp r0, r1
    1cb6:	4288      	cmp	r0, r1
	beq _EXIT_EXC
    1cb8:	d003      	beq.n	1cc2 <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
    1cba:	4903      	ldr	r1, [pc, #12]	; (1cc8 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
    1cbc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
    1cc0:	600a      	str	r2, [r1, #0]

00001cc2 <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
    1cc2:	4770      	bx	lr
	ldr r3, =_kernel
    1cc4:	20000d70 	.word	0x20000d70
	ldr r1, =_SCS_ICSR
    1cc8:	e000ed04 	.word	0xe000ed04

00001ccc <mem_manage_fault>:
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
			      bool *recoverable)
{
    1ccc:	b570      	push	{r4, r5, r6, lr}
	uint32_t reason = K_ERR_ARM_MEM_GENERIC;
	uint32_t mmfar = -EINVAL;

	PR_FAULT_INFO("***** MPU FAULT *****");

	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    1cce:	4b26      	ldr	r3, [pc, #152]	; (1d68 <mem_manage_fault+0x9c>)
{
    1cd0:	4615      	mov	r5, r2
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    1cd2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	uint32_t reason = K_ERR_ARM_MEM_GENERIC;
    1cd4:	f012 0f10 	tst.w	r2, #16
		reason = K_ERR_ARM_MEM_STACKING;
		PR_FAULT_INFO("  Stacking error (context area might be"
			" not valid)");
	}
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
    1cd8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	uint32_t reason = K_ERR_ARM_MEM_GENERIC;
    1cda:	bf14      	ite	ne
    1cdc:	2411      	movne	r4, #17
    1cde:	2410      	moveq	r4, #16
		reason = K_ERR_ARM_MEM_UNSTACKING;
    1ce0:	f012 0f08 	tst.w	r2, #8
		PR_FAULT_INFO("  Unstacking error");
	}
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    1ce4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_MEM_UNSTACKING;
    1ce6:	bf18      	it	ne
    1ce8:	2412      	movne	r4, #18
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    1cea:	0792      	lsls	r2, r2, #30
{
    1cec:	4606      	mov	r6, r0
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    1cee:	d50a      	bpl.n	1d06 <mem_manage_fault+0x3a>
		 * The MMFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another higher
		 * priority exception might change the MMFAR value.
		 */
		uint32_t temp = SCB->MMFAR;
    1cf0:	6b58      	ldr	r0, [r3, #52]	; 0x34

		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    1cf2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1cf4:	0614      	lsls	r4, r2, #24
    1cf6:	d534      	bpl.n	1d62 <mem_manage_fault+0x96>
			mmfar = temp;
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
			if (from_hard_fault != 0) {
    1cf8:	b119      	cbz	r1, 1d02 <mem_manage_fault+0x36>
				/* clear SCB_MMAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    1cfa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1cfc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    1d00:	629a      	str	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_MEM_DATA_ACCESS;
    1d02:	2413      	movs	r4, #19
    1d04:	e001      	b.n	1d0a <mem_manage_fault+0x3e>
	uint32_t mmfar = -EINVAL;
    1d06:	f06f 0015 	mvn.w	r0, #21
			}
		}
	}
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
    1d0a:	4b17      	ldr	r3, [pc, #92]	; (1d68 <mem_manage_fault+0x9c>)
    1d0c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_MEM_INSTRUCTION_ACCESS;
    1d0e:	f012 0f01 	tst.w	r2, #1
		PR_FAULT_INFO("  Instruction Access Violation");
	}
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    1d12:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_MEM_INSTRUCTION_ACCESS;
    1d14:	bf18      	it	ne
    1d16:	2414      	movne	r4, #20
		reason = K_ERR_ARM_MEM_FP_LAZY_STATE_PRESERVATION;
    1d18:	f012 0f20 	tst.w	r2, #32
	 * crossed into an area beyond the thread stack.]
	 *
	 * Data Access Violation errors may or may not be caused by
	 * thread stack overflows.
	 */
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    1d1c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_MEM_FP_LAZY_STATE_PRESERVATION;
    1d1e:	bf18      	it	ne
    1d20:	2415      	movne	r4, #21
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    1d22:	06d2      	lsls	r2, r2, #27
    1d24:	d402      	bmi.n	1d2c <mem_manage_fault+0x60>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
    1d26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    1d28:	079b      	lsls	r3, r3, #30
    1d2a:	d50a      	bpl.n	1d42 <mem_manage_fault+0x76>
		 * not accompanied by a data access violation error (i.e.
		 * when stack overflows due to the exception entry frame
		 * stacking): z_check_thread_stack_fail() shall be able to
		 * handle the case of 'mmfar' holding the -EINVAL value.
		 */
		if (SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) {
    1d2c:	4b0e      	ldr	r3, [pc, #56]	; (1d68 <mem_manage_fault+0x9c>)
    1d2e:	685b      	ldr	r3, [r3, #4]
    1d30:	0519      	lsls	r1, r3, #20
    1d32:	d506      	bpl.n	1d42 <mem_manage_fault+0x76>
			uint32_t min_stack_ptr = z_check_thread_stack_fail(mmfar,
    1d34:	4631      	mov	r1, r6
    1d36:	f7ff ff5b 	bl	1bf0 <z_check_thread_stack_fail>
				((uint32_t) &esf[0]));

			if (min_stack_ptr) {
    1d3a:	b110      	cbz	r0, 1d42 <mem_manage_fault+0x76>
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
    1d3c:	f380 8809 	msr	PSP, r0
				 * fatal error and a thread that corrupted its
				 * stack needs to be aborted.
				 */
				__set_PSP(min_stack_ptr);

				reason = K_ERR_STACK_CHK_FAIL;
    1d40:	2402      	movs	r4, #2
	 * lazy stacking Memory Manage fault. At the time of writing, this
	 * can happen when printing.  If that's true, we should clear the
	 * pending flag in addition to the clearing the reason for the fault
	 */
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    1d42:	4b09      	ldr	r3, [pc, #36]	; (1d68 <mem_manage_fault+0x9c>)
    1d44:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1d46:	0692      	lsls	r2, r2, #26
		SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTPENDED_Msk;
    1d48:	bf42      	ittt	mi
    1d4a:	6a5a      	ldrmi	r2, [r3, #36]	; 0x24
    1d4c:	f422 5200 	bicmi.w	r2, r2, #8192	; 0x2000
    1d50:	625a      	strmi	r2, [r3, #36]	; 0x24
	}
#endif /* CONFIG_ARMV7_M_ARMV8_M_FP */

	/* clear MMFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    1d52:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1d54:	f042 02ff 	orr.w	r2, r2, #255	; 0xff
    1d58:	629a      	str	r2, [r3, #40]	; 0x28

	/* Assess whether system shall ignore/recover from this MPU fault. */
	*recoverable = memory_fault_recoverable(esf, true);
    1d5a:	2300      	movs	r3, #0
    1d5c:	702b      	strb	r3, [r5, #0]

	return reason;
}
    1d5e:	4620      	mov	r0, r4
    1d60:	bd70      	pop	{r4, r5, r6, pc}
	uint32_t mmfar = -EINVAL;
    1d62:	f06f 0015 	mvn.w	r0, #21
    1d66:	e7cc      	b.n	1d02 <mem_manage_fault+0x36>
    1d68:	e000ed00 	.word	0xe000ed00

00001d6c <usage_fault.constprop.0>:
	uint32_t reason = K_ERR_ARM_USAGE_GENERIC;

	PR_FAULT_INFO("***** USAGE FAULT *****");

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    1d6c:	4b13      	ldr	r3, [pc, #76]	; (1dbc <usage_fault.constprop.0+0x50>)
    1d6e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	uint32_t reason = K_ERR_ARM_USAGE_GENERIC;
    1d70:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
		reason = K_ERR_ARM_USAGE_DIV_0;
		PR_FAULT_INFO("  Division by zero");
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    1d74:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	uint32_t reason = K_ERR_ARM_USAGE_GENERIC;
    1d76:	bf14      	ite	ne
    1d78:	201e      	movne	r0, #30
    1d7a:	201d      	moveq	r0, #29
		reason = K_ERR_ARM_USAGE_UNALIGNED_ACCESS;
    1d7c:	f012 7f80 	tst.w	r2, #16777216	; 0x1000000
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    1d80:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_USAGE_UNALIGNED_ACCESS;
    1d82:	bf18      	it	ne
    1d84:	201f      	movne	r0, #31
		reason = K_ERR_ARM_USAGE_NO_COPROCESSOR;
    1d86:	f412 2f00 	tst.w	r2, #524288	; 0x80000
		PR_FAULT_INFO("  No coprocessor instructions");
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    1d8a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_USAGE_NO_COPROCESSOR;
    1d8c:	bf18      	it	ne
    1d8e:	2021      	movne	r0, #33	; 0x21
		reason = K_ERR_ARM_USAGE_ILLEGAL_EXC_RETURN;
    1d90:	f412 2f80 	tst.w	r2, #262144	; 0x40000
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    1d94:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_USAGE_ILLEGAL_EXC_RETURN;
    1d96:	bf18      	it	ne
    1d98:	2022      	movne	r0, #34	; 0x22
		reason = K_ERR_ARM_USAGE_ILLEGAL_EPSR;
    1d9a:	f412 3f00 	tst.w	r2, #131072	; 0x20000
		PR_FAULT_INFO("  Illegal use of the EPSR");
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    1d9e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_USAGE_ILLEGAL_EPSR;
    1da0:	bf18      	it	ne
    1da2:	2023      	movne	r0, #35	; 0x23
		reason = K_ERR_ARM_USAGE_UNDEFINED_INSTRUCTION;
    1da4:	f412 3f80 	tst.w	r2, #65536	; 0x10000
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    1da8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1daa:	ea6f 4202 	mvn.w	r2, r2, lsl #16
    1dae:	ea6f 4212 	mvn.w	r2, r2, lsr #16
    1db2:	629a      	str	r2, [r3, #40]	; 0x28

	return reason;
}
    1db4:	bf18      	it	ne
    1db6:	2024      	movne	r0, #36	; 0x24
    1db8:	4770      	bx	lr
    1dba:	bf00      	nop
    1dbc:	e000ed00 	.word	0xe000ed00

00001dc0 <bus_fault.constprop.0>:
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    1dc0:	b510      	push	{r4, lr}
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    1dc2:	4b19      	ldr	r3, [pc, #100]	; (1e28 <bus_fault.constprop.0+0x68>)
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    1dc4:	4602      	mov	r2, r0
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    1dc6:	6a98      	ldr	r0, [r3, #40]	; 0x28
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    1dc8:	6a9c      	ldr	r4, [r3, #40]	; 0x28
	uint32_t reason = K_ERR_ARM_BUS_GENERIC;
    1dca:	f410 5f80 	tst.w	r0, #4096	; 0x1000
    1dce:	bf14      	ite	ne
    1dd0:	2017      	movne	r0, #23
    1dd2:	2016      	moveq	r0, #22
		reason = K_ERR_ARM_BUS_UNSTACKING;
    1dd4:	f414 6f00 	tst.w	r4, #2048	; 0x800
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    1dd8:	6a9c      	ldr	r4, [r3, #40]	; 0x28
		reason = K_ERR_ARM_BUS_UNSTACKING;
    1dda:	bf18      	it	ne
    1ddc:	2018      	movne	r0, #24
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    1dde:	05a4      	lsls	r4, r4, #22
    1de0:	d509      	bpl.n	1df6 <bus_fault.constprop.0+0x36>
		STORE_xFAR(bfar, SCB->BFAR);
    1de2:	6b98      	ldr	r0, [r3, #56]	; 0x38
		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    1de4:	6a98      	ldr	r0, [r3, #40]	; 0x28
    1de6:	0400      	lsls	r0, r0, #16
    1de8:	d504      	bpl.n	1df4 <bus_fault.constprop.0+0x34>
			if (from_hard_fault != 0) {
    1dea:	b11a      	cbz	r2, 1df4 <bus_fault.constprop.0+0x34>
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    1dec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1dee:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
    1df2:	629a      	str	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_BUS_PRECISE_DATA_BUS;
    1df4:	2019      	movs	r0, #25
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    1df6:	4b0c      	ldr	r3, [pc, #48]	; (1e28 <bus_fault.constprop.0+0x68>)
    1df8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_BUS_IMPRECISE_DATA_BUS;
    1dfa:	f412 6f80 	tst.w	r2, #1024	; 0x400
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    1dfe:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_BUS_IMPRECISE_DATA_BUS;
    1e00:	bf18      	it	ne
    1e02:	201a      	movne	r0, #26
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    1e04:	05d2      	lsls	r2, r2, #23
    1e06:	d40c      	bmi.n	1e22 <bus_fault.constprop.0+0x62>
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    1e08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
		reason = K_ERR_ARM_BUS_FP_LAZY_STATE_PRESERVATION;
    1e0a:	f413 5f00 	tst.w	r3, #8192	; 0x2000
    1e0e:	bf18      	it	ne
    1e10:	201c      	movne	r0, #28
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    1e12:	4a05      	ldr	r2, [pc, #20]	; (1e28 <bus_fault.constprop.0+0x68>)
    1e14:	6a93      	ldr	r3, [r2, #40]	; 0x28
    1e16:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
    1e1a:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    1e1c:	2300      	movs	r3, #0
    1e1e:	700b      	strb	r3, [r1, #0]
}
    1e20:	bd10      	pop	{r4, pc}
		reason = K_ERR_ARM_BUS_INSTRUCTION_BUS;
    1e22:	201b      	movs	r0, #27
    1e24:	e7f5      	b.n	1e12 <bus_fault.constprop.0+0x52>
    1e26:	bf00      	nop
    1e28:	e000ed00 	.word	0xe000ed00

00001e2c <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
    1e2c:	b570      	push	{r4, r5, r6, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    1e2e:	4b45      	ldr	r3, [pc, #276]	; (1f44 <z_arm_fault+0x118>)
    1e30:	685b      	ldr	r3, [r3, #4]
{
    1e32:	b09c      	sub	sp, #112	; 0x70
    1e34:	4605      	mov	r5, r0
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    1e36:	f3c3 0308 	ubfx	r3, r3, #0, #9
    1e3a:	2600      	movs	r6, #0
    1e3c:	f386 8811 	msr	BASEPRI, r6
    1e40:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
    1e44:	f002 407f 	and.w	r0, r2, #4278190080	; 0xff000000
    1e48:	f1b0 4f7f 	cmp.w	r0, #4278190080	; 0xff000000
    1e4c:	d111      	bne.n	1e72 <z_arm_fault+0x46>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
    1e4e:	f002 000c 	and.w	r0, r2, #12
    1e52:	2808      	cmp	r0, #8
    1e54:	d00d      	beq.n	1e72 <z_arm_fault+0x46>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    1e56:	0710      	lsls	r0, r2, #28
			ptr_esf =  (z_arch_esf_t *)psp;
    1e58:	bf4c      	ite	mi
    1e5a:	460d      	movmi	r5, r1
			*nested_exc = true;
    1e5c:	2601      	movpl	r6, #1
	*recoverable = false;
    1e5e:	2200      	movs	r2, #0
	switch (fault) {
    1e60:	3b03      	subs	r3, #3
	*recoverable = false;
    1e62:	f88d 2007 	strb.w	r2, [sp, #7]
	switch (fault) {
    1e66:	2b03      	cmp	r3, #3
    1e68:	d805      	bhi.n	1e76 <z_arm_fault+0x4a>
    1e6a:	e8df f003 	tbb	[pc, r3]
    1e6e:	5d1e      	.short	0x5d1e
    1e70:	5a61      	.short	0x5a61
		return NULL;
    1e72:	4635      	mov	r5, r6
    1e74:	e7f3      	b.n	1e5e <z_arm_fault+0x32>
    1e76:	2400      	movs	r4, #0
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
    1e78:	f89d 3007 	ldrb.w	r3, [sp, #7]
    1e7c:	b99b      	cbnz	r3, 1ea6 <z_arm_fault+0x7a>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
    1e7e:	2268      	movs	r2, #104	; 0x68
    1e80:	4629      	mov	r1, r5
    1e82:	a802      	add	r0, sp, #8
    1e84:	f005 f91c 	bl	70c0 <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
    1e88:	9b09      	ldr	r3, [sp, #36]	; 0x24
    1e8a:	2e00      	cmp	r6, #0
    1e8c:	d054      	beq.n	1f38 <z_arm_fault+0x10c>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
    1e8e:	f3c3 0208 	ubfx	r2, r3, #0, #9
    1e92:	b922      	cbnz	r2, 1e9e <z_arm_fault+0x72>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
    1e94:	ea6f 2353 	mvn.w	r3, r3, lsr #9
    1e98:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    1e9c:	9309      	str	r3, [sp, #36]	; 0x24

	if (IS_ENABLED(CONFIG_SIMPLIFIED_EXCEPTION_CODES) && (reason >= K_ERR_ARCH_START)) {
		reason = K_ERR_CPU_EXCEPTION;
	}

	z_arm_fatal_error(reason, &esf_copy);
    1e9e:	a902      	add	r1, sp, #8
    1ea0:	4620      	mov	r0, r4
    1ea2:	f005 f8e2 	bl	706a <z_arm_fatal_error>
}
    1ea6:	b01c      	add	sp, #112	; 0x70
    1ea8:	bd70      	pop	{r4, r5, r6, pc}
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    1eaa:	4b26      	ldr	r3, [pc, #152]	; (1f44 <z_arm_fault+0x118>)
    1eac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    1eae:	0791      	lsls	r1, r2, #30
    1eb0:	d4e1      	bmi.n	1e76 <z_arm_fault+0x4a>
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
    1eb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    1eb4:	2a00      	cmp	r2, #0
    1eb6:	dbde      	blt.n	1e76 <z_arm_fault+0x4a>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
    1eb8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    1eba:	0052      	lsls	r2, r2, #1
    1ebc:	d5db      	bpl.n	1e76 <z_arm_fault+0x4a>
	SCB->CCR |= SCB_CCR_BFHFNMIGN_Msk;
    1ebe:	695a      	ldr	r2, [r3, #20]
	uint16_t *ret_addr = (uint16_t *)esf->basic.pc;
    1ec0:	69a9      	ldr	r1, [r5, #24]
	SCB->CCR |= SCB_CCR_BFHFNMIGN_Msk;
    1ec2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
    1ec6:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
    1ec8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1ecc:	f3bf 8f6f 	isb	sy
	SCB->CCR &= ~SCB_CCR_BFHFNMIGN_Msk;
    1ed0:	695a      	ldr	r2, [r3, #20]
	uint16_t fault_insn = *(ret_addr - 1);
    1ed2:	f831 1c02 	ldrh.w	r1, [r1, #-2]
	SCB->CCR &= ~SCB_CCR_BFHFNMIGN_Msk;
    1ed6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
    1eda:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
    1edc:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1ee0:	f3bf 8f6f 	isb	sy
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
    1ee4:	f64d 7202 	movw	r2, #57090	; 0xdf02
    1ee8:	4291      	cmp	r1, r2
    1eea:	d00a      	beq.n	1f02 <z_arm_fault+0xd6>
		} else if ((SCB->CFSR & SCB_CFSR_MEMFAULTSR_Msk) != 0) {
    1eec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1eee:	b2d2      	uxtb	r2, r2
    1ef0:	b14a      	cbz	r2, 1f06 <z_arm_fault+0xda>
			reason = mem_manage_fault(esf, 1, recoverable);
    1ef2:	f10d 0207 	add.w	r2, sp, #7
    1ef6:	2101      	movs	r1, #1
		reason = mem_manage_fault(esf, 0, recoverable);
    1ef8:	4628      	mov	r0, r5
    1efa:	f7ff fee7 	bl	1ccc <mem_manage_fault>
		reason = usage_fault(esf);
    1efe:	4604      	mov	r4, r0
		break;
    1f00:	e7ba      	b.n	1e78 <z_arm_fault+0x4c>
			reason = esf->basic.r0;
    1f02:	682c      	ldr	r4, [r5, #0]
    1f04:	e7b8      	b.n	1e78 <z_arm_fault+0x4c>
		} else if ((SCB->CFSR & SCB_CFSR_BUSFAULTSR_Msk) != 0) {
    1f06:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1f08:	f412 4f7f 	tst.w	r2, #65280	; 0xff00
    1f0c:	d005      	beq.n	1f1a <z_arm_fault+0xee>
			reason = bus_fault(esf, 1, recoverable);
    1f0e:	f10d 0107 	add.w	r1, sp, #7
    1f12:	2001      	movs	r0, #1
		reason = bus_fault(esf, 0, recoverable);
    1f14:	f7ff ff54 	bl	1dc0 <bus_fault.constprop.0>
    1f18:	e7f1      	b.n	1efe <z_arm_fault+0xd2>
		} else if ((SCB->CFSR & SCB_CFSR_USGFAULTSR_Msk) != 0) {
    1f1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    1f1c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
    1f20:	d3a9      	bcc.n	1e76 <z_arm_fault+0x4a>
		reason = usage_fault(esf);
    1f22:	f7ff ff23 	bl	1d6c <usage_fault.constprop.0>
    1f26:	e7ea      	b.n	1efe <z_arm_fault+0xd2>
		reason = mem_manage_fault(esf, 0, recoverable);
    1f28:	f10d 0207 	add.w	r2, sp, #7
    1f2c:	2100      	movs	r1, #0
    1f2e:	e7e3      	b.n	1ef8 <z_arm_fault+0xcc>
		reason = bus_fault(esf, 0, recoverable);
    1f30:	f10d 0107 	add.w	r1, sp, #7
    1f34:	2000      	movs	r0, #0
    1f36:	e7ed      	b.n	1f14 <z_arm_fault+0xe8>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    1f38:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
    1f3c:	f023 0301 	bic.w	r3, r3, #1
    1f40:	e7ac      	b.n	1e9c <z_arm_fault+0x70>
    1f42:	bf00      	nop
    1f44:	e000ed00 	.word	0xe000ed00

00001f48 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    1f48:	4a02      	ldr	r2, [pc, #8]	; (1f54 <z_arm_fault_init+0xc>)
    1f4a:	6953      	ldr	r3, [r2, #20]
    1f4c:	f043 0310 	orr.w	r3, r3, #16
    1f50:	6153      	str	r3, [r2, #20]
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
#ifdef CONFIG_TRAP_UNALIGNED_ACCESS
	SCB->CCR |= SCB_CCR_UNALIGN_TRP_Msk;
#endif /* CONFIG_TRAP_UNALIGNED_ACCESS */
}
    1f52:	4770      	bx	lr
    1f54:	e000ed00 	.word	0xe000ed00

00001f58 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
    1f58:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
    1f5c:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
    1f60:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
    1f62:	4672      	mov	r2, lr
	bl z_arm_fault
    1f64:	f7ff ff62 	bl	1e2c <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
    1f68:	bd01      	pop	{r0, pc}
    1f6a:	bf00      	nop

00001f6c <z_arm_interrupt_init>:
    1f6c:	4804      	ldr	r0, [pc, #16]	; (1f80 <z_arm_interrupt_init+0x14>)
 *
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
    1f6e:	2300      	movs	r3, #0
    1f70:	2120      	movs	r1, #32
    1f72:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    1f74:	3301      	adds	r3, #1
    1f76:	2b30      	cmp	r3, #48	; 0x30
    1f78:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
    1f7c:	d1f9      	bne.n	1f72 <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
    1f7e:	4770      	bx	lr
    1f80:	e000e100 	.word	0xe000e100

00001f84 <__start>:
    strb r0, [r1]
#endif /* CONFIG_DEBUG_THREAD_INFO */

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
    /* Reset CONTROL register */
    movs.n r0, #0
    1f84:	2000      	movs	r0, #0
    msr CONTROL, r0
    1f86:	f380 8814 	msr	CONTROL, r0
    isb
    1f8a:	f3bf 8f6f 	isb	sy
#if defined(CONFIG_PM_S2RAM)
    bl arch_pm_s2ram_resume
#endif /* CONFIG_PM_S2RAM */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_arm_platform_init
    1f8e:	f7ff fa95 	bl	14bc <z_arm_platform_init>
#endif

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
#if defined(CONFIG_CPU_HAS_ARM_MPU)
    /* Disable MPU */
    movs.n r0, #0
    1f92:	2000      	movs	r0, #0
    ldr r1, =_SCS_MPU_CTRL
    1f94:	490d      	ldr	r1, [pc, #52]	; (1fcc <__start+0x48>)
    str r0, [r1]
    1f96:	6008      	str	r0, [r1, #0]
    dsb
    1f98:	f3bf 8f4f 	dsb	sy
#endif /* CONFIG_CPU_HAS_ARM_MPU */
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    1f9c:	480c      	ldr	r0, [pc, #48]	; (1fd0 <__start+0x4c>)
    msr msp, r0
    1f9e:	f380 8808 	msr	MSP, r0

    /* Initialize core architecture registers and system blocks */
    bl z_arm_init_arch_hw_at_boot
    1fa2:	f000 f82b 	bl	1ffc <z_arm_init_arch_hw_at_boot>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    1fa6:	2020      	movs	r0, #32
    msr BASEPRI, r0
    1fa8:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
    1fac:	4809      	ldr	r0, [pc, #36]	; (1fd4 <__start+0x50>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
    1fae:	f44f 6104 	mov.w	r1, #2112	; 0x840
    adds r0, r0, r1
    1fb2:	1840      	adds	r0, r0, r1
    msr PSP, r0
    1fb4:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
    1fb8:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
    1fbc:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
    1fbe:	4308      	orrs	r0, r1
    msr CONTROL, r0
    1fc0:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
    1fc4:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
    1fc8:	f7ff fd0a 	bl	19e0 <z_arm_prep_c>
    ldr r1, =_SCS_MPU_CTRL
    1fcc:	e000ed94 	.word	0xe000ed94
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    1fd0:	20002200 	.word	0x20002200
    ldr r0, =z_interrupt_stacks
    1fd4:	20001400 	.word	0x20001400

00001fd8 <z_arm_clear_arm_mpu_config>:
void z_arm_clear_arm_mpu_config(void)
{
	int i;

	int num_regions =
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);
    1fd8:	4907      	ldr	r1, [pc, #28]	; (1ff8 <z_arm_clear_arm_mpu_config+0x20>)
    1fda:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90

	for (i = 0; i < num_regions; i++) {
    1fde:	2300      	movs	r3, #0
	int num_regions =
    1fe0:	f3c2 2207 	ubfx	r2, r2, #8, #8
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegion(uint32_t rnr)
{
  MPU->RNR = rnr;
  MPU->RASR = 0U;
    1fe4:	4618      	mov	r0, r3
	for (i = 0; i < num_regions; i++) {
    1fe6:	4293      	cmp	r3, r2
    1fe8:	db00      	blt.n	1fec <z_arm_clear_arm_mpu_config+0x14>
		ARM_MPU_ClrRegion(i);
	}
}
    1fea:	4770      	bx	lr
  MPU->RNR = rnr;
    1fec:	f8c1 3098 	str.w	r3, [r1, #152]	; 0x98
  MPU->RASR = 0U;
    1ff0:	f8c1 00a0 	str.w	r0, [r1, #160]	; 0xa0
	for (i = 0; i < num_regions; i++) {
    1ff4:	3301      	adds	r3, #1
    1ff6:	e7f6      	b.n	1fe6 <z_arm_clear_arm_mpu_config+0xe>
    1ff8:	e000ed00 	.word	0xe000ed00

00001ffc <z_arm_init_arch_hw_at_boot>:
 * This routine resets Cortex-M system control block
 * components and core registers.
 *
 */
void z_arm_init_arch_hw_at_boot(void)
{
    1ffc:	b508      	push	{r3, lr}
  __ASM volatile ("cpsid i" : : : "memory");
    1ffe:	b672      	cpsid	i
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
    2000:	2300      	movs	r3, #0
    2002:	f383 8813 	msr	FAULTMASK, r3

	/* Initialize System Control Block components */

#if defined(CONFIG_CPU_HAS_ARM_MPU) || defined(CONFIG_CPU_HAS_NXP_MPU)
	/* Clear MPU region configuration */
	z_arm_clear_arm_mpu_config();
    2006:	f7ff ffe7 	bl	1fd8 <z_arm_clear_arm_mpu_config>
#endif /* CONFIG_CPU_HAS_ARM_MPU */

	/* Disable NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
		NVIC->ICER[i] = 0xFFFFFFFF;
    200a:	4b14      	ldr	r3, [pc, #80]	; (205c <z_arm_init_arch_hw_at_boot+0x60>)
    200c:	f04f 32ff 	mov.w	r2, #4294967295
    2010:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    2014:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    2018:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    201c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    2020:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    2024:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    2028:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    202c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
	}
	/* Clear pending NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
		NVIC->ICPR[i] = 0xFFFFFFFF;
    2030:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    2034:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
    2038:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
    203c:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
    2040:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
    2044:	f8c3 2194 	str.w	r2, [r3, #404]	; 0x194
    2048:	f8c3 2198 	str.w	r2, [r3, #408]	; 0x198
    204c:	f8c3 219c 	str.w	r2, [r3, #412]	; 0x19c
  __ASM volatile ("cpsie i" : : : "memory");
    2050:	b662      	cpsie	i
  __ASM volatile ("dsb 0xF":::"memory");
    2052:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    2056:	f3bf 8f6f 	isb	sy
	/* Restore Interrupts */
	__enable_irq();

	__DSB();
	__ISB();
}
    205a:	bd08      	pop	{r3, pc}
    205c:	e000e100 	.word	0xe000e100

00002060 <z_impl_k_thread_abort>:
#include <zephyr/wait_q.h>
#include <zephyr/sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
	if (_current == thread) {
    2060:	4b08      	ldr	r3, [pc, #32]	; (2084 <z_impl_k_thread_abort+0x24>)
    2062:	689b      	ldr	r3, [r3, #8]
    2064:	4283      	cmp	r3, r0
    2066:	d10b      	bne.n	2080 <z_impl_k_thread_abort+0x20>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    2068:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
    206c:	b143      	cbz	r3, 2080 <z_impl_k_thread_abort+0x20>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    206e:	4b06      	ldr	r3, [pc, #24]	; (2088 <z_impl_k_thread_abort+0x28>)
    2070:	685a      	ldr	r2, [r3, #4]
    2072:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
    2076:	605a      	str	r2, [r3, #4]
			/* Clear any system calls that may be pending
			 * as they have a higher priority than the PendSV
			 * handler and will check the stack of the thread
			 * being aborted.
			 */
			SCB->SHCSR &= ~SCB_SHCSR_SVCALLPENDED_Msk;
    2078:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    207a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
    207e:	625a      	str	r2, [r3, #36]	; 0x24
		}
	}

	z_thread_abort(thread);
    2080:	f004 b954 	b.w	632c <z_thread_abort>
    2084:	20000d70 	.word	0x20000d70
    2088:	e000ed00 	.word	0xe000ed00

0000208c <z_arm_configure_static_mpu_regions>:
	 * into account the unused SRAM area, as well.
	 */
#ifdef CONFIG_AARCH32_ARMV8_R
	arm_core_mpu_disable();
#endif
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    208c:	4b02      	ldr	r3, [pc, #8]	; (2098 <z_arm_configure_static_mpu_regions+0xc>)
    208e:	4a03      	ldr	r2, [pc, #12]	; (209c <z_arm_configure_static_mpu_regions+0x10>)
    2090:	4803      	ldr	r0, [pc, #12]	; (20a0 <z_arm_configure_static_mpu_regions+0x14>)
    2092:	2101      	movs	r1, #1
    2094:	f000 b876 	b.w	2184 <arm_core_mpu_configure_static_mpu_regions>
    2098:	20040000 	.word	0x20040000
    209c:	20000000 	.word	0x20000000
    20a0:	00008764 	.word	0x00008764

000020a4 <z_arm_configure_dynamic_mpu_regions>:
 *
 * This function is not inherently thread-safe, but the memory domain
 * spinlock needs to be held anyway.
 */
void z_arm_configure_dynamic_mpu_regions(struct k_thread *thread)
{
    20a4:	b510      	push	{r4, lr}
    20a6:	4604      	mov	r4, r0
	/* Privileged stack guard */
	uintptr_t guard_start;
	size_t guard_size = MPU_GUARD_ALIGN_AND_SIZE;

#if defined(CONFIG_FPU) && defined(CONFIG_FPU_SHARING)
	guard_size = z_arm_mpu_stack_guard_and_fpu_adjust(thread);
    20a8:	f7ff fd6a 	bl	1b80 <z_arm_mpu_stack_guard_and_fpu_adjust>
#endif /* CONFIG_USERSPACE */
	{
		/* A supervisor thread only has the normal thread stack to
		 * protect with a stack guard.
		 */
		guard_start = thread->stack_info.start - guard_size;
    20ac:	6e62      	ldr	r2, [r4, #100]	; 0x64
	guard_size = z_arm_mpu_stack_guard_and_fpu_adjust(thread);
    20ae:	4603      	mov	r3, r0
	}

	__ASSERT(region_num < _MAX_DYNAMIC_MPU_REGIONS_NUM,
		"Out-of-bounds error for dynamic region map.");

	dynamic_regions[region_num].start = guard_start;
    20b0:	4805      	ldr	r0, [pc, #20]	; (20c8 <z_arm_configure_dynamic_mpu_regions+0x24>)
		guard_start = thread->stack_info.start - guard_size;
    20b2:	1ad2      	subs	r2, r2, r3
	dynamic_regions[region_num].size = guard_size;
    20b4:	e9c0 2300 	strd	r2, r3, [r0]
	dynamic_regions[region_num].attr = K_MEM_PARTITION_P_RO_U_NA;
    20b8:	4b04      	ldr	r3, [pc, #16]	; (20cc <z_arm_configure_dynamic_mpu_regions+0x28>)
    20ba:	6083      	str	r3, [r0, #8]
	arm_core_mpu_configure_dynamic_mpu_regions(dynamic_regions,
						   region_num);
#ifdef CONFIG_AARCH32_ARMV8_R
	arm_core_mpu_enable();
#endif
}
    20bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	arm_core_mpu_configure_dynamic_mpu_regions(dynamic_regions,
    20c0:	2101      	movs	r1, #1
    20c2:	f000 b869 	b.w	2198 <arm_core_mpu_configure_dynamic_mpu_regions>
    20c6:	bf00      	nop
    20c8:	20000b10 	.word	0x20000b10
    20cc:	150b0000 	.word	0x150b0000

000020d0 <mpu_configure_regions>:
 * sanity check of the memory regions to be programmed.
 */
static int mpu_configure_regions(const struct z_arm_mpu_partition
	regions[], uint8_t regions_num, uint8_t start_reg_index,
	bool do_sanity_check)
{
    20d0:	b5f0      	push	{r4, r5, r6, r7, lr}
#endif /* CPU_CORTEX_M0PLUS | CPU_CORTEX_M3 | CPU_CORTEX_M4 */
}

static inline void set_region_number(uint32_t index)
{
	MPU->RNR = index;
    20d2:	4e20      	ldr	r6, [pc, #128]	; (2154 <mpu_configure_regions+0x84>)
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
    20d4:	2500      	movs	r5, #0
    20d6:	428d      	cmp	r5, r1
    20d8:	da39      	bge.n	214e <mpu_configure_regions+0x7e>
		if (regions[i].size == 0U) {
    20da:	6844      	ldr	r4, [r0, #4]
    20dc:	b374      	cbz	r4, 213c <mpu_configure_regions+0x6c>
			continue;
		}
		/* Non-empty region. */

		if (do_sanity_check &&
    20de:	b153      	cbz	r3, 20f6 <mpu_configure_regions+0x26>
	 * and greater or equal to the minimum
	 * MPU region size. Start address of the
	 * partition must align with size.
	 */
	int partition_is_valid =
		((part->size & (part->size - 1U)) == 0U)
    20e0:	f104 3cff 	add.w	ip, r4, #4294967295
		&&
		(part->size >= CONFIG_ARM_MPU_REGION_MIN_ALIGN_AND_SIZE)
		&&
    20e4:	ea14 0f0c 	tst.w	r4, ip
    20e8:	d12f      	bne.n	214a <mpu_configure_regions+0x7a>
		&&
    20ea:	2c1f      	cmp	r4, #31
    20ec:	d92d      	bls.n	214a <mpu_configure_regions+0x7a>
		((part->start & (part->size - 1U)) == 0U);
    20ee:	6807      	ldr	r7, [r0, #0]
		&&
    20f0:	ea1c 0f07 	tst.w	ip, r7
    20f4:	d129      	bne.n	214a <mpu_configure_regions+0x7a>
 * to that power-of-two value.
 */
static inline uint32_t size_to_mpu_rasr_size(uint32_t size)
{
	/* The minimal supported region size is 32 bytes */
	if (size <= 32U) {
    20f6:	2c20      	cmp	r4, #32
	region_conf.base = new_region->start;
    20f8:	6807      	ldr	r7, [r0, #0]
#if defined(CONFIG_CPU_AARCH32_CORTEX_R)
	(void) size;

	p_attr->rasr = attr->rasr_attr;
#else
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
    20fa:	f8d0 c008 	ldr.w	ip, [r0, #8]
				(!mpu_partition_is_valid(&regions[i]))) {
			LOG_ERR("Partition %u: sanity check failed.", i);
			return -EINVAL;
		}

		reg_index = mpu_configure_region(reg_index, &regions[i]);
    20fe:	fa5f fe82 	uxtb.w	lr, r2
	if (size <= 32U) {
    2102:	d91e      	bls.n	2142 <mpu_configure_regions+0x72>
	if (size > (1UL << 31)) {
    2104:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
    2108:	d81d      	bhi.n	2146 <mpu_configure_regions+0x76>
	return ((32 - __builtin_clz(size - 1U) - 2 + 1) << MPU_RASR_SIZE_Pos) &
    210a:	3c01      	subs	r4, #1
    210c:	fab4 f484 	clz	r4, r4
    2110:	f1c4 041f 	rsb	r4, r4, #31
    2114:	0064      	lsls	r4, r4, #1
	if (index > (get_num_regions() - 1U)) {
    2116:	f1be 0f07 	cmp.w	lr, #7
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
    211a:	ea4c 0c04 	orr.w	ip, ip, r4
    211e:	d814      	bhi.n	214a <mpu_configure_regions+0x7a>
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    2120:	f027 041f 	bic.w	r4, r7, #31
				| MPU_RBAR_VALID_Msk | index;
    2124:	4314      	orrs	r4, r2
    2126:	f044 0410 	orr.w	r4, r4, #16
    212a:	f8c6 2098 	str.w	r2, [r6, #152]	; 0x98
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    212e:	f8c6 409c 	str.w	r4, [r6, #156]	; 0x9c
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    2132:	f04c 0401 	orr.w	r4, ip, #1
    2136:	f8c6 40a0 	str.w	r4, [r6, #160]	; 0xa0
		if (reg_index == -EINVAL) {
			return reg_index;
		}

		/* Increment number of programmed MPU indices. */
		reg_index++;
    213a:	3201      	adds	r2, #1
	for (i = 0; i < regions_num; i++) {
    213c:	3501      	adds	r5, #1
    213e:	300c      	adds	r0, #12
    2140:	e7c9      	b.n	20d6 <mpu_configure_regions+0x6>
		return REGION_32B;
    2142:	2408      	movs	r4, #8
    2144:	e7e7      	b.n	2116 <mpu_configure_regions+0x46>
		return REGION_4G;
    2146:	243e      	movs	r4, #62	; 0x3e
    2148:	e7e5      	b.n	2116 <mpu_configure_regions+0x46>
			return -EINVAL;
    214a:	f06f 0215 	mvn.w	r2, #21
	}

	return reg_index;
}
    214e:	4610      	mov	r0, r2
    2150:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2152:	bf00      	nop
    2154:	e000ed00 	.word	0xe000ed00

00002158 <arm_core_mpu_enable>:
	 * background region for privileged software access if desired.
	 */
#if defined(CONFIG_MPU_DISABLE_BACKGROUND_MAP)
	MPU->CTRL = MPU_CTRL_ENABLE_Msk;
#else
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
    2158:	4b04      	ldr	r3, [pc, #16]	; (216c <arm_core_mpu_enable+0x14>)
    215a:	2205      	movs	r2, #5
    215c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  __ASM volatile ("dsb 0xF":::"memory");
    2160:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    2164:	f3bf 8f6f 	isb	sy
#endif

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
    2168:	4770      	bx	lr
    216a:	bf00      	nop
    216c:	e000ed00 	.word	0xe000ed00

00002170 <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
    2170:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
    2174:	4b02      	ldr	r3, [pc, #8]	; (2180 <arm_core_mpu_disable+0x10>)
    2176:	2200      	movs	r2, #0
    2178:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
    217c:	4770      	bx	lr
    217e:	bf00      	nop
    2180:	e000ed00 	.word	0xe000ed00

00002184 <arm_core_mpu_configure_static_mpu_regions>:
 * @brief configure fixed (static) MPU regions.
 */
void arm_core_mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	*static_regions, const uint8_t regions_num,
	const uint32_t background_area_start, const uint32_t background_area_end)
{
    2184:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
    2186:	4c03      	ldr	r4, [pc, #12]	; (2194 <arm_core_mpu_configure_static_mpu_regions+0x10>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
    2188:	2301      	movs	r3, #1
    218a:	7822      	ldrb	r2, [r4, #0]
    218c:	f7ff ffa0 	bl	20d0 <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
    2190:	7020      	strb	r0, [r4, #0]
					       background_area_start, background_area_end) == -EINVAL) {

		__ASSERT(0, "Configuring %u static MPU regions failed\n",
			regions_num);
	}
}
    2192:	bd10      	pop	{r4, pc}
    2194:	20000f8c 	.word	0x20000f8c

00002198 <arm_core_mpu_configure_dynamic_mpu_regions>:
/**
 * @brief configure dynamic MPU regions.
 */
void arm_core_mpu_configure_dynamic_mpu_regions(const struct z_arm_mpu_partition
	*dynamic_regions, uint8_t regions_num)
{
    2198:	b508      	push	{r3, lr}

	/* In ARMv7-M architecture the dynamic regions are
	 * programmed on top of existing SRAM region configuration.
	 */

	mpu_reg_index = mpu_configure_regions(dynamic_regions,
    219a:	4a09      	ldr	r2, [pc, #36]	; (21c0 <arm_core_mpu_configure_dynamic_mpu_regions+0x28>)
    219c:	2300      	movs	r3, #0
    219e:	7812      	ldrb	r2, [r2, #0]
    21a0:	f7ff ff96 	bl	20d0 <mpu_configure_regions>
		regions_num, mpu_reg_index, false);

	if (mpu_reg_index != -EINVAL) {
    21a4:	f110 0f16 	cmn.w	r0, #22
    21a8:	d002      	beq.n	21b0 <arm_core_mpu_configure_dynamic_mpu_regions+0x18>
  MPU->RNR = rnr;
    21aa:	4a06      	ldr	r2, [pc, #24]	; (21c4 <arm_core_mpu_configure_dynamic_mpu_regions+0x2c>)

		/* Disable the non-programmed MPU regions. */
		for (int i = mpu_reg_index; i < get_num_regions(); i++) {
    21ac:	2807      	cmp	r0, #7
    21ae:	dd00      	ble.n	21b2 <arm_core_mpu_configure_dynamic_mpu_regions+0x1a>
		== -EINVAL) {

		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
			regions_num);
	}
}
    21b0:	bd08      	pop	{r3, pc}
    21b2:	f8c2 0098 	str.w	r0, [r2, #152]	; 0x98
  MPU->RASR = 0U;
    21b6:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
    21ba:	3001      	adds	r0, #1
    21bc:	e7f6      	b.n	21ac <arm_core_mpu_configure_dynamic_mpu_regions+0x14>
    21be:	bf00      	nop
    21c0:	20000f8c 	.word	0x20000f8c
    21c4:	e000ed00 	.word	0xe000ed00

000021c8 <z_arm_mpu_init>:
 */
int z_arm_mpu_init(void)
{
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
    21c8:	4914      	ldr	r1, [pc, #80]	; (221c <z_arm_mpu_init+0x54>)
    21ca:	6808      	ldr	r0, [r1, #0]
    21cc:	2808      	cmp	r0, #8
{
    21ce:	b510      	push	{r4, lr}
	if (mpu_config.num_regions > get_num_regions()) {
    21d0:	d821      	bhi.n	2216 <z_arm_mpu_init+0x4e>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
    21d2:	f7ff ffcd 	bl	2170 <arm_core_mpu_disable>
    21d6:	4c12      	ldr	r4, [pc, #72]	; (2220 <z_arm_mpu_init+0x58>)
    21d8:	6849      	ldr	r1, [r1, #4]

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    21da:	2200      	movs	r2, #0
    21dc:	4290      	cmp	r0, r2
    21de:	f101 010c 	add.w	r1, r1, #12
    21e2:	d105      	bne.n	21f0 <z_arm_mpu_init+0x28>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
    21e4:	4b0f      	ldr	r3, [pc, #60]	; (2224 <z_arm_mpu_init+0x5c>)
    21e6:	7018      	strb	r0, [r3, #0]


	arm_core_mpu_enable();
    21e8:	f7ff ffb6 	bl	2158 <arm_core_mpu_enable>
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
    21ec:	2000      	movs	r0, #0
}
    21ee:	bd10      	pop	{r4, pc}
    21f0:	f8c4 2098 	str.w	r2, [r4, #152]	; 0x98
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    21f4:	f851 3c0c 	ldr.w	r3, [r1, #-12]
    21f8:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
    21fc:	4313      	orrs	r3, r2
    21fe:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    2202:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    2206:	f851 3c04 	ldr.w	r3, [r1, #-4]
    220a:	f043 0301 	orr.w	r3, r3, #1
    220e:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    2212:	3201      	adds	r2, #1
    2214:	e7e2      	b.n	21dc <z_arm_mpu_init+0x14>
		return -1;
    2216:	f04f 30ff 	mov.w	r0, #4294967295
    221a:	e7e8      	b.n	21ee <z_arm_mpu_init+0x26>
    221c:	00008770 	.word	0x00008770
    2220:	e000ed00 	.word	0xe000ed00
    2224:	20000f8c 	.word	0x20000f8c

00002228 <__stdout_hook_install>:

static int (*_stdout_hook)(int c) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int c))
{
	_stdout_hook = hook;
    2228:	4b01      	ldr	r3, [pc, #4]	; (2230 <__stdout_hook_install+0x8>)
    222a:	6018      	str	r0, [r3, #0]
}
    222c:	4770      	bx	lr
    222e:	bf00      	nop
    2230:	200000c0 	.word	0x200000c0

00002234 <nordicsemi_nrf52_init>:
	nrf_power_gpregret_set(NRF_POWER, (uint8_t)type);
	NVIC_SystemReset();
}

static int nordicsemi_nrf52_init(void)
{
    2234:	b510      	push	{r4, lr}
	__asm__ volatile(
    2236:	f04f 0320 	mov.w	r3, #32
    223a:	f3ef 8011 	mrs	r0, BASEPRI
    223e:	f383 8812 	msr	BASEPRI_MAX, r3
    2242:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
    2246:	4a11      	ldr	r2, [pc, #68]	; (228c <nordicsemi_nrf52_init+0x58>)
    2248:	2301      	movs	r3, #1
    224a:	f8c2 3540 	str.w	r3, [r2, #1344]	; 0x540
#endif

#if NRF_POWER_HAS_DCDCEN
NRF_STATIC_INLINE void nrf_power_dcdcen_set(NRF_POWER_Type * p_reg, bool enable)
{
    p_reg->DCDCEN = (enable ? POWER_DCDCEN_DCDCEN_Enabled : POWER_DCDCEN_DCDCEN_Disabled) <<
    224e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
{
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    2252:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
    2256:	f8c2 3578 	str.w	r3, [r2, #1400]	; 0x578
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
    225a:	f8d1 4130 	ldr.w	r4, [r1, #304]	; 0x130
    225e:	2c08      	cmp	r4, #8
    2260:	d108      	bne.n	2274 <nordicsemi_nrf52_init+0x40>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    2262:	f8d1 1134 	ldr.w	r1, [r1, #308]	; 0x134
            {
                switch(var2)
    2266:	2905      	cmp	r1, #5
    2268:	d804      	bhi.n	2274 <nordicsemi_nrf52_init+0x40>
#endif // defined(POWER_RAM_POWER_S0POWER_Msk)

#if NRF_POWER_HAS_DCDCEN_VDDH
NRF_STATIC_INLINE void nrf_power_dcdcen_vddh_set(NRF_POWER_Type * p_reg, bool enable)
{
    if (enable && nrf52_errata_197())
    226a:	4c09      	ldr	r4, [pc, #36]	; (2290 <nordicsemi_nrf52_init+0x5c>)
    226c:	5c61      	ldrb	r1, [r4, r1]
    226e:	b109      	cbz	r1, 2274 <nordicsemi_nrf52_init+0x40>
    {
        // Workaround for anomaly 197 "POWER: DCDC of REG0 not functional".
        *(volatile uint32_t *)0x40000638ul = 1ul;
    2270:	f8c2 3638 	str.w	r3, [r2, #1592]	; 0x638
    }
    p_reg->DCDCEN0 = (enable ? POWER_DCDCEN0_DCDCEN_Enabled : POWER_DCDCEN0_DCDCEN_Disabled) <<
    2274:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2278:	2201      	movs	r2, #1
    227a:	f8c3 2580 	str.w	r2, [r3, #1408]	; 0x580
	__asm__ volatile(
    227e:	f380 8811 	msr	BASEPRI, r0
    2282:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
    2286:	2000      	movs	r0, #0
    2288:	bd10      	pop	{r4, pc}
    228a:	bf00      	nop
    228c:	4001e000 	.word	0x4001e000
    2290:	00008b19 	.word	0x00008b19

00002294 <sys_arch_reboot>:
    *p_gpregret = val;
    2294:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2298:	b2c0      	uxtb	r0, r0
    229a:	f8c3 051c 	str.w	r0, [r3, #1308]	; 0x51c
  __ASM volatile ("dsb 0xF":::"memory");
    229e:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    22a2:	4905      	ldr	r1, [pc, #20]	; (22b8 <sys_arch_reboot+0x24>)
    22a4:	4b05      	ldr	r3, [pc, #20]	; (22bc <sys_arch_reboot+0x28>)
    22a6:	68ca      	ldr	r2, [r1, #12]
    22a8:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    22ac:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    22ae:	60cb      	str	r3, [r1, #12]
    22b0:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    22b4:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    22b6:	e7fd      	b.n	22b4 <sys_arch_reboot+0x20>
    22b8:	e000ed00 	.word	0xe000ed00
    22bc:	05fa0004 	.word	0x05fa0004

000022c0 <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
    22c0:	b120      	cbz	r0, 22cc <arch_busy_wait+0xc>
    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
    22c2:	4b03      	ldr	r3, [pc, #12]	; (22d0 <arch_busy_wait+0x10>)
    22c4:	0180      	lsls	r0, r0, #6
    22c6:	f043 0301 	orr.w	r3, r3, #1
    22ca:	4718      	bx	r3

void arch_busy_wait(uint32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
    22cc:	4770      	bx	lr
    22ce:	bf00      	nop
    22d0:	00008730 	.word	0x00008730

000022d4 <adc_context_start_sampling>:
    return (p_reg->STATUS == (SAADC_STATUS_STATUS_Busy << SAADC_STATUS_STATUS_Pos));
}

NRF_STATIC_INLINE void nrf_saadc_enable(NRF_SAADC_Type * p_reg)
{
    p_reg->ENABLE = (SAADC_ENABLE_ENABLE_Enabled << SAADC_ENABLE_ENABLE_Pos);
    22d4:	4b05      	ldr	r3, [pc, #20]	; (22ec <adc_context_start_sampling+0x18>)
    22d6:	2201      	movs	r2, #1
    22d8:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500

static void adc_context_start_sampling(struct adc_context *ctx)
{
	nrf_saadc_enable(NRF_SAADC);

	if (ctx->sequence.calibrate) {
    22dc:	f890 1076 	ldrb.w	r1, [r0, #118]	; 0x76
    22e0:	b109      	cbz	r1, 22e6 <adc_context_start_sampling+0x12>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    22e2:	60da      	str	r2, [r3, #12]
}
    22e4:	4770      	bx	lr
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    22e6:	601a      	str	r2, [r3, #0]
    22e8:	605a      	str	r2, [r3, #4]
				       NRF_SAADC_TASK_CALIBRATEOFFSET);
	} else {
		nrf_saadc_task_trigger(NRF_SAADC, NRF_SAADC_TASK_START);
		nrf_saadc_task_trigger(NRF_SAADC, NRF_SAADC_TASK_SAMPLE);
	}
}
    22ea:	4770      	bx	lr
    22ec:	40007000 	.word	0x40007000

000022f0 <adc_nrfx_channel_setup>:
	uint8_t channel_id = channel_cfg->channel_id;
    22f0:	7908      	ldrb	r0, [r1, #4]
{
    22f2:	b570      	push	{r4, r5, r6, lr}
	uint8_t channel_id = channel_cfg->channel_id;
    22f4:	f000 041f 	and.w	r4, r0, #31
	if (channel_id >= SAADC_CH_NUM) {
    22f8:	2c07      	cmp	r4, #7
    22fa:	d820      	bhi.n	233e <adc_nrfx_channel_setup+0x4e>
	switch (channel_cfg->gain) {
    22fc:	780b      	ldrb	r3, [r1, #0]
    22fe:	2b0b      	cmp	r3, #11
    2300:	d81d      	bhi.n	233e <adc_nrfx_channel_setup+0x4e>
    2302:	e8df f003 	tbb	[pc, r3]
    2306:	0707      	.short	0x0707
    2308:	061c0707 	.word	0x061c0707
    230c:	211f1c1c 	.word	0x211f1c1c
    2310:	231c      	.short	0x231c
		config.gain = NRF_SAADC_GAIN1_2;
    2312:	2304      	movs	r3, #4
	switch (channel_cfg->reference) {
    2314:	784a      	ldrb	r2, [r1, #1]
    2316:	2a03      	cmp	r2, #3
    2318:	d01a      	beq.n	2350 <adc_nrfx_channel_setup+0x60>
    231a:	2a04      	cmp	r2, #4
    231c:	d10f      	bne.n	233e <adc_nrfx_channel_setup+0x4e>
	nrf_saadc_channel_config_t config = {
    231e:	2500      	movs	r5, #0
	switch (channel_cfg->acquisition_time) {
    2320:	884a      	ldrh	r2, [r1, #2]
    2322:	f244 060a 	movw	r6, #16394	; 0x400a
    2326:	42b2      	cmp	r2, r6
    2328:	d046      	beq.n	23b8 <adc_nrfx_channel_setup+0xc8>
    232a:	d813      	bhi.n	2354 <adc_nrfx_channel_setup+0x64>
    232c:	f244 0603 	movw	r6, #16387	; 0x4003
    2330:	42b2      	cmp	r2, r6
    2332:	d03d      	beq.n	23b0 <adc_nrfx_channel_setup+0xc0>
    2334:	f244 0605 	movw	r6, #16389	; 0x4005
    2338:	42b2      	cmp	r2, r6
    233a:	d03b      	beq.n	23b4 <adc_nrfx_channel_setup+0xc4>
    233c:	b3e2      	cbz	r2, 23b8 <adc_nrfx_channel_setup+0xc8>
    233e:	f06f 0015 	mvn.w	r0, #21
    2342:	e034      	b.n	23ae <adc_nrfx_channel_setup+0xbe>
		config.gain = NRF_SAADC_GAIN1;
    2344:	2305      	movs	r3, #5
		break;
    2346:	e7e5      	b.n	2314 <adc_nrfx_channel_setup+0x24>
		config.gain = NRF_SAADC_GAIN2;
    2348:	2306      	movs	r3, #6
		break;
    234a:	e7e3      	b.n	2314 <adc_nrfx_channel_setup+0x24>
		config.gain = NRF_SAADC_GAIN4;
    234c:	2307      	movs	r3, #7
		break;
    234e:	e7e1      	b.n	2314 <adc_nrfx_channel_setup+0x24>
	switch (channel_cfg->reference) {
    2350:	2501      	movs	r5, #1
    2352:	e7e5      	b.n	2320 <adc_nrfx_channel_setup+0x30>
	switch (channel_cfg->acquisition_time) {
    2354:	f244 0614 	movw	r6, #16404	; 0x4014
    2358:	42b2      	cmp	r2, r6
    235a:	d02f      	beq.n	23bc <adc_nrfx_channel_setup+0xcc>
    235c:	f244 0628 	movw	r6, #16424	; 0x4028
    2360:	42b2      	cmp	r2, r6
    2362:	d02d      	beq.n	23c0 <adc_nrfx_channel_setup+0xd0>
    2364:	f244 060f 	movw	r6, #16399	; 0x400f
    2368:	42b2      	cmp	r2, r6
    236a:	d1e8      	bne.n	233e <adc_nrfx_channel_setup+0x4e>
		config.acq_time = NRF_SAADC_ACQTIME_15US;
    236c:	2203      	movs	r2, #3
            ((config->resistor_p   << SAADC_CH_CONFIG_RESP_Pos)   & SAADC_CH_CONFIG_RESP_Msk)
            | ((config->resistor_n << SAADC_CH_CONFIG_RESN_Pos)   & SAADC_CH_CONFIG_RESN_Msk)
            | ((config->gain       << SAADC_CH_CONFIG_GAIN_Pos)   & SAADC_CH_CONFIG_GAIN_Msk)
            | ((config->reference  << SAADC_CH_CONFIG_REFSEL_Pos) & SAADC_CH_CONFIG_REFSEL_Msk)
            | ((config->acq_time   << SAADC_CH_CONFIG_TACQ_Pos)   & SAADC_CH_CONFIG_TACQ_Msk)
            | ((config->mode       << SAADC_CH_CONFIG_MODE_Pos)   & SAADC_CH_CONFIG_MODE_Msk)
    236e:	f3c0 1040 	ubfx	r0, r0, #5, #1
            | ((config->gain       << SAADC_CH_CONFIG_GAIN_Pos)   & SAADC_CH_CONFIG_GAIN_Msk)
    2372:	021b      	lsls	r3, r3, #8
            | ((config->mode       << SAADC_CH_CONFIG_MODE_Pos)   & SAADC_CH_CONFIG_MODE_Msk)
    2374:	ea43 5300 	orr.w	r3, r3, r0, lsl #20
    2378:	ea43 3305 	orr.w	r3, r3, r5, lsl #12
    237c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
    p_reg->CH[channel].CONFIG =
    2380:	0122      	lsls	r2, r4, #4
    2382:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    2386:	f502 42e0 	add.w	r2, r2, #28672	; 0x7000
    p_reg->CH[channel].PSELP = pselp;
    238a:	2000      	movs	r0, #0
    p_reg->CH[channel].CONFIG =
    238c:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
    p_reg->CH[channel].PSELN = pseln;
    2390:	0123      	lsls	r3, r4, #4
    2392:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    2396:	f503 43e0 	add.w	r3, r3, #28672	; 0x7000
    239a:	798a      	ldrb	r2, [r1, #6]
    239c:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
    p_reg->CH[channel].PSELP = pselp;
    23a0:	f8c3 0510 	str.w	r0, [r3, #1296]	; 0x510
	m_data.positive_inputs[channel_id] = channel_cfg->input_positive;
    23a4:	4b07      	ldr	r3, [pc, #28]	; (23c4 <adc_nrfx_channel_setup+0xd4>)
    23a6:	794a      	ldrb	r2, [r1, #5]
    23a8:	4423      	add	r3, r4
    23aa:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
}
    23ae:	bd70      	pop	{r4, r5, r6, pc}
	nrf_saadc_channel_config_t config = {
    23b0:	2200      	movs	r2, #0
    23b2:	e7dc      	b.n	236e <adc_nrfx_channel_setup+0x7e>
	switch (channel_cfg->acquisition_time) {
    23b4:	2201      	movs	r2, #1
    23b6:	e7da      	b.n	236e <adc_nrfx_channel_setup+0x7e>
		config.acq_time = NRF_SAADC_ACQTIME_10US;
    23b8:	2202      	movs	r2, #2
    23ba:	e7d8      	b.n	236e <adc_nrfx_channel_setup+0x7e>
		config.acq_time = NRF_SAADC_ACQTIME_20US;
    23bc:	2204      	movs	r2, #4
    23be:	e7d6      	b.n	236e <adc_nrfx_channel_setup+0x7e>
		config.acq_time = NRF_SAADC_ACQTIME_40US;
    23c0:	2205      	movs	r2, #5
    23c2:	e7d4      	b.n	236e <adc_nrfx_channel_setup+0x7e>
    23c4:	20000000 	.word	0x20000000

000023c8 <adc_nrfx_read>:
}

/* Implementation of the ADC driver API function: adc_read. */
static int adc_nrfx_read(const struct device *dev,
			 const struct adc_sequence *sequence)
{
    23c8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    23ca:	460c      	mov	r4, r1
	return z_impl_k_sem_take(sem, timeout);
    23cc:	f04f 33ff 	mov.w	r3, #4294967295
    23d0:	4855      	ldr	r0, [pc, #340]	; (2528 <adc_nrfx_read+0x160>)
    23d2:	f04f 32ff 	mov.w	r2, #4294967295
    23d6:	f003 fc49 	bl	5c6c <z_impl_k_sem_take>
	uint32_t selected_channels = sequence->channels;
    23da:	6866      	ldr	r6, [r4, #4]
	if (!selected_channels ||
    23dc:	1e73      	subs	r3, r6, #1
    23de:	2bfe      	cmp	r3, #254	; 0xfe
    23e0:	d83c      	bhi.n	245c <adc_nrfx_read+0x94>
    23e2:	2300      	movs	r3, #0
    p_reg->CH[channel].PSELP = pselp;
    23e4:	4851      	ldr	r0, [pc, #324]	; (252c <adc_nrfx_read+0x164>)
			if (m_data.positive_inputs[channel_id] == 0U) {
    23e6:	4f52      	ldr	r7, [pc, #328]	; (2530 <adc_nrfx_read+0x168>)
	active_channels = 0U;
    23e8:	461a      	mov	r2, r3
		if (selected_channels & BIT(channel_id)) {
    23ea:	fa26 f103 	lsr.w	r1, r6, r3
    23ee:	f011 0101 	ands.w	r1, r1, #1
    23f2:	d026      	beq.n	2442 <adc_nrfx_read+0x7a>
			if (m_data.positive_inputs[channel_id] == 0U) {
    23f4:	f817 c003 	ldrb.w	ip, [r7, r3]
    23f8:	f1bc 0f00 	cmp.w	ip, #0
    23fc:	d02e      	beq.n	245c <adc_nrfx_read+0x94>

NRF_STATIC_INLINE void nrf_saadc_burst_set(NRF_SAADC_Type *  p_reg,
                                           uint8_t           channel,
                                           nrf_saadc_burst_t burst)
{
    p_reg->CH[channel].CONFIG = (p_reg->CH[channel].CONFIG & ~SAADC_CH_CONFIG_BURST_Msk) |
    23fe:	eb00 1e03 	add.w	lr, r0, r3, lsl #4
			nrf_saadc_burst_set(NRF_SAADC, channel_id,
    2402:	7c65      	ldrb	r5, [r4, #17]
    2404:	f8de 1518 	ldr.w	r1, [lr, #1304]	; 0x518
    2408:	3d00      	subs	r5, #0
    240a:	bf18      	it	ne
    240c:	2501      	movne	r5, #1
    240e:	f021 7180 	bic.w	r1, r1, #16777216	; 0x1000000
    2412:	ea41 6105 	orr.w	r1, r1, r5, lsl #24
    2416:	f8ce 1518 	str.w	r1, [lr, #1304]	; 0x518
    p_reg->CH[channel].PSELP = pselp;
    241a:	f103 0151 	add.w	r1, r3, #81	; 0x51
    241e:	0109      	lsls	r1, r1, #4
			++active_channels;
    2420:	3201      	adds	r2, #1
    2422:	f840 c001 	str.w	ip, [r0, r1]
    2426:	b2d2      	uxtb	r2, r2
	} while (++channel_id < SAADC_CH_NUM);
    2428:	3301      	adds	r3, #1
    242a:	2b08      	cmp	r3, #8
    242c:	d1dd      	bne.n	23ea <adc_nrfx_read+0x22>
	switch (sequence->resolution) {
    242e:	7c23      	ldrb	r3, [r4, #16]
    2430:	3b08      	subs	r3, #8
    2432:	2b06      	cmp	r3, #6
    2434:	d812      	bhi.n	245c <adc_nrfx_read+0x94>
    2436:	e8df f003 	tbb	[pc, r3]
    243a:	1109      	.short	0x1109
    243c:	1119111d 	.word	0x1119111d
    2440:	1b          	.byte	0x1b
    2441:	00          	.byte	0x00
    2442:	f103 0551 	add.w	r5, r3, #81	; 0x51
    2446:	012d      	lsls	r5, r5, #4
    2448:	5141      	str	r1, [r0, r5]
}
    244a:	e7ed      	b.n	2428 <adc_nrfx_read+0x60>
		nrf_resolution = NRF_SAADC_RESOLUTION_8BIT;
    244c:	2300      	movs	r3, #0
    p_reg->RESOLUTION = resolution;
    244e:	4937      	ldr	r1, [pc, #220]	; (252c <adc_nrfx_read+0x164>)
	if ((active_channels > 1) && (sequence->oversampling > 0)) {
    2450:	2a01      	cmp	r2, #1
    2452:	f8c1 35f0 	str.w	r3, [r1, #1520]	; 0x5f0
	error = set_oversampling(sequence, active_channels);
    2456:	7c63      	ldrb	r3, [r4, #17]
	if ((active_channels > 1) && (sequence->oversampling > 0)) {
    2458:	d90e      	bls.n	2478 <adc_nrfx_read+0xb0>
    245a:	b17b      	cbz	r3, 247c <adc_nrfx_read+0xb4>
		return -EINVAL;
    245c:	f06f 0415 	mvn.w	r4, #21
	z_impl_k_sem_give(sem);
    2460:	4831      	ldr	r0, [pc, #196]	; (2528 <adc_nrfx_read+0x160>)
    2462:	f003 fbe3 	bl	5c2c <z_impl_k_sem_give>
	adc_context_lock(&m_data.ctx, false, NULL);
	error = start_read(dev, sequence);
	adc_context_release(&m_data.ctx, error);

	return error;
}
    2466:	4620      	mov	r0, r4
    2468:	b003      	add	sp, #12
    246a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrf_resolution = NRF_SAADC_RESOLUTION_12BIT;
    246c:	2302      	movs	r3, #2
		break;
    246e:	e7ee      	b.n	244e <adc_nrfx_read+0x86>
		nrf_resolution = NRF_SAADC_RESOLUTION_14BIT;
    2470:	2303      	movs	r3, #3
		break;
    2472:	e7ec      	b.n	244e <adc_nrfx_read+0x86>
	switch (sequence->resolution) {
    2474:	2301      	movs	r3, #1
    2476:	e7ea      	b.n	244e <adc_nrfx_read+0x86>
	switch (sequence->oversampling) {
    2478:	2b08      	cmp	r3, #8
    247a:	d8ef      	bhi.n	245c <adc_nrfx_read+0x94>
    p_reg->OVERSAMPLE = oversample;
    247c:	f8c1 35f4 	str.w	r3, [r1, #1524]	; 0x5f4
	if (sequence->options) {
    2480:	6821      	ldr	r1, [r4, #0]
	needed_buffer_size = active_channels * sizeof(nrf_saadc_value_t);
    2482:	0053      	lsls	r3, r2, #1
	if (sequence->options) {
    2484:	b111      	cbz	r1, 248c <adc_nrfx_read+0xc4>
		needed_buffer_size *= (1 + sequence->options->extra_samplings);
    2486:	8989      	ldrh	r1, [r1, #12]
    2488:	fb01 3303 	mla	r3, r1, r3, r3
	if (sequence->buffer_size < needed_buffer_size) {
    248c:	68e1      	ldr	r1, [r4, #12]
    248e:	4299      	cmp	r1, r3
    2490:	d347      	bcc.n	2522 <adc_nrfx_read+0x15a>
    p_reg->RESULT.PTR = (uint32_t)p_buffer;
    2492:	4b26      	ldr	r3, [pc, #152]	; (252c <adc_nrfx_read+0x164>)
    2494:	68a1      	ldr	r1, [r4, #8]
    2496:	f8c3 162c 	str.w	r1, [r3, #1580]	; 0x62c
}

static inline void adc_context_start_read(struct adc_context *ctx,
					  const struct adc_sequence *sequence)
{
	ctx->sequence = *sequence;
    249a:	4627      	mov	r7, r4
    p_reg->RESULT.MAXCNT = size;
    249c:	f8c3 2630 	str.w	r2, [r3, #1584]	; 0x630
    24a0:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
    24a2:	4d24      	ldr	r5, [pc, #144]	; (2534 <adc_nrfx_read+0x16c>)
    24a4:	f105 0664 	add.w	r6, r5, #100	; 0x64
    24a8:	c60f      	stmia	r6!, {r0, r1, r2, r3}
    24aa:	683b      	ldr	r3, [r7, #0]
    24ac:	6033      	str	r3, [r6, #0]
	ctx->status = 0;
    24ae:	2600      	movs	r6, #0
    24b0:	662e      	str	r6, [r5, #96]	; 0x60

	if (sequence->options) {
    24b2:	6823      	ldr	r3, [r4, #0]
    24b4:	462f      	mov	r7, r5
    24b6:	b383      	cbz	r3, 251a <adc_nrfx_read+0x152>
		ctx->options = *sequence->options;
    24b8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    24ba:	f105 0478 	add.w	r4, r5, #120	; 0x78
    24be:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		ctx->sequence.options = &ctx->options;
    24c2:	666c      	str	r4, [r5, #100]	; 0x64
		ctx->sampling_index = 0U;
    24c4:	f8a5 6088 	strh.w	r6, [r5, #136]	; 0x88

		if (ctx->options.interval_us != 0U) {
    24c8:	b338      	cbz	r0, 251a <adc_nrfx_read+0x152>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    24ca:	f3bf 8f5b 	dmb	ish
    24ce:	e857 3f00 	ldrex	r3, [r7]
    24d2:	e847 6200 	strex	r2, r6, [r7]
    24d6:	2a00      	cmp	r2, #0
    24d8:	d1f9      	bne.n	24ce <adc_nrfx_read+0x106>
    24da:	f3bf 8f5b 	dmb	ish
			/* Faster algorithm but source is first multiplied by target frequency
			 * and it can overflow even though final result would not overflow.
			 * Kconfig option shall prevent use of this algorithm when there is a
			 * risk of overflow.
			 */
			return ((t * to_hz + off) / from_hz);
    24de:	4916      	ldr	r1, [pc, #88]	; (2538 <adc_nrfx_read+0x170>)
    24e0:	6fac      	ldr	r4, [r5, #120]	; 0x78
    24e2:	4a16      	ldr	r2, [pc, #88]	; (253c <adc_nrfx_read+0x174>)
    24e4:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    24e8:	460f      	mov	r7, r1
    24ea:	4631      	mov	r1, r6
    24ec:	fbe4 7100 	umlal	r7, r1, r4, r0
    24f0:	2300      	movs	r3, #0
    24f2:	4638      	mov	r0, r7
    24f4:	f7fd fe04 	bl	100 <__aeabi_uldivmod>
	z_impl_k_timer_start(timer, duration, period);
    24f8:	2200      	movs	r2, #0
    24fa:	e9cd 0100 	strd	r0, r1, [sp]
    24fe:	2300      	movs	r3, #0
    2500:	f105 0008 	add.w	r0, r5, #8
    2504:	f004 f950 	bl	67a8 <z_impl_k_timer_start>
	return z_impl_k_sem_take(sem, timeout);
    2508:	480d      	ldr	r0, [pc, #52]	; (2540 <adc_nrfx_read+0x178>)
    250a:	f04f 32ff 	mov.w	r2, #4294967295
    250e:	f04f 33ff 	mov.w	r3, #4294967295
    2512:	f003 fbab 	bl	5c6c <z_impl_k_sem_take>
	return ctx->status;
    2516:	6e2c      	ldr	r4, [r5, #96]	; 0x60
	return error;
    2518:	e7a2      	b.n	2460 <adc_nrfx_read+0x98>
			adc_context_enable_timer(ctx);
			return;
		}
	}

	adc_context_start_sampling(ctx);
    251a:	4806      	ldr	r0, [pc, #24]	; (2534 <adc_nrfx_read+0x16c>)
    251c:	f7ff feda 	bl	22d4 <adc_context_start_sampling>
    2520:	e7f2      	b.n	2508 <adc_nrfx_read+0x140>
		return -ENOMEM;
    2522:	f06f 040b 	mvn.w	r4, #11
    2526:	e79b      	b.n	2460 <adc_nrfx_read+0x98>
    2528:	20000040 	.word	0x20000040
    252c:	40007000 	.word	0x40007000
    2530:	20000090 	.word	0x20000090
    2534:	20000000 	.word	0x20000000
    2538:	000f423f 	.word	0x000f423f
    253c:	000f4240 	.word	0x000f4240
    2540:	20000050 	.word	0x20000050

00002544 <init_saadc>:
		nrf_saadc_task_trigger(NRF_SAADC, NRF_SAADC_TASK_SAMPLE);
	}
}

static int init_saadc(const struct device *dev)
{
    2544:	b510      	push	{r4, lr}
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    2546:	4b0e      	ldr	r3, [pc, #56]	; (2580 <init_saadc+0x3c>)
    2548:	2400      	movs	r4, #0
    254a:	f8c3 4104 	str.w	r4, [r3, #260]	; 0x104
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
    254e:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    2552:	f8c3 4110 	str.w	r4, [r3, #272]	; 0x110
    2556:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    p_reg->INTENSET = mask;
    255a:	2212      	movs	r2, #18
    255c:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
	nrf_saadc_event_clear(NRF_SAADC, NRF_SAADC_EVENT_END);
	nrf_saadc_event_clear(NRF_SAADC, NRF_SAADC_EVENT_CALIBRATEDONE);
	nrf_saadc_int_enable(NRF_SAADC,
			     NRF_SAADC_INT_END | NRF_SAADC_INT_CALIBRATEDONE);
	NRFX_IRQ_ENABLE(DT_INST_IRQN(0));
    2560:	2007      	movs	r0, #7
    2562:	f7ff f9f1 	bl	1948 <arch_irq_enable>

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    2566:	4622      	mov	r2, r4
    2568:	2101      	movs	r1, #1
    256a:	2007      	movs	r0, #7
    256c:	f7ff fa1c 	bl	19a8 <z_arm_irq_priority_set>
	return sem->count;
    2570:	4804      	ldr	r0, [pc, #16]	; (2584 <init_saadc+0x40>)
	if (!k_sem_count_get(&ctx->lock)) {
    2572:	6c83      	ldr	r3, [r0, #72]	; 0x48
    2574:	b913      	cbnz	r3, 257c <init_saadc+0x38>
	z_impl_k_sem_give(sem);
    2576:	3040      	adds	r0, #64	; 0x40
    2578:	f003 fb58 	bl	5c2c <z_impl_k_sem_give>
		    saadc_irq_handler, DEVICE_DT_INST_GET(0), 0);

	adc_context_unlock_unconditionally(&m_data.ctx);

	return 0;
}
    257c:	2000      	movs	r0, #0
    257e:	bd10      	pop	{r4, pc}
    2580:	40007000 	.word	0x40007000
    2584:	20000000 	.word	0x20000000

00002588 <saadc_irq_handler>:
{
    2588:	b538      	push	{r3, r4, r5, lr}
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    258a:	4b2e      	ldr	r3, [pc, #184]	; (2644 <saadc_irq_handler+0xbc>)
    258c:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
	if (nrf_saadc_event_check(NRF_SAADC, NRF_SAADC_EVENT_END)) {
    2590:	2a00      	cmp	r2, #0
    2592:	d049      	beq.n	2628 <saadc_irq_handler+0xa0>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    2594:	2200      	movs	r2, #0
    2596:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    259a:	f8d3 1104 	ldr.w	r1, [r3, #260]	; 0x104
 * function if required and takes further actions accordingly.
 */
static inline void adc_context_on_sampling_done(struct adc_context *ctx,
						const struct device *dev)
{
	if (ctx->sequence.options) {
    259e:	4c2a      	ldr	r4, [pc, #168]	; (2648 <saadc_irq_handler+0xc0>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    25a0:	2101      	movs	r1, #1
    25a2:	6099      	str	r1, [r3, #8]
    p_reg->ENABLE = (SAADC_ENABLE_ENABLE_Disabled << SAADC_ENABLE_ENABLE_Pos);
    25a4:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    25a8:	6e63      	ldr	r3, [r4, #100]	; 0x64
    25aa:	4625      	mov	r5, r4
    25ac:	b3bb      	cbz	r3, 261e <saadc_irq_handler+0x96>
		adc_sequence_callback callback = ctx->options.callback;
    25ae:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
		enum adc_action action;
		bool finish = false;
		bool repeat = false;

		if (callback) {
			action = callback(dev,
    25b0:	f8b4 2088 	ldrh.w	r2, [r4, #136]	; 0x88
		if (callback) {
    25b4:	b133      	cbz	r3, 25c4 <saadc_irq_handler+0x3c>
			action = callback(dev,
    25b6:	f104 0164 	add.w	r1, r4, #100	; 0x64
    25ba:	4798      	blx	r3
					  ctx->sampling_index);
		} else {
			action = ADC_ACTION_CONTINUE;
		}

		switch (action) {
    25bc:	2801      	cmp	r0, #1
    25be:	d014      	beq.n	25ea <saadc_irq_handler+0x62>
    25c0:	2802      	cmp	r0, #2
    25c2:	d027      	beq.n	2614 <saadc_irq_handler+0x8c>
			break;
		case ADC_ACTION_FINISH:
			finish = true;
			break;
		default: /* ADC_ACTION_CONTINUE */
			if (ctx->sampling_index <
    25c4:	f8b4 3088 	ldrh.w	r3, [r4, #136]	; 0x88
    25c8:	f8b4 2084 	ldrh.w	r2, [r4, #132]	; 0x84
    25cc:	429a      	cmp	r2, r3
    25ce:	d921      	bls.n	2614 <saadc_irq_handler+0x8c>
			    ctx->options.extra_samplings) {
				++ctx->sampling_index;
    25d0:	3301      	adds	r3, #1
    25d2:	f8a4 3088 	strh.w	r3, [r4, #136]	; 0x88
    return (nrf_saadc_value_t *)p_reg->RESULT.PTR;
    25d6:	4b1b      	ldr	r3, [pc, #108]	; (2644 <saadc_irq_handler+0xbc>)
    25d8:	f8d3 262c 	ldr.w	r2, [r3, #1580]	; 0x62c
    return p_reg->RESULT.AMOUNT;
    25dc:	f8d3 1634 	ldr.w	r1, [r3, #1588]	; 0x634
			nrf_saadc_buffer_pointer_get(NRF_SAADC) +
    25e0:	b289      	uxth	r1, r1
		nrf_saadc_buffer_pointer_set(
    25e2:	eb02 0241 	add.w	r2, r2, r1, lsl #1
    p_reg->RESULT.PTR = (uint32_t)p_buffer;
    25e6:	f8c3 262c 	str.w	r2, [r3, #1580]	; 0x62c
			/*
			 * Immediately start the next sampling if working with
			 * a zero interval or if the timer expired again while
			 * the current sampling was in progress.
			 */
			if (ctx->options.interval_us == 0U) {
    25ea:	6fa3      	ldr	r3, [r4, #120]	; 0x78
    25ec:	b923      	cbnz	r3, 25f8 <saadc_irq_handler+0x70>
}
    25ee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
				adc_context_start_sampling(ctx);
    25f2:	4815      	ldr	r0, [pc, #84]	; (2648 <saadc_irq_handler+0xc0>)
    25f4:	f7ff be6e 	b.w	22d4 <adc_context_start_sampling>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    25f8:	f3bf 8f5b 	dmb	ish
    25fc:	e855 3f00 	ldrex	r3, [r5]
    2600:	1e5a      	subs	r2, r3, #1
    2602:	e845 2100 	strex	r1, r2, [r5]
    2606:	2900      	cmp	r1, #0
    2608:	d1f8      	bne.n	25fc <saadc_irq_handler+0x74>
    260a:	f3bf 8f5b 	dmb	ish
			} else if (atomic_dec(&ctx->sampling_requested) > 1) {
    260e:	2b01      	cmp	r3, #1
    2610:	dced      	bgt.n	25ee <saadc_irq_handler+0x66>
    2612:	bd38      	pop	{r3, r4, r5, pc}
			}

			return;
		}

		if (ctx->options.interval_us != 0U) {
    2614:	6fa3      	ldr	r3, [r4, #120]	; 0x78
    2616:	b113      	cbz	r3, 261e <saadc_irq_handler+0x96>
	z_impl_k_timer_stop(timer);
    2618:	480c      	ldr	r0, [pc, #48]	; (264c <saadc_irq_handler+0xc4>)
    261a:	f005 fe4f 	bl	82bc <z_impl_k_timer_stop>
	z_impl_k_sem_give(sem);
    261e:	480c      	ldr	r0, [pc, #48]	; (2650 <saadc_irq_handler+0xc8>)
    2620:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    2624:	f003 bb02 	b.w	5c2c <z_impl_k_sem_give>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    2628:	f8d3 1110 	ldr.w	r1, [r3, #272]	; 0x110
	} else if (nrf_saadc_event_check(NRF_SAADC,
    262c:	2900      	cmp	r1, #0
    262e:	d0f0      	beq.n	2612 <saadc_irq_handler+0x8a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    2630:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
    2634:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    2638:	2201      	movs	r2, #1
    263a:	609a      	str	r2, [r3, #8]
    263c:	601a      	str	r2, [r3, #0]
    263e:	605a      	str	r2, [r3, #4]
}
    2640:	e7e7      	b.n	2612 <saadc_irq_handler+0x8a>
    2642:	bf00      	nop
    2644:	40007000 	.word	0x40007000
    2648:	20000000 	.word	0x20000000
    264c:	20000008 	.word	0x20000008
    2650:	20000050 	.word	0x20000050

00002654 <onoff_stop>:
}

static clock_control_subsys_t get_subsys(struct onoff_manager *mgr)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;
	size_t offset = (size_t)(mgr - data->mgr);
    2654:	4b08      	ldr	r3, [pc, #32]	; (2678 <onoff_stop+0x24>)
	return (clock_control_subsys_t)offset;
}

static void onoff_stop(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    2656:	b570      	push	{r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
    2658:	1ac3      	subs	r3, r0, r3
{
    265a:	460d      	mov	r5, r1
	int res;

	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    265c:	4907      	ldr	r1, [pc, #28]	; (267c <onoff_stop+0x28>)
	size_t offset = (size_t)(mgr - data->mgr);
    265e:	109b      	asrs	r3, r3, #2
{
    2660:	4604      	mov	r4, r0
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    2662:	4359      	muls	r1, r3
    2664:	4806      	ldr	r0, [pc, #24]	; (2680 <onoff_stop+0x2c>)
    2666:	2240      	movs	r2, #64	; 0x40
    2668:	f004 fd88 	bl	717c <stop>
	notify(mgr, res);
    266c:	462b      	mov	r3, r5
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    266e:	4601      	mov	r1, r0
	notify(mgr, res);
    2670:	4620      	mov	r0, r4
}
    2672:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	notify(mgr, res);
    2676:	4718      	bx	r3
    2678:	20000b30 	.word	0x20000b30
    267c:	b6db6db7 	.word	0xb6db6db7
    2680:	000083ac 	.word	0x000083ac

00002684 <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    2684:	b573      	push	{r0, r1, r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
    2686:	4c0c      	ldr	r4, [pc, #48]	; (26b8 <onoff_start+0x34>)
	int err;

	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    2688:	4a0c      	ldr	r2, [pc, #48]	; (26bc <onoff_start+0x38>)
    268a:	2340      	movs	r3, #64	; 0x40
	size_t offset = (size_t)(mgr - data->mgr);
    268c:	1b04      	subs	r4, r0, r4
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    268e:	9300      	str	r3, [sp, #0]
{
    2690:	460d      	mov	r5, r1
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    2692:	460b      	mov	r3, r1
    2694:	490a      	ldr	r1, [pc, #40]	; (26c0 <onoff_start+0x3c>)
	size_t offset = (size_t)(mgr - data->mgr);
    2696:	10a4      	asrs	r4, r4, #2
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    2698:	4361      	muls	r1, r4
{
    269a:	4606      	mov	r6, r0
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    269c:	4809      	ldr	r0, [pc, #36]	; (26c4 <onoff_start+0x40>)
    269e:	f004 fd9a 	bl	71d6 <async_start>
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
    26a2:	1e01      	subs	r1, r0, #0
    26a4:	da05      	bge.n	26b2 <onoff_start+0x2e>
		notify(mgr, err);
    26a6:	4630      	mov	r0, r6
    26a8:	462b      	mov	r3, r5
	}
}
    26aa:	b002      	add	sp, #8
    26ac:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		notify(mgr, err);
    26b0:	4718      	bx	r3
}
    26b2:	b002      	add	sp, #8
    26b4:	bd70      	pop	{r4, r5, r6, pc}
    26b6:	bf00      	nop
    26b8:	20000b30 	.word	0x20000b30
    26bc:	00007243 	.word	0x00007243
    26c0:	b6db6db7 	.word	0xb6db6db7
    26c4:	000083ac 	.word	0x000083ac

000026c8 <clk_init>:
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    26c8:	2200      	movs	r2, #0
{
    26ca:	b570      	push	{r4, r5, r6, lr}
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    26cc:	2101      	movs	r1, #1
{
    26ce:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    26d0:	4610      	mov	r0, r2
    26d2:	f7ff f969 	bl	19a8 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);

	nrfx_err = nrfx_clock_init(clock_event_handler);
    26d6:	480f      	ldr	r0, [pc, #60]	; (2714 <clk_init+0x4c>)
    26d8:	f001 fda2 	bl	4220 <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
    26dc:	4b0e      	ldr	r3, [pc, #56]	; (2718 <clk_init+0x50>)
    26de:	4298      	cmp	r0, r3
    26e0:	d115      	bne.n	270e <clk_init+0x46>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
    26e2:	f005 f975 	bl	79d0 <nrfx_clock_enable>
	struct nrf_clock_control_data *data = dev->data;
    26e6:	6926      	ldr	r6, [r4, #16]
	for (enum clock_control_nrf_type i = 0;
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);

		err = onoff_manager_init(get_onoff_manager(dev, i),
    26e8:	490c      	ldr	r1, [pc, #48]	; (271c <clk_init+0x54>)
    26ea:	4630      	mov	r0, r6
    26ec:	f004 fb7e 	bl	6dec <onoff_manager_init>
					 &transitions);
		if (err < 0) {
    26f0:	2800      	cmp	r0, #0
    26f2:	db0b      	blt.n	270c <clk_init+0x44>
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    26f4:	2501      	movs	r5, #1
    26f6:	6435      	str	r5, [r6, #64]	; 0x40
	struct nrf_clock_control_data *data = dev->data;
    26f8:	6924      	ldr	r4, [r4, #16]
		err = onoff_manager_init(get_onoff_manager(dev, i),
    26fa:	4908      	ldr	r1, [pc, #32]	; (271c <clk_init+0x54>)
    26fc:	f104 001c 	add.w	r0, r4, #28
    2700:	f004 fb74 	bl	6dec <onoff_manager_init>
		if (err < 0) {
    2704:	2800      	cmp	r0, #0
    2706:	db01      	blt.n	270c <clk_init+0x44>
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    2708:	64e5      	str	r5, [r4, #76]	; 0x4c
	}

	return 0;
    270a:	2000      	movs	r0, #0
}
    270c:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
    270e:	f06f 0004 	mvn.w	r0, #4
    2712:	e7fb      	b.n	270c <clk_init+0x44>
    2714:	00002755 	.word	0x00002755
    2718:	0bad0000 	.word	0x0bad0000
    271c:	0000879c 	.word	0x0000879c

00002720 <clkstarted_handle.constprop.0>:
static void clkstarted_handle(const struct device *dev,
    2720:	b570      	push	{r4, r5, r6, lr}
    2722:	4601      	mov	r1, r0
	clock_control_cb_t callback = sub_data->cb;
    2724:	230c      	movs	r3, #12
    2726:	4809      	ldr	r0, [pc, #36]	; (274c <clkstarted_handle.constprop.0+0x2c>)
    2728:	434b      	muls	r3, r1
    272a:	18c4      	adds	r4, r0, r3
	void *user_data = sub_data->user_data;
    272c:	e9d4 560e 	ldrd	r5, r6, [r4, #56]	; 0x38
	set_on_state(&sub_data->flags);
    2730:	3340      	adds	r3, #64	; 0x40
	sub_data->cb = NULL;
    2732:	2200      	movs	r2, #0
	set_on_state(&sub_data->flags);
    2734:	4418      	add	r0, r3
	sub_data->cb = NULL;
    2736:	63a2      	str	r2, [r4, #56]	; 0x38
	set_on_state(&sub_data->flags);
    2738:	f004 fd0d 	bl	7156 <set_on_state>
	if (callback) {
    273c:	b12d      	cbz	r5, 274a <clkstarted_handle.constprop.0+0x2a>
		callback(dev, (clock_control_subsys_t)type, user_data);
    273e:	4632      	mov	r2, r6
    2740:	462b      	mov	r3, r5
    2742:	4803      	ldr	r0, [pc, #12]	; (2750 <clkstarted_handle.constprop.0+0x30>)
}
    2744:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		callback(dev, (clock_control_subsys_t)type, user_data);
    2748:	4718      	bx	r3
}
    274a:	bd70      	pop	{r4, r5, r6, pc}
    274c:	20000b30 	.word	0x20000b30
    2750:	000083ac 	.word	0x000083ac

00002754 <clock_event_handler>:
	switch (event) {
    2754:	b110      	cbz	r0, 275c <clock_event_handler+0x8>
    2756:	2801      	cmp	r0, #1
    2758:	d004      	beq.n	2764 <clock_event_handler+0x10>
    275a:	4770      	bx	lr
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
    275c:	4b03      	ldr	r3, [pc, #12]	; (276c <clock_event_handler+0x18>)
    275e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    2760:	075b      	lsls	r3, r3, #29
    2762:	d101      	bne.n	2768 <clock_event_handler+0x14>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
    2764:	f7ff bfdc 	b.w	2720 <clkstarted_handle.constprop.0>
}
    2768:	4770      	bx	lr
    276a:	bf00      	nop
    276c:	20000b30 	.word	0x20000b30

00002770 <generic_hfclk_start>:
{
    2770:	b508      	push	{r3, lr}
	__asm__ volatile(
    2772:	f04f 0320 	mov.w	r3, #32
    2776:	f3ef 8111 	mrs	r1, BASEPRI
    277a:	f383 8812 	msr	BASEPRI_MAX, r3
    277e:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
    2782:	4a12      	ldr	r2, [pc, #72]	; (27cc <generic_hfclk_start+0x5c>)
    2784:	6813      	ldr	r3, [r2, #0]
    2786:	f043 0002 	orr.w	r0, r3, #2
    278a:	6010      	str	r0, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
    278c:	07da      	lsls	r2, r3, #31
    278e:	d408      	bmi.n	27a2 <generic_hfclk_start+0x32>
	__asm__ volatile(
    2790:	f381 8811 	msr	BASEPRI, r1
    2794:	f3bf 8f6f 	isb	sy
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
    2798:	2001      	movs	r0, #1
}
    279a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    279e:	f005 b924 	b.w	79ea <nrfx_clock_start>
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    27a2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    27a6:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    27aa:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
    27ae:	07d3      	lsls	r3, r2, #31
    27b0:	d5ee      	bpl.n	2790 <generic_hfclk_start+0x20>
			set_on_state(get_hf_flags());
    27b2:	4807      	ldr	r0, [pc, #28]	; (27d0 <generic_hfclk_start+0x60>)
    27b4:	f004 fccf 	bl	7156 <set_on_state>
    27b8:	f381 8811 	msr	BASEPRI, r1
    27bc:	f3bf 8f6f 	isb	sy
		clkstarted_handle(CLOCK_DEVICE,
    27c0:	2000      	movs	r0, #0
}
    27c2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(CLOCK_DEVICE,
    27c6:	f7ff bfab 	b.w	2720 <clkstarted_handle.constprop.0>
    27ca:	bf00      	nop
    27cc:	20000b80 	.word	0x20000b80
    27d0:	20000b70 	.word	0x20000b70

000027d4 <api_blocking_start>:
{
    27d4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    27d6:	2200      	movs	r2, #0
    27d8:	2301      	movs	r3, #1
    27da:	e9cd 2302 	strd	r2, r3, [sp, #8]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    27de:	4a09      	ldr	r2, [pc, #36]	; (2804 <api_blocking_start+0x30>)
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    27e0:	f8cd d000 	str.w	sp, [sp]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    27e4:	466b      	mov	r3, sp
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    27e6:	f8cd d004 	str.w	sp, [sp, #4]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    27ea:	f004 fd23 	bl	7234 <api_start>
	if (err < 0) {
    27ee:	2800      	cmp	r0, #0
    27f0:	db05      	blt.n	27fe <api_blocking_start+0x2a>
	return z_impl_k_sem_take(sem, timeout);
    27f2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    27f6:	2300      	movs	r3, #0
    27f8:	4668      	mov	r0, sp
    27fa:	f003 fa37 	bl	5c6c <z_impl_k_sem_take>
}
    27fe:	b005      	add	sp, #20
    2800:	f85d fb04 	ldr.w	pc, [sp], #4
    2804:	00007263 	.word	0x00007263

00002808 <generic_hfclk_stop>:
{
    2808:	b510      	push	{r4, lr}
	__asm__ volatile(
    280a:	f04f 0320 	mov.w	r3, #32
    280e:	f3ef 8411 	mrs	r4, BASEPRI
    2812:	f383 8812 	msr	BASEPRI_MAX, r3
    2816:	f3bf 8f6f 	isb	sy
	hfclk_users &= ~HF_USER_GENERIC;
    281a:	4a07      	ldr	r2, [pc, #28]	; (2838 <generic_hfclk_stop+0x30>)
    281c:	6813      	ldr	r3, [r2, #0]
    281e:	f023 0102 	bic.w	r1, r3, #2
	if (!(hfclk_users & HF_USER_BT)) {
    2822:	07db      	lsls	r3, r3, #31
	hfclk_users &= ~HF_USER_GENERIC;
    2824:	6011      	str	r1, [r2, #0]
	if (!(hfclk_users & HF_USER_BT)) {
    2826:	d402      	bmi.n	282e <generic_hfclk_stop+0x26>
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
    2828:	2001      	movs	r0, #1
    282a:	f005 f91a 	bl	7a62 <nrfx_clock_stop>
	__asm__ volatile(
    282e:	f384 8811 	msr	BASEPRI, r4
    2832:	f3bf 8f6f 	isb	sy
}
    2836:	bd10      	pop	{r4, pc}
    2838:	20000b80 	.word	0x20000b80

0000283c <z_nrf_clock_control_get_onoff>:
}
    283c:	4a02      	ldr	r2, [pc, #8]	; (2848 <z_nrf_clock_control_get_onoff+0xc>)
	return &data->mgr[type];
    283e:	b2c3      	uxtb	r3, r0
}
    2840:	201c      	movs	r0, #28
    2842:	fb03 2000 	mla	r0, r3, r0, r2
    2846:	4770      	bx	lr
    2848:	20000b30 	.word	0x20000b30

0000284c <z_nrf_clock_control_lf_on>:
{
    284c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    2850:	4938      	ldr	r1, [pc, #224]	; (2934 <z_nrf_clock_control_lf_on+0xe8>)
    2852:	f3bf 8f5b 	dmb	ish
    2856:	4607      	mov	r7, r0
    2858:	2201      	movs	r2, #1
    285a:	e851 3f00 	ldrex	r3, [r1]
    285e:	e841 2000 	strex	r0, r2, [r1]
    2862:	2800      	cmp	r0, #0
    2864:	d1f9      	bne.n	285a <z_nrf_clock_control_lf_on+0xe>
    2866:	f3bf 8f5b 	dmb	ish
	if (atomic_set(&on, 1) == 0) {
    286a:	b933      	cbnz	r3, 287a <z_nrf_clock_control_lf_on+0x2e>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
    286c:	4932      	ldr	r1, [pc, #200]	; (2938 <z_nrf_clock_control_lf_on+0xec>)
		err = onoff_request(mgr, &cli);
    286e:	4833      	ldr	r0, [pc, #204]	; (293c <z_nrf_clock_control_lf_on+0xf0>)
    2870:	604b      	str	r3, [r1, #4]
    2872:	60cb      	str	r3, [r1, #12]
    2874:	608a      	str	r2, [r1, #8]
    2876:	f004 facc 	bl	6e12 <onoff_request>
	switch (start_mode) {
    287a:	1e7b      	subs	r3, r7, #1
    287c:	2b01      	cmp	r3, #1
    287e:	d82b      	bhi.n	28d8 <z_nrf_clock_control_lf_on+0x8c>
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
    2880:	2f01      	cmp	r7, #1
    2882:	d107      	bne.n	2894 <z_nrf_clock_control_lf_on+0x48>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
    2884:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2888:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
    288c:	f003 0303 	and.w	r3, r3, #3
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
    2890:	2b01      	cmp	r3, #1
    2892:	d021      	beq.n	28d8 <z_nrf_clock_control_lf_on+0x8c>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    2894:	f005 fbbc 	bl	8010 <k_is_in_isr>
    2898:	4605      	mov	r5, r0
    289a:	b9f8      	cbnz	r0, 28dc <z_nrf_clock_control_lf_on+0x90>
	return !z_sys_post_kernel;
    289c:	4b28      	ldr	r3, [pc, #160]	; (2940 <z_nrf_clock_control_lf_on+0xf4>)
    289e:	781b      	ldrb	r3, [r3, #0]
    28a0:	b1e3      	cbz	r3, 28dc <z_nrf_clock_control_lf_on+0x90>
    p_reg->INTENCLR = mask;
    28a2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    28a6:	2202      	movs	r2, #2
    28a8:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
	int key = isr_mode ? irq_lock() : 0;
    28ac:	4606      	mov	r6, r0
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    28ae:	f8df 8094 	ldr.w	r8, [pc, #148]	; 2944 <z_nrf_clock_control_lf_on+0xf8>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    28b2:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
    28b6:	f8d4 3418 	ldr.w	r3, [r4, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    28ba:	f8d4 2418 	ldr.w	r2, [r4, #1048]	; 0x418
    28be:	03d2      	lsls	r2, r2, #15
    28c0:	d516      	bpl.n	28f0 <z_nrf_clock_control_lf_on+0xa4>
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    28c2:	f003 0303 	and.w	r3, r3, #3
	while (!(nrfx_clock_is_running(d, (void *)&type)
    28c6:	2b01      	cmp	r3, #1
    28c8:	d001      	beq.n	28ce <z_nrf_clock_control_lf_on+0x82>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
    28ca:	2f01      	cmp	r7, #1
    28cc:	d110      	bne.n	28f0 <z_nrf_clock_control_lf_on+0xa4>
	if (isr_mode) {
    28ce:	b35d      	cbz	r5, 2928 <z_nrf_clock_control_lf_on+0xdc>
    28d0:	f386 8811 	msr	BASEPRI, r6
    28d4:	f3bf 8f6f 	isb	sy
}
    28d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__asm__ volatile(
    28dc:	f04f 0320 	mov.w	r3, #32
    28e0:	f3ef 8611 	mrs	r6, BASEPRI
    28e4:	f383 8812 	msr	BASEPRI_MAX, r3
    28e8:	f3bf 8f6f 	isb	sy
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    28ec:	2501      	movs	r5, #1
    28ee:	e7de      	b.n	28ae <z_nrf_clock_control_lf_on+0x62>
			if (isr_mode || !IS_ENABLED(CONFIG_MULTITHREADING)) {
    28f0:	b1ad      	cbz	r5, 291e <z_nrf_clock_control_lf_on+0xd2>
 *
 * @param key Interrupt locking key obtained from irq_lock().
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
    28f2:	4630      	mov	r0, r6
    28f4:	f7ff f81c 	bl	1930 <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
    28f8:	f8d4 3518 	ldr.w	r3, [r4, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
    28fc:	2b00      	cmp	r3, #0
    28fe:	d1da      	bne.n	28b6 <z_nrf_clock_control_lf_on+0x6a>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    2900:	f8d4 2104 	ldr.w	r2, [r4, #260]	; 0x104
		    && nrf_clock_event_check(NRF_CLOCK,
    2904:	2a00      	cmp	r2, #0
    2906:	d0d6      	beq.n	28b6 <z_nrf_clock_control_lf_on+0x6a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    2908:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
    290c:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    p_reg->LFCLKSRC = (uint32_t)(source);
    2910:	2301      	movs	r3, #1
    2912:	f8c4 3518 	str.w	r3, [r4, #1304]	; 0x518
    2916:	f8c8 3180 	str.w	r3, [r8, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    291a:	60a3      	str	r3, [r4, #8]
}
    291c:	e7cb      	b.n	28b6 <z_nrf_clock_control_lf_on+0x6a>
	return z_impl_k_sleep(timeout);
    291e:	2100      	movs	r1, #0
    2920:	2021      	movs	r0, #33	; 0x21
    2922:	f003 fce3 	bl	62ec <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    2926:	e7e7      	b.n	28f8 <z_nrf_clock_control_lf_on+0xac>
    p_reg->INTENSET = mask;
    2928:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    292c:	2202      	movs	r2, #2
    292e:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    2932:	e7d1      	b.n	28d8 <z_nrf_clock_control_lf_on+0x8c>
    2934:	20000b2c 	.word	0x20000b2c
    2938:	20000b1c 	.word	0x20000b1c
    293c:	20000b4c 	.word	0x20000b4c
    2940:	200013a8 	.word	0x200013a8
    2944:	e000e100 	.word	0xe000e100

00002948 <rtt_console_init>:

	return character;
}

static int rtt_console_init(void)
{
    2948:	b510      	push	{r4, lr}

#ifdef CONFIG_PRINTK
	__printk_hook_install(rtt_console_out);
    294a:	4c04      	ldr	r4, [pc, #16]	; (295c <rtt_console_init+0x14>)
    294c:	4620      	mov	r0, r4
    294e:	f7fe fc7b 	bl	1248 <__printk_hook_install>
#endif
	__stdout_hook_install(rtt_console_out);
    2952:	4620      	mov	r0, r4
    2954:	f7ff fc68 	bl	2228 <__stdout_hook_install>

	return 0;
}
    2958:	2000      	movs	r0, #0
    295a:	bd10      	pop	{r4, pc}
    295c:	00002961 	.word	0x00002961

00002960 <rtt_console_out>:
{
    2960:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    2962:	4e14      	ldr	r6, [pc, #80]	; (29b4 <rtt_console_out+0x54>)
	char c = (char)character;
    2964:	f88d 0007 	strb.w	r0, [sp, #7]
{
    2968:	4604      	mov	r4, r0
	char c = (char)character;
    296a:	2503      	movs	r5, #3
		SEGGER_RTT_LOCK();
    296c:	f3ef 8711 	mrs	r7, BASEPRI
    2970:	f04f 0120 	mov.w	r1, #32
    2974:	f381 8811 	msr	BASEPRI, r1
		cnt = SEGGER_RTT_WriteNoLock(0, &c, 1);
    2978:	2201      	movs	r2, #1
    297a:	f10d 0107 	add.w	r1, sp, #7
    297e:	2000      	movs	r0, #0
    2980:	f002 fe6a 	bl	5658 <SEGGER_RTT_WriteNoLock>
		SEGGER_RTT_UNLOCK();
    2984:	f387 8811 	msr	BASEPRI, r7
		if (cnt) {
    2988:	b120      	cbz	r0, 2994 <rtt_console_out+0x34>
			host_present = true;
    298a:	2301      	movs	r3, #1
    298c:	7033      	strb	r3, [r6, #0]
}
    298e:	4620      	mov	r0, r4
    2990:	b003      	add	sp, #12
    2992:	bdf0      	pop	{r4, r5, r6, r7, pc}
		} else if (host_present) {
    2994:	7833      	ldrb	r3, [r6, #0]
    2996:	2b00      	cmp	r3, #0
    2998:	d0f9      	beq.n	298e <rtt_console_out+0x2e>
			if (max_cnt) {
    299a:	3d01      	subs	r5, #1
    299c:	d008      	beq.n	29b0 <rtt_console_out+0x50>
	if (!IS_ENABLED(CONFIG_MULTITHREADING) || k_is_in_isr()) {
    299e:	f005 fb37 	bl	8010 <k_is_in_isr>
    29a2:	2800      	cmp	r0, #0
    29a4:	d1e2      	bne.n	296c <rtt_console_out+0xc>
    29a6:	2100      	movs	r1, #0
    29a8:	2042      	movs	r0, #66	; 0x42
    29aa:	f003 fc9f 	bl	62ec <z_impl_k_sleep>
		SEGGER_RTT_LOCK();
    29ae:	e7dd      	b.n	296c <rtt_console_out+0xc>
				host_present = false;
    29b0:	7035      	strb	r5, [r6, #0]
    29b2:	e7ec      	b.n	298e <rtt_console_out+0x2e>
    29b4:	20000f8d 	.word	0x20000f8d

000029b8 <gpio_nrfx_pin_interrupt_configure>:

static int gpio_nrfx_pin_interrupt_configure(const struct device *port,
					     gpio_pin_t pin,
					     enum gpio_int_mode mode,
					     enum gpio_int_trig trig)
{
    29b8:	b530      	push	{r4, r5, lr}
	return port->config;
    29ba:	6840      	ldr	r0, [r0, #4]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    29bc:	7b05      	ldrb	r5, [r0, #12]
    29be:	f001 041f 	and.w	r4, r1, #31
	nrfx_err_t err;
	uint8_t ch;

	if (mode == GPIO_INT_MODE_DISABLED) {
    29c2:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
{
    29c6:	b085      	sub	sp, #20
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    29c8:	ea44 1445 	orr.w	r4, r4, r5, lsl #5
	if (mode == GPIO_INT_MODE_DISABLED) {
    29cc:	d105      	bne.n	29da <gpio_nrfx_pin_interrupt_configure+0x22>
		nrfx_gpiote_trigger_disable(abs_pin);
    29ce:	4620      	mov	r0, r4
    29d0:	f001 feaa 	bl	4728 <nrfx_gpiote_trigger_disable>

		return 0;
    29d4:	2000      	movs	r0, #0
	}

	nrfx_gpiote_trigger_enable(abs_pin, true);

	return 0;
}
    29d6:	b005      	add	sp, #20
    29d8:	bd30      	pop	{r4, r5, pc}
	nrfx_gpiote_trigger_config_t trigger_config = {
    29da:	2500      	movs	r5, #0
	if (mode == GPIO_INT_MODE_LEVEL) {
    29dc:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
	nrfx_gpiote_trigger_config_t trigger_config = {
    29e0:	e9cd 5502 	strd	r5, r5, [sp, #8]
	if (mode == GPIO_INT_MODE_LEVEL) {
    29e4:	d114      	bne.n	2a10 <gpio_nrfx_pin_interrupt_configure+0x58>
		return trig == GPIO_INT_TRIG_LOW ? NRFX_GPIOTE_TRIGGER_LOW :
    29e6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
	nrfx_gpiote_trigger_config_t trigger_config = {
    29ea:	bf0c      	ite	eq
    29ec:	2304      	moveq	r3, #4
    29ee:	2305      	movne	r3, #5
    29f0:	f88d 3008 	strb.w	r3, [sp, #8]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    29f4:	2300      	movs	r3, #0
    29f6:	4619      	mov	r1, r3
    29f8:	aa02      	add	r2, sp, #8
    29fa:	4620      	mov	r0, r4
    29fc:	f001 fcd2 	bl	43a4 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
    2a00:	4b1f      	ldr	r3, [pc, #124]	; (2a80 <gpio_nrfx_pin_interrupt_configure+0xc8>)
    2a02:	4298      	cmp	r0, r3
    2a04:	d139      	bne.n	2a7a <gpio_nrfx_pin_interrupt_configure+0xc2>
	nrfx_gpiote_trigger_enable(abs_pin, true);
    2a06:	2101      	movs	r1, #1
    2a08:	4620      	mov	r0, r4
    2a0a:	f001 fe45 	bl	4698 <nrfx_gpiote_trigger_enable>
	return 0;
    2a0e:	e7e1      	b.n	29d4 <gpio_nrfx_pin_interrupt_configure+0x1c>
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
    2a10:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
    2a14:	d026      	beq.n	2a64 <gpio_nrfx_pin_interrupt_configure+0xac>
    2a16:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
    2a1a:	bf14      	ite	ne
    2a1c:	2301      	movne	r3, #1
    2a1e:	2302      	moveq	r3, #2
	nrfx_gpiote_trigger_config_t trigger_config = {
    2a20:	f88d 3008 	strb.w	r3, [sp, #8]
	if (!(BIT(pin) & get_port_cfg(port)->edge_sense) &&
    2a24:	6883      	ldr	r3, [r0, #8]
    2a26:	40cb      	lsrs	r3, r1
    2a28:	07d9      	lsls	r1, r3, #31
    2a2a:	d4e3      	bmi.n	29f4 <gpio_nrfx_pin_interrupt_configure+0x3c>
    2a2c:	f1b2 7fa0 	cmp.w	r2, #20971520	; 0x1400000
    2a30:	d1e0      	bne.n	29f4 <gpio_nrfx_pin_interrupt_configure+0x3c>
NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;

    return pin_number >> 5;
    2a32:	0962      	lsrs	r2, r4, #5
        case 1: return NRF_P1;
    2a34:	2a01      	cmp	r2, #1
    *p_pin = pin_number & 0x1F;
    2a36:	f004 031f 	and.w	r3, r4, #31
        case 1: return NRF_P1;
    2a3a:	4a12      	ldr	r2, [pc, #72]	; (2a84 <gpio_nrfx_pin_interrupt_configure+0xcc>)
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
    2a3c:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
        case 1: return NRF_P1;
    2a40:	bf18      	it	ne
    2a42:	f04f 42a0 	movne.w	r2, #1342177280	; 0x50000000
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
    2a46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
	    (mode == GPIO_INT_MODE_EDGE) &&
    2a4a:	07db      	lsls	r3, r3, #31
    2a4c:	d4d2      	bmi.n	29f4 <gpio_nrfx_pin_interrupt_configure+0x3c>
		err = nrfx_gpiote_channel_get(abs_pin, &ch);
    2a4e:	f10d 0507 	add.w	r5, sp, #7
    2a52:	4629      	mov	r1, r5
    2a54:	4620      	mov	r0, r4
    2a56:	f001 fdcb 	bl	45f0 <nrfx_gpiote_channel_get>
		if (err == NRFX_ERROR_INVALID_PARAM) {
    2a5a:	4b0b      	ldr	r3, [pc, #44]	; (2a88 <gpio_nrfx_pin_interrupt_configure+0xd0>)
    2a5c:	4298      	cmp	r0, r3
    2a5e:	d003      	beq.n	2a68 <gpio_nrfx_pin_interrupt_configure+0xb0>
		trigger_config.p_in_channel = &ch;
    2a60:	9503      	str	r5, [sp, #12]
    2a62:	e7c7      	b.n	29f4 <gpio_nrfx_pin_interrupt_configure+0x3c>
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
    2a64:	2303      	movs	r3, #3
    2a66:	e7db      	b.n	2a20 <gpio_nrfx_pin_interrupt_configure+0x68>
			err = nrfx_gpiote_channel_alloc(&ch);
    2a68:	4628      	mov	r0, r5
    2a6a:	f001 fe0f 	bl	468c <nrfx_gpiote_channel_alloc>
			if (err != NRFX_SUCCESS) {
    2a6e:	4b04      	ldr	r3, [pc, #16]	; (2a80 <gpio_nrfx_pin_interrupt_configure+0xc8>)
    2a70:	4298      	cmp	r0, r3
    2a72:	d0f5      	beq.n	2a60 <gpio_nrfx_pin_interrupt_configure+0xa8>
				return -ENOMEM;
    2a74:	f06f 000b 	mvn.w	r0, #11
    2a78:	e7ad      	b.n	29d6 <gpio_nrfx_pin_interrupt_configure+0x1e>
		return -EINVAL;
    2a7a:	f06f 0015 	mvn.w	r0, #21
    2a7e:	e7aa      	b.n	29d6 <gpio_nrfx_pin_interrupt_configure+0x1e>
    2a80:	0bad0000 	.word	0x0bad0000
    2a84:	50000300 	.word	0x50000300
    2a88:	0bad0004 	.word	0x0bad0004

00002a8c <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
    2a8c:	b510      	push	{r4, lr}
	nrfx_err_t err;

	if (nrfx_gpiote_is_init()) {
    2a8e:	f001 fded 	bl	466c <nrfx_gpiote_is_init>
    2a92:	4604      	mov	r4, r0
    2a94:	b968      	cbnz	r0, 2ab2 <gpio_nrfx_init+0x26>
		return 0;
	}

	err = nrfx_gpiote_init(0/*not used*/);
    2a96:	f001 fdc1 	bl	461c <nrfx_gpiote_init>
	if (err != NRFX_SUCCESS) {
    2a9a:	4b08      	ldr	r3, [pc, #32]	; (2abc <gpio_nrfx_init+0x30>)
    2a9c:	4298      	cmp	r0, r3
    2a9e:	d10a      	bne.n	2ab6 <gpio_nrfx_init+0x2a>
		return -EIO;
	}

	nrfx_gpiote_global_callback_set(nrfx_gpio_handler, NULL);
    2aa0:	4807      	ldr	r0, [pc, #28]	; (2ac0 <gpio_nrfx_init+0x34>)
    2aa2:	4621      	mov	r1, r4
    2aa4:	f001 fd9e 	bl	45e4 <nrfx_gpiote_global_callback_set>

	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
    2aa8:	4622      	mov	r2, r4
    2aaa:	2105      	movs	r1, #5
    2aac:	2006      	movs	r0, #6
    2aae:	f7fe ff7b 	bl	19a8 <z_arm_irq_priority_set>
		return 0;
    2ab2:	2000      	movs	r0, #0
		    nrfx_isr, nrfx_gpiote_irq_handler, 0);

	return 0;
}
    2ab4:	bd10      	pop	{r4, pc}
		return -EIO;
    2ab6:	f06f 0004 	mvn.w	r0, #4
    2aba:	e7fb      	b.n	2ab4 <gpio_nrfx_init+0x28>
    2abc:	0bad0000 	.word	0x0bad0000
    2ac0:	00002ac5 	.word	0x00002ac5

00002ac4 <nrfx_gpio_handler>:
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    2ac4:	0942      	lsrs	r2, r0, #5
{
    2ac6:	b570      	push	{r4, r5, r6, lr}
    2ac8:	4603      	mov	r3, r0
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    2aca:	d002      	beq.n	2ad2 <nrfx_gpio_handler+0xe>
    2acc:	2a01      	cmp	r2, #1
    2ace:	d017      	beq.n	2b00 <nrfx_gpio_handler+0x3c>
}
    2ad0:	bd70      	pop	{r4, r5, r6, pc}
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    2ad2:	4e0d      	ldr	r6, [pc, #52]	; (2b08 <nrfx_gpio_handler+0x44>)
	gpio_fire_callbacks(list, port, BIT(pin));
    2ad4:	6932      	ldr	r2, [r6, #16]
    2ad6:	6851      	ldr	r1, [r2, #4]
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    2ad8:	2900      	cmp	r1, #0
    2ada:	d0f9      	beq.n	2ad0 <nrfx_gpio_handler+0xc>
    *p_pin = pin_number & 0x1F;
    2adc:	f003 031f 	and.w	r3, r3, #31
    2ae0:	2501      	movs	r5, #1
    2ae2:	680c      	ldr	r4, [r1, #0]
    2ae4:	409d      	lsls	r5, r3
    2ae6:	2900      	cmp	r1, #0
    2ae8:	d0f2      	beq.n	2ad0 <nrfx_gpio_handler+0xc>
		if (cb->pin_mask & pins) {
    2aea:	688a      	ldr	r2, [r1, #8]
    2aec:	402a      	ands	r2, r5
    2aee:	d002      	beq.n	2af6 <nrfx_gpio_handler+0x32>
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
    2af0:	684b      	ldr	r3, [r1, #4]
    2af2:	4630      	mov	r0, r6
    2af4:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    2af6:	b12c      	cbz	r4, 2b04 <nrfx_gpio_handler+0x40>
    2af8:	6823      	ldr	r3, [r4, #0]
    2afa:	4621      	mov	r1, r4
    2afc:	461c      	mov	r4, r3
    2afe:	e7f2      	b.n	2ae6 <nrfx_gpio_handler+0x22>
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    2b00:	4e02      	ldr	r6, [pc, #8]	; (2b0c <nrfx_gpio_handler+0x48>)
    2b02:	e7e7      	b.n	2ad4 <nrfx_gpio_handler+0x10>
    2b04:	4623      	mov	r3, r4
    2b06:	e7f8      	b.n	2afa <nrfx_gpio_handler+0x36>
    2b08:	000083dc 	.word	0x000083dc
    2b0c:	000083c4 	.word	0x000083c4

00002b10 <gpio_nrfx_pin_configure>:
{
    2b10:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	return port->config;
    2b14:	6847      	ldr	r7, [r0, #4]
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    2b16:	7b3b      	ldrb	r3, [r7, #12]
    2b18:	f001 051f 	and.w	r5, r1, #31
    2b1c:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
{
    2b20:	460e      	mov	r6, r1
	err = nrfx_gpiote_channel_get(abs_pin, &ch);
    2b22:	4628      	mov	r0, r5
    2b24:	f10d 0103 	add.w	r1, sp, #3
{
    2b28:	4614      	mov	r4, r2
	err = nrfx_gpiote_channel_get(abs_pin, &ch);
    2b2a:	f001 fd61 	bl	45f0 <nrfx_gpiote_channel_get>
	if ((flags & (GPIO_INPUT | GPIO_OUTPUT)) == GPIO_DISCONNECTED) {
    2b2e:	f414 3f40 	tst.w	r4, #196608	; 0x30000
	err = nrfx_gpiote_channel_get(abs_pin, &ch);
    2b32:	4680      	mov	r8, r0
	if ((flags & (GPIO_INPUT | GPIO_OUTPUT)) == GPIO_DISCONNECTED) {
    2b34:	d10b      	bne.n	2b4e <gpio_nrfx_pin_configure+0x3e>
		(void)nrfx_gpiote_pin_uninit(abs_pin);
    2b36:	4628      	mov	r0, r5
    2b38:	f001 fe1e 	bl	4778 <nrfx_gpiote_pin_uninit>
		if (free_ch) {
    2b3c:	4b3d      	ldr	r3, [pc, #244]	; (2c34 <gpio_nrfx_pin_configure+0x124>)
    2b3e:	4598      	cmp	r8, r3
    2b40:	d103      	bne.n	2b4a <gpio_nrfx_pin_configure+0x3a>
			err = nrfx_gpiote_channel_free(ch);
    2b42:	f89d 0003 	ldrb.w	r0, [sp, #3]
    2b46:	f001 fd9b 	bl	4680 <nrfx_gpiote_channel_free>
		return 0;
    2b4a:	2000      	movs	r0, #0
    2b4c:	e00c      	b.n	2b68 <gpio_nrfx_pin_configure+0x58>
	nrfx_gpiote_trigger_config_t trigger_config = {
    2b4e:	2300      	movs	r3, #0
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    2b50:	4619      	mov	r1, r3
    2b52:	aa02      	add	r2, sp, #8
    2b54:	4628      	mov	r0, r5
	nrfx_gpiote_trigger_config_t trigger_config = {
    2b56:	e9cd 3302 	strd	r3, r3, [sp, #8]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    2b5a:	f001 fc23 	bl	43a4 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
    2b5e:	4b35      	ldr	r3, [pc, #212]	; (2c34 <gpio_nrfx_pin_configure+0x124>)
    2b60:	4298      	cmp	r0, r3
    2b62:	d004      	beq.n	2b6e <gpio_nrfx_pin_configure+0x5e>
		return NRF_GPIO_PIN_PULLUP;
    2b64:	f06f 0015 	mvn.w	r0, #21
}
    2b68:	b004      	add	sp, #16
    2b6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (free_ch) {
    2b6e:	4580      	cmp	r8, r0
    2b70:	d103      	bne.n	2b7a <gpio_nrfx_pin_configure+0x6a>
		err = nrfx_gpiote_channel_free(ch);
    2b72:	f89d 0003 	ldrb.w	r0, [sp, #3]
    2b76:	f001 fd83 	bl	4680 <nrfx_gpiote_channel_free>
	if (flags & GPIO_OUTPUT) {
    2b7a:	03a3      	lsls	r3, r4, #14
    2b7c:	d54b      	bpl.n	2c16 <gpio_nrfx_pin_configure+0x106>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
    2b7e:	f240 3306 	movw	r3, #774	; 0x306
    2b82:	4023      	ands	r3, r4
    2b84:	f5b3 7f83 	cmp.w	r3, #262	; 0x106
    2b88:	d019      	beq.n	2bbe <gpio_nrfx_pin_configure+0xae>
    2b8a:	d80c      	bhi.n	2ba6 <gpio_nrfx_pin_configure+0x96>
    2b8c:	2b06      	cmp	r3, #6
    2b8e:	d017      	beq.n	2bc0 <gpio_nrfx_pin_configure+0xb0>
    2b90:	d804      	bhi.n	2b9c <gpio_nrfx_pin_configure+0x8c>
    2b92:	b1ab      	cbz	r3, 2bc0 <gpio_nrfx_pin_configure+0xb0>
    2b94:	2b02      	cmp	r3, #2
    2b96:	d1e5      	bne.n	2b64 <gpio_nrfx_pin_configure+0x54>
		*drive = NRF_GPIO_PIN_D0S1;
    2b98:	2304      	movs	r3, #4
    2b9a:	e011      	b.n	2bc0 <gpio_nrfx_pin_configure+0xb0>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
    2b9c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    2ba0:	d1e0      	bne.n	2b64 <gpio_nrfx_pin_configure+0x54>
		*drive = NRF_GPIO_PIN_H0S1;
    2ba2:	2301      	movs	r3, #1
    2ba4:	e00c      	b.n	2bc0 <gpio_nrfx_pin_configure+0xb0>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
    2ba6:	f240 2202 	movw	r2, #514	; 0x202
    2baa:	4293      	cmp	r3, r2
    2bac:	d027      	beq.n	2bfe <gpio_nrfx_pin_configure+0xee>
    2bae:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
    2bb2:	d026      	beq.n	2c02 <gpio_nrfx_pin_configure+0xf2>
    2bb4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    2bb8:	d1d4      	bne.n	2b64 <gpio_nrfx_pin_configure+0x54>
		*drive = NRF_GPIO_PIN_S0H1;
    2bba:	2302      	movs	r3, #2
    2bbc:	e000      	b.n	2bc0 <gpio_nrfx_pin_configure+0xb0>
		*drive = NRF_GPIO_PIN_H0D1;
    2bbe:	2307      	movs	r3, #7
		nrfx_gpiote_output_config_t output_config = {
    2bc0:	f88d 3004 	strb.w	r3, [sp, #4]
				NRF_GPIO_PIN_INPUT_CONNECT :
    2bc4:	f484 3380 	eor.w	r3, r4, #65536	; 0x10000
    2bc8:	f3c3 4300 	ubfx	r3, r3, #16, #1
	if (flags & GPIO_PULL_UP) {
    2bcc:	06e0      	lsls	r0, r4, #27
		nrfx_gpiote_output_config_t output_config = {
    2bce:	f88d 3005 	strb.w	r3, [sp, #5]
	} else if (flags & GPIO_PULL_DOWN) {
    2bd2:	bf54      	ite	pl
    2bd4:	f3c4 1340 	ubfxpl	r3, r4, #5, #1
		return NRF_GPIO_PIN_PULLUP;
    2bd8:	2303      	movmi	r3, #3
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
    2bda:	0321      	lsls	r1, r4, #12
		nrfx_gpiote_output_config_t output_config = {
    2bdc:	f88d 3006 	strb.w	r3, [sp, #6]
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
    2be0:	d511      	bpl.n	2c06 <gpio_nrfx_pin_configure+0xf6>
			nrf_gpio_port_out_set(cfg->port, BIT(pin));
    2be2:	687a      	ldr	r2, [r7, #4]
    2be4:	2301      	movs	r3, #1
    2be6:	40b3      	lsls	r3, r6
    p_reg->OUTSET = set_mask;
    2be8:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
		err = nrfx_gpiote_output_configure(abs_pin, &output_config, NULL);
    2bec:	2200      	movs	r2, #0
    2bee:	a901      	add	r1, sp, #4
    2bf0:	4628      	mov	r0, r5
    2bf2:	f001 fc85 	bl	4500 <nrfx_gpiote_output_configure>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
    2bf6:	4b0f      	ldr	r3, [pc, #60]	; (2c34 <gpio_nrfx_pin_configure+0x124>)
    2bf8:	4298      	cmp	r0, r3
    2bfa:	d0a6      	beq.n	2b4a <gpio_nrfx_pin_configure+0x3a>
    2bfc:	e7b2      	b.n	2b64 <gpio_nrfx_pin_configure+0x54>
		*drive = NRF_GPIO_PIN_D0H1;
    2bfe:	2305      	movs	r3, #5
    2c00:	e7de      	b.n	2bc0 <gpio_nrfx_pin_configure+0xb0>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
    2c02:	2303      	movs	r3, #3
    2c04:	e7dc      	b.n	2bc0 <gpio_nrfx_pin_configure+0xb0>
		} else if (flags & GPIO_OUTPUT_INIT_LOW) {
    2c06:	0362      	lsls	r2, r4, #13
			nrf_gpio_port_out_clear(cfg->port, BIT(pin));
    2c08:	bf41      	itttt	mi
    2c0a:	2301      	movmi	r3, #1
    2c0c:	687a      	ldrmi	r2, [r7, #4]
    2c0e:	40b3      	lslmi	r3, r6
    p_reg->OUTCLR = clr_mask;
    2c10:	f8c2 350c 	strmi.w	r3, [r2, #1292]	; 0x50c
}
    2c14:	e7ea      	b.n	2bec <gpio_nrfx_pin_configure+0xdc>
	if (flags & GPIO_PULL_UP) {
    2c16:	06e3      	lsls	r3, r4, #27
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    2c18:	f04f 0300 	mov.w	r3, #0
	} else if (flags & GPIO_PULL_DOWN) {
    2c1c:	bf54      	ite	pl
    2c1e:	f3c4 1440 	ubfxpl	r4, r4, #5, #1
		return NRF_GPIO_PIN_PULLUP;
    2c22:	2403      	movmi	r4, #3
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    2c24:	461a      	mov	r2, r3
    2c26:	a901      	add	r1, sp, #4
    2c28:	4628      	mov	r0, r5
	nrfx_gpiote_input_config_t input_config = {
    2c2a:	f88d 4004 	strb.w	r4, [sp, #4]
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    2c2e:	f001 fbb9 	bl	43a4 <nrfx_gpiote_input_configure>
    2c32:	e7e0      	b.n	2bf6 <gpio_nrfx_pin_configure+0xe6>
    2c34:	0bad0000 	.word	0x0bad0000

00002c38 <i2c_nrfx_twi_recover_bus>:

	return 0;
}

static int i2c_nrfx_twi_recover_bus(const struct device *dev)
{
    2c38:	b508      	push	{r3, lr}
	const struct i2c_nrfx_twi_config *config = dev->config;
	uint32_t scl_pin;
	uint32_t sda_pin;
	nrfx_err_t err;

	scl_pin = nrf_twi_scl_pin_get(config->twi.p_twi);
    2c3a:	6843      	ldr	r3, [r0, #4]
    2c3c:	681b      	ldr	r3, [r3, #0]
}

NRF_STATIC_INLINE uint32_t nrf_twi_scl_pin_get(NRF_TWI_Type const * p_reg)
{
#if defined(TWI_PSEL_SCL_CONNECT_Pos)
    return p_reg->PSEL.SCL;
    2c3e:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
}

NRF_STATIC_INLINE uint32_t nrf_twi_sda_pin_get(NRF_TWI_Type const * p_reg)
{
#if defined(TWI_PSEL_SDA_CONNECT_Pos)
    return p_reg->PSEL.SDA;
    2c42:	f8d3 150c 	ldr.w	r1, [r3, #1292]	; 0x50c
NRFX_STATIC_INLINE nrfx_err_t nrfx_twi_bus_recover(uint32_t scl_pin, uint32_t sda_pin);

#ifndef NRFX_DECLARE_ONLY
NRFX_STATIC_INLINE nrfx_err_t nrfx_twi_bus_recover(uint32_t scl_pin, uint32_t sda_pin)
{
    return nrfx_twi_twim_bus_recover(scl_pin, sda_pin);
    2c46:	f002 fc6d 	bl	5524 <nrfx_twi_twim_bus_recover>
	sda_pin = nrf_twi_sda_pin_get(config->twi.p_twi);

	err = nrfx_twi_bus_recover(scl_pin, sda_pin);
	return (err == NRFX_SUCCESS ? 0 : -EBUSY);
    2c4a:	4b03      	ldr	r3, [pc, #12]	; (2c58 <i2c_nrfx_twi_recover_bus+0x20>)
    2c4c:	4298      	cmp	r0, r3
}
    2c4e:	bf14      	ite	ne
    2c50:	f06f 000f 	mvnne.w	r0, #15
    2c54:	2000      	moveq	r0, #0
    2c56:	bd08      	pop	{r3, pc}
    2c58:	0bad0000 	.word	0x0bad0000

00002c5c <twi_0_init>:
		      POST_KERNEL,					       \
		      CONFIG_I2C_INIT_PRIORITY,				       \
		      &i2c_nrfx_twi_driver_api)

#ifdef CONFIG_I2C_0_NRF_TWI
I2C_NRFX_TWI_DEVICE(0);
    2c5c:	b537      	push	{r0, r1, r2, r4, r5, lr}
    2c5e:	4604      	mov	r4, r0
    2c60:	2200      	movs	r2, #0
    2c62:	2101      	movs	r1, #1
    2c64:	2003      	movs	r0, #3
    2c66:	f7fe fe9f 	bl	19a8 <z_arm_irq_priority_set>
    2c6a:	6863      	ldr	r3, [r4, #4]
    2c6c:	699d      	ldr	r5, [r3, #24]
				      uint8_t id)
{
	int ret;
	const struct pinctrl_state *state;

	ret = pinctrl_lookup_state(config, id, &state);
    2c6e:	aa01      	add	r2, sp, #4
    2c70:	2100      	movs	r1, #0
    2c72:	4628      	mov	r0, r5
    2c74:	f004 fbca 	bl	740c <pinctrl_lookup_state>
	if (ret < 0) {
    2c78:	2800      	cmp	r0, #0
    2c7a:	db14      	blt.n	2ca6 <twi_0_init+0x4a>
		return ret;
	}

	return pinctrl_apply_state_direct(config, state);
    2c7c:	9b01      	ldr	r3, [sp, #4]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
    2c7e:	682a      	ldr	r2, [r5, #0]
    2c80:	7919      	ldrb	r1, [r3, #4]
    2c82:	6818      	ldr	r0, [r3, #0]
    2c84:	f000 f8b0 	bl	2de8 <pinctrl_configure_pins>
    2c88:	2800      	cmp	r0, #0
    2c8a:	db0c      	blt.n	2ca6 <twi_0_init+0x4a>
	const struct i2c_nrfx_twi_config *config = dev->config;
    2c8c:	6860      	ldr	r0, [r4, #4]
	nrfx_err_t result = nrfx_twi_init(&config->twi, &config->config,
    2c8e:	6923      	ldr	r3, [r4, #16]
    2c90:	4a06      	ldr	r2, [pc, #24]	; (2cac <twi_0_init+0x50>)
    2c92:	f100 0108 	add.w	r1, r0, #8
    2c96:	f002 fb33 	bl	5300 <nrfx_twi_init>
	if (result != NRFX_SUCCESS) {
    2c9a:	4b05      	ldr	r3, [pc, #20]	; (2cb0 <twi_0_init+0x54>)
	return 0;
    2c9c:	4298      	cmp	r0, r3
    2c9e:	bf14      	ite	ne
    2ca0:	f06f 000f 	mvnne.w	r0, #15
    2ca4:	2000      	moveq	r0, #0
I2C_NRFX_TWI_DEVICE(0);
    2ca6:	b003      	add	sp, #12
    2ca8:	bd30      	pop	{r4, r5, pc}
    2caa:	bf00      	nop
    2cac:	00002cb5 	.word	0x00002cb5
    2cb0:	0bad0000 	.word	0x0bad0000

00002cb4 <event_handler>:
	switch (p_event->type) {
    2cb4:	7803      	ldrb	r3, [r0, #0]
    2cb6:	2b01      	cmp	r3, #1
    2cb8:	d008      	beq.n	2ccc <event_handler+0x18>
    2cba:	2b02      	cmp	r3, #2
    2cbc:	d008      	beq.n	2cd0 <event_handler+0x1c>
    2cbe:	b94b      	cbnz	r3, 2cd4 <event_handler+0x20>
		dev_data->res = NRFX_SUCCESS;
    2cc0:	4b05      	ldr	r3, [pc, #20]	; (2cd8 <event_handler+0x24>)
		dev_data->res = NRFX_ERROR_INTERNAL;
    2cc2:	620b      	str	r3, [r1, #32]
	z_impl_k_sem_give(sem);
    2cc4:	f101 0010 	add.w	r0, r1, #16
    2cc8:	f002 bfb0 	b.w	5c2c <z_impl_k_sem_give>
		dev_data->res = NRFX_ERROR_DRV_TWI_ERR_ANACK;
    2ccc:	4b03      	ldr	r3, [pc, #12]	; (2cdc <event_handler+0x28>)
    2cce:	e7f8      	b.n	2cc2 <event_handler+0xe>
		dev_data->res = NRFX_ERROR_DRV_TWI_ERR_DNACK;
    2cd0:	4b03      	ldr	r3, [pc, #12]	; (2ce0 <event_handler+0x2c>)
    2cd2:	e7f6      	b.n	2cc2 <event_handler+0xe>
		dev_data->res = NRFX_ERROR_INTERNAL;
    2cd4:	4b03      	ldr	r3, [pc, #12]	; (2ce4 <event_handler+0x30>)
    2cd6:	e7f4      	b.n	2cc2 <event_handler+0xe>
    2cd8:	0bad0000 	.word	0x0bad0000
    2cdc:	0bae0001 	.word	0x0bae0001
    2ce0:	0bae0002 	.word	0x0bae0002
    2ce4:	0bad0001 	.word	0x0bad0001

00002ce8 <i2c_nrfx_twi_transfer>:
{
    2ce8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2cec:	b08b      	sub	sp, #44	; 0x2c
    2cee:	4605      	mov	r5, r0
    2cf0:	460c      	mov	r4, r1
    2cf2:	4690      	mov	r8, r2
    2cf4:	9301      	str	r3, [sp, #4]
	const struct i2c_nrfx_twi_config *config = dev->config;
    2cf6:	6847      	ldr	r7, [r0, #4]
	struct i2c_nrfx_twi_data *data = dev->data;
    2cf8:	6906      	ldr	r6, [r0, #16]
	return z_impl_k_sem_take(sem, timeout);
    2cfa:	f04f 32ff 	mov.w	r2, #4294967295
    2cfe:	f04f 33ff 	mov.w	r3, #4294967295
    2d02:	4630      	mov	r0, r6
    2d04:	f002 ffb2 	bl	5c6c <z_impl_k_sem_take>
	k_sem_take(&data->completion_sync, K_NO_WAIT);
    2d08:	f106 0a10 	add.w	sl, r6, #16
    2d0c:	2200      	movs	r2, #0
    2d0e:	2300      	movs	r3, #0
    2d10:	4650      	mov	r0, sl
    2d12:	f002 ffab 	bl	5c6c <z_impl_k_sem_take>
	nrfx_twi_enable(&config->twi);
    2d16:	4638      	mov	r0, r7
    2d18:	f002 fb54 	bl	53c4 <nrfx_twi_enable>
		if (res != NRFX_SUCCESS) {
    2d1c:	f8df b0c4 	ldr.w	fp, [pc, #196]	; 2de4 <i2c_nrfx_twi_transfer+0xfc>
	for (size_t i = 0; i < num_msgs; i++) {
    2d20:	f04f 0900 	mov.w	r9, #0
    2d24:	45c1      	cmp	r9, r8
    2d26:	d301      	bcc.n	2d2c <i2c_nrfx_twi_transfer+0x44>
    2d28:	2400      	movs	r4, #0
    2d2a:	e02e      	b.n	2d8a <i2c_nrfx_twi_transfer+0xa2>
		if (I2C_MSG_ADDR_10_BITS & msgs[i].flags) {
    2d2c:	7a23      	ldrb	r3, [r4, #8]
    2d2e:	9303      	str	r3, [sp, #12]
    2d30:	f013 0108 	ands.w	r1, r3, #8
    2d34:	d14d      	bne.n	2dd2 <i2c_nrfx_twi_transfer+0xea>
		nrfx_twi_xfer_desc_t cur_xfer = {
    2d36:	2212      	movs	r2, #18
    2d38:	f10d 0016 	add.w	r0, sp, #22
    2d3c:	9102      	str	r1, [sp, #8]
    2d3e:	f004 f9ca 	bl	70d6 <memset>
					  NRFX_TWI_XFER_RX : NRFX_TWI_XFER_TX
    2d42:	9b03      	ldr	r3, [sp, #12]
		nrfx_twi_xfer_desc_t cur_xfer = {
    2d44:	6860      	ldr	r0, [r4, #4]
    2d46:	9901      	ldr	r1, [sp, #4]
    2d48:	9006      	str	r0, [sp, #24]
					  NRFX_TWI_XFER_RX : NRFX_TWI_XFER_TX
    2d4a:	f003 0201 	and.w	r2, r3, #1
		nrfx_twi_xfer_desc_t cur_xfer = {
    2d4e:	6820      	ldr	r0, [r4, #0]
    2d50:	f88d 1015 	strb.w	r1, [sp, #21]
		if (!(msgs[i].flags & I2C_MSG_STOP)) {
    2d54:	f013 0f02 	tst.w	r3, #2
    2d58:	9902      	ldr	r1, [sp, #8]
		nrfx_twi_xfer_desc_t cur_xfer = {
    2d5a:	f88d 2014 	strb.w	r2, [sp, #20]
    2d5e:	9008      	str	r0, [sp, #32]
		if (!(msgs[i].flags & I2C_MSG_STOP)) {
    2d60:	d11d      	bne.n	2d9e <i2c_nrfx_twi_transfer+0xb6>
			if ((i < (num_msgs - 1)) &&
    2d62:	f108 33ff 	add.w	r3, r8, #4294967295
    2d66:	454b      	cmp	r3, r9
    2d68:	d902      	bls.n	2d70 <i2c_nrfx_twi_transfer+0x88>
    2d6a:	7d23      	ldrb	r3, [r4, #20]
    2d6c:	075b      	lsls	r3, r3, #29
    2d6e:	d518      	bpl.n	2da2 <i2c_nrfx_twi_transfer+0xba>
			} else if (msgs[i].flags & I2C_MSG_READ) {
    2d70:	bb7a      	cbnz	r2, 2dd2 <i2c_nrfx_twi_transfer+0xea>
				xfer_flags |= NRFX_TWI_FLAG_TX_NO_STOP;
    2d72:	2220      	movs	r2, #32
		res = nrfx_twi_xfer(&config->twi, &cur_xfer, xfer_flags);
    2d74:	a905      	add	r1, sp, #20
    2d76:	4638      	mov	r0, r7
    2d78:	f002 fb50 	bl	541c <nrfx_twi_xfer>
		if (res != NRFX_SUCCESS) {
    2d7c:	4558      	cmp	r0, fp
    2d7e:	d012      	beq.n	2da6 <i2c_nrfx_twi_transfer+0xbe>
			if (res == NRFX_ERROR_BUSY) {
    2d80:	4b17      	ldr	r3, [pc, #92]	; (2de0 <i2c_nrfx_twi_transfer+0xf8>)
    2d82:	4298      	cmp	r0, r3
    2d84:	d028      	beq.n	2dd8 <i2c_nrfx_twi_transfer+0xf0>
				ret = -EIO;
    2d86:	f06f 0404 	mvn.w	r4, #4
	nrfx_twi_disable(&config->twi);
    2d8a:	4638      	mov	r0, r7
    2d8c:	f002 fb2a 	bl	53e4 <nrfx_twi_disable>
	z_impl_k_sem_give(sem);
    2d90:	4630      	mov	r0, r6
    2d92:	f002 ff4b 	bl	5c2c <z_impl_k_sem_give>
}
    2d96:	4620      	mov	r0, r4
    2d98:	b00b      	add	sp, #44	; 0x2c
    2d9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		uint32_t xfer_flags = 0;
    2d9e:	460a      	mov	r2, r1
    2da0:	e7e8      	b.n	2d74 <i2c_nrfx_twi_transfer+0x8c>
				xfer_flags |= NRFX_TWI_FLAG_SUSPEND;
    2da2:	2240      	movs	r2, #64	; 0x40
    2da4:	e7e6      	b.n	2d74 <i2c_nrfx_twi_transfer+0x8c>
	return z_impl_k_sem_take(sem, timeout);
    2da6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    2daa:	2300      	movs	r3, #0
    2dac:	4650      	mov	r0, sl
    2dae:	f002 ff5d 	bl	5c6c <z_impl_k_sem_take>
		if (ret != 0) {
    2db2:	b130      	cbz	r0, 2dc2 <i2c_nrfx_twi_transfer+0xda>
			nrfx_twi_disable(&config->twi);
    2db4:	4638      	mov	r0, r7
    2db6:	f002 fb15 	bl	53e4 <nrfx_twi_disable>
			(void)i2c_nrfx_twi_recover_bus(dev);
    2dba:	4628      	mov	r0, r5
    2dbc:	f7ff ff3c 	bl	2c38 <i2c_nrfx_twi_recover_bus>
			break;
    2dc0:	e7e1      	b.n	2d86 <i2c_nrfx_twi_transfer+0x9e>
		res = data->res;
    2dc2:	6a33      	ldr	r3, [r6, #32]
		if (res != NRFX_SUCCESS) {
    2dc4:	455b      	cmp	r3, fp
    2dc6:	f104 040c 	add.w	r4, r4, #12
    2dca:	d1dc      	bne.n	2d86 <i2c_nrfx_twi_transfer+0x9e>
	for (size_t i = 0; i < num_msgs; i++) {
    2dcc:	f109 0901 	add.w	r9, r9, #1
    2dd0:	e7a8      	b.n	2d24 <i2c_nrfx_twi_transfer+0x3c>
			ret = -ENOTSUP;
    2dd2:	f06f 0485 	mvn.w	r4, #133	; 0x85
    2dd6:	e7d8      	b.n	2d8a <i2c_nrfx_twi_transfer+0xa2>
				ret = -EBUSY;
    2dd8:	f06f 040f 	mvn.w	r4, #15
    2ddc:	e7d5      	b.n	2d8a <i2c_nrfx_twi_transfer+0xa2>
    2dde:	bf00      	nop
    2de0:	0bad000b 	.word	0x0bad000b
    2de4:	0bad0000 	.word	0x0bad0000

00002de8 <pinctrl_configure_pins>:
#define NRF_PSEL_QSPI(reg, line) ((NRF_QSPI_Type *)reg)->PSEL.line
#endif

int pinctrl_configure_pins(const pinctrl_soc_pin_t *pins, uint8_t pin_cnt,
			   uintptr_t reg)
{
    2de8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        case 1: return NRF_P1;
    2dec:	4e5a      	ldr	r6, [pc, #360]	; (2f58 <pinctrl_configure_pins+0x170>)
    2dee:	eb00 0181 	add.w	r1, r0, r1, lsl #2
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    2df2:	2701      	movs	r7, #1
	for (uint8_t i = 0U; i < pin_cnt; i++) {
    2df4:	4281      	cmp	r1, r0
    2df6:	d102      	bne.n	2dfe <pinctrl_configure_pins+0x16>
			nrf_gpio_cfg(pin, dir, input, NRF_GET_PULL(pins[i]),
				     drive, NRF_GPIO_PIN_NOSENSE);
		}
	}

	return 0;
    2df8:	2000      	movs	r0, #0
}
    2dfa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		nrf_gpio_pin_drive_t drive = NRF_GET_DRIVE(pins[i]);
    2dfe:	6804      	ldr	r4, [r0, #0]
		uint32_t pin = NRF_GET_PIN(pins[i]);
    2e00:	f004 037f 	and.w	r3, r4, #127	; 0x7f
		nrf_gpio_pin_drive_t drive = NRF_GET_DRIVE(pins[i]);
    2e04:	f3c4 2543 	ubfx	r5, r4, #9, #4
			pin = 0xFFFFFFFFU;
    2e08:	2b7f      	cmp	r3, #127	; 0x7f
		switch (NRF_GET_FUN(pins[i])) {
    2e0a:	ea4f 4414 	mov.w	r4, r4, lsr #16
			pin = 0xFFFFFFFFU;
    2e0e:	bf08      	it	eq
    2e10:	f04f 33ff 	moveq.w	r3, #4294967295
		switch (NRF_GET_FUN(pins[i])) {
    2e14:	2c22      	cmp	r4, #34	; 0x22
    2e16:	f200 809b 	bhi.w	2f50 <pinctrl_configure_pins+0x168>
    2e1a:	e8df f004 	tbb	[pc, r4]
    2e1e:	2412      	.short	0x2412
    2e20:	402c4429 	.word	0x402c4429
    2e24:	99999944 	.word	0x99999944
    2e28:	99704799 	.word	0x99704799
    2e2c:	99999999 	.word	0x99999999
    2e30:	99999999 	.word	0x99999999
    2e34:	817e7b73 	.word	0x817e7b73
    2e38:	84999999 	.word	0x84999999
    2e3c:	93908d8a 	.word	0x93908d8a
    2e40:	96          	.byte	0x96
    2e41:	00          	.byte	0x00
			NRF_PSEL_UART(reg, TXD) = pin;
    2e42:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
    return pin_number >> 5;
    2e46:	ea4f 1c53 	mov.w	ip, r3, lsr #5
        case 1: return NRF_P1;
    2e4a:	f1bc 0f01 	cmp.w	ip, #1
    *p_pin = pin_number & 0x1F;
    2e4e:	f003 041f 	and.w	r4, r3, #31
        case 1: return NRF_P1;
    2e52:	bf14      	ite	ne
    2e54:	f04f 4ca0 	movne.w	ip, #1342177280	; 0x50000000
    2e58:	46b4      	moveq	ip, r6
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    2e5a:	fa07 f404 	lsl.w	r4, r7, r4
    p_reg->OUTSET = set_mask;
    2e5e:	f8cc 4508 	str.w	r4, [ip, #1288]	; 0x508
    2e62:	2401      	movs	r4, #1
    2e64:	e002      	b.n	2e6c <pinctrl_configure_pins+0x84>
			NRF_PSEL_UART(reg, RXD) = pin;
    2e66:	f8c2 3514 	str.w	r3, [r2, #1300]	; 0x514
			input = NRF_GPIO_PIN_INPUT_CONNECT;
    2e6a:	2400      	movs	r4, #0
    2e6c:	46a6      	mov	lr, r4
    2e6e:	e024      	b.n	2eba <pinctrl_configure_pins+0xd2>
			NRF_PSEL_UART(reg, RTS) = pin;
    2e70:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
			if (write != NO_WRITE) {
    2e74:	e7e7      	b.n	2e46 <pinctrl_configure_pins+0x5e>
			NRF_PSEL_SPIM(reg, SCK) = pin;
    2e76:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
			input = NRF_GPIO_PIN_INPUT_CONNECT;
    2e7a:	2400      	movs	r4, #0
    return pin_number >> 5;
    2e7c:	ea4f 1e53 	mov.w	lr, r3, lsr #5
        case 1: return NRF_P1;
    2e80:	f1be 0f01 	cmp.w	lr, #1
    2e84:	bf14      	ite	ne
    2e86:	f04f 4ea0 	movne.w	lr, #1342177280	; 0x50000000
    2e8a:	46b6      	moveq	lr, r6
    *p_pin = pin_number & 0x1F;
    2e8c:	f003 0c1f 	and.w	ip, r3, #31
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    2e90:	fa07 fc0c 	lsl.w	ip, r7, ip
    p_reg->OUTCLR = clr_mask;
    2e94:	f8ce c50c 	str.w	ip, [lr, #1292]	; 0x50c
    2e98:	f04f 0e01 	mov.w	lr, #1
    2e9c:	e00d      	b.n	2eba <pinctrl_configure_pins+0xd2>
			NRF_PSEL_SPIM(reg, MOSI) = pin;
    2e9e:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
			pin = 0xFFFFFFFFU;
    2ea2:	2401      	movs	r4, #1
    2ea4:	e7ea      	b.n	2e7c <pinctrl_configure_pins+0x94>
			NRF_PSEL_SPIM(reg, MISO) = pin;
    2ea6:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
			if (write != NO_WRITE) {
    2eaa:	e7de      	b.n	2e6a <pinctrl_configure_pins+0x82>
			NRF_PSEL_TWIM(reg, SCL) = pin;
    2eac:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
			if (drive == NRF_DRIVE_S0S1) {
    2eb0:	2d00      	cmp	r5, #0
    2eb2:	d1da      	bne.n	2e6a <pinctrl_configure_pins+0x82>
			input = NRF_GPIO_PIN_INPUT_CONNECT;
    2eb4:	2400      	movs	r4, #0
			dir = NRF_GPIO_PIN_DIR_INPUT;
    2eb6:	46a6      	mov	lr, r4
				drive = NRF_DRIVE_S0D1;
    2eb8:	2506      	movs	r5, #6
			if (NRF_GET_LP(pins[i]) == NRF_LP_ENABLE) {
    2eba:	f850 cb04 	ldr.w	ip, [r0], #4
    2ebe:	f40c 5800 	and.w	r8, ip, #8192	; 0x2000
				input = NRF_GPIO_PIN_INPUT_DISCONNECT;
    2ec2:	f1b8 0f00 	cmp.w	r8, #0
           ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos) |
    2ec6:	ea4f 2505 	mov.w	r5, r5, lsl #8
			nrf_gpio_cfg(pin, dir, input, NRF_GET_PULL(pins[i]),
    2eca:	f3cc 18c1 	ubfx	r8, ip, #7, #2
    *p_pin = pin_number & 0x1F;
    2ece:	f003 0c1f 	and.w	ip, r3, #31
    return pin_number >> 5;
    2ed2:	ea4f 1353 	mov.w	r3, r3, lsr #5
				input = NRF_GPIO_PIN_INPUT_DISCONNECT;
    2ed6:	bf1c      	itt	ne
    2ed8:	2401      	movne	r4, #1
    2eda:	f04f 0e00 	movne.w	lr, #0
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    2ede:	ea45 0588 	orr.w	r5, r5, r8, lsl #2
        case 0: return NRF_P0;
    2ee2:	2b01      	cmp	r3, #1
    2ee4:	bf0c      	ite	eq
    2ee6:	4633      	moveq	r3, r6
    2ee8:	f04f 43a0 	movne.w	r3, #1342177280	; 0x50000000
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    2eec:	ea45 050e 	orr.w	r5, r5, lr
    reg->PIN_CNF[pin_number] = cnf;
    2ef0:	f50c 7ce0 	add.w	ip, ip, #448	; 0x1c0
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    2ef4:	ea45 0544 	orr.w	r5, r5, r4, lsl #1
    reg->PIN_CNF[pin_number] = cnf;
    2ef8:	f843 502c 	str.w	r5, [r3, ip, lsl #2]
	for (uint8_t i = 0U; i < pin_cnt; i++) {
    2efc:	e77a      	b.n	2df4 <pinctrl_configure_pins+0xc>
			NRF_PSEL_TWIM(reg, SDA) = pin;
    2efe:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
			if (drive == NRF_DRIVE_S0S1) {
    2f02:	e7d5      	b.n	2eb0 <pinctrl_configure_pins+0xc8>
			NRF_PSEL_PWM(reg, OUT[0]) = pin;
    2f04:	f8c2 3560 	str.w	r3, [r2, #1376]	; 0x560
			write = NRF_GET_INVERT(pins[i]);
    2f08:	6804      	ldr	r4, [r0, #0]
    2f0a:	f3c4 3480 	ubfx	r4, r4, #14, #1
    if (value == 0)
    2f0e:	2c00      	cmp	r4, #0
    2f10:	d0c7      	beq.n	2ea2 <pinctrl_configure_pins+0xba>
    2f12:	e798      	b.n	2e46 <pinctrl_configure_pins+0x5e>
			NRF_PSEL_PWM(reg, OUT[1]) = pin;
    2f14:	f8c2 3564 	str.w	r3, [r2, #1380]	; 0x564
			write = NRF_GET_INVERT(pins[i]);
    2f18:	e7f6      	b.n	2f08 <pinctrl_configure_pins+0x120>
			NRF_PSEL_PWM(reg, OUT[2]) = pin;
    2f1a:	f8c2 3568 	str.w	r3, [r2, #1384]	; 0x568
			write = NRF_GET_INVERT(pins[i]);
    2f1e:	e7f3      	b.n	2f08 <pinctrl_configure_pins+0x120>
			NRF_PSEL_PWM(reg, OUT[3]) = pin;
    2f20:	f8c2 356c 	str.w	r3, [r2, #1388]	; 0x56c
    2f24:	e7f0      	b.n	2f08 <pinctrl_configure_pins+0x120>
			NRF_PSEL_QSPI(reg, SCK) = pin;
    2f26:	f8c2 3524 	str.w	r3, [r2, #1316]	; 0x524
			input = NRF_GPIO_PIN_INPUT_DISCONNECT;
    2f2a:	2401      	movs	r4, #1
			dir = NRF_GPIO_PIN_DIR_INPUT;
    2f2c:	f04f 0e00 	mov.w	lr, #0
    2f30:	e7c3      	b.n	2eba <pinctrl_configure_pins+0xd2>
			NRF_PSEL_QSPI(reg, CSN) = pin;
    2f32:	f8c2 3528 	str.w	r3, [r2, #1320]	; 0x528
    2f36:	e786      	b.n	2e46 <pinctrl_configure_pins+0x5e>
			NRF_PSEL_QSPI(reg, IO0) = pin;
    2f38:	f8c2 3530 	str.w	r3, [r2, #1328]	; 0x530
			if (write != NO_WRITE) {
    2f3c:	e7f5      	b.n	2f2a <pinctrl_configure_pins+0x142>
			NRF_PSEL_QSPI(reg, IO1) = pin;
    2f3e:	f8c2 3534 	str.w	r3, [r2, #1332]	; 0x534
    2f42:	e7f2      	b.n	2f2a <pinctrl_configure_pins+0x142>
			NRF_PSEL_QSPI(reg, IO2) = pin;
    2f44:	f8c2 3538 	str.w	r3, [r2, #1336]	; 0x538
			if (write != NO_WRITE) {
    2f48:	e7ef      	b.n	2f2a <pinctrl_configure_pins+0x142>
			NRF_PSEL_QSPI(reg, IO3) = pin;
    2f4a:	f8c2 353c 	str.w	r3, [r2, #1340]	; 0x53c
			if (write != NO_WRITE) {
    2f4e:	e7ec      	b.n	2f2a <pinctrl_configure_pins+0x142>
		switch (NRF_GET_FUN(pins[i])) {
    2f50:	f06f 0085 	mvn.w	r0, #133	; 0x85
    2f54:	e751      	b.n	2dfa <pinctrl_configure_pins+0x12>
    2f56:	bf00      	nop
    2f58:	50000300 	.word	0x50000300

00002f5c <hfclk_on_callback>:
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)task);
}

NRF_STATIC_INLINE void nrf_temp_task_trigger(NRF_TEMP_Type * p_reg, nrf_temp_task_t task)
{
    *(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task) = 1;
    2f5c:	4b01      	ldr	r3, [pc, #4]	; (2f64 <hfclk_on_callback+0x8>)
    2f5e:	2201      	movs	r2, #1
    2f60:	601a      	str	r2, [r3, #0]
			      struct onoff_client *cli,
			      uint32_t state,
			      int res)
{
	nrf_temp_task_trigger(NRF_TEMP, NRF_TEMP_TASK_START);
}
    2f62:	4770      	bx	lr
    2f64:	4000c000 	.word	0x4000c000

00002f68 <temp_nrf5_channel_get>:
{
	struct temp_nrf5_data *data = dev->data;
	int32_t uval;


	if (chan != SENSOR_CHAN_DIE_TEMP) {
    2f68:	290c      	cmp	r1, #12
	struct temp_nrf5_data *data = dev->data;
    2f6a:	6903      	ldr	r3, [r0, #16]
	if (chan != SENSOR_CHAN_DIE_TEMP) {
    2f6c:	d10b      	bne.n	2f86 <temp_nrf5_channel_get+0x1e>
		return -ENOTSUP;
	}

	uval = data->sample * TEMP_NRF5_TEMP_SCALE;
    2f6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    2f70:	4906      	ldr	r1, [pc, #24]	; (2f8c <temp_nrf5_channel_get+0x24>)
	val->val1 = uval / 1000000;
    2f72:	4807      	ldr	r0, [pc, #28]	; (2f90 <temp_nrf5_channel_get+0x28>)
	uval = data->sample * TEMP_NRF5_TEMP_SCALE;
    2f74:	434b      	muls	r3, r1
	val->val1 = uval / 1000000;
    2f76:	fb93 f1f0 	sdiv	r1, r3, r0
	val->val2 = uval % 1000000;
    2f7a:	fb00 3311 	mls	r3, r0, r1, r3
	val->val1 = uval / 1000000;
    2f7e:	6011      	str	r1, [r2, #0]
	val->val2 = uval % 1000000;
    2f80:	6053      	str	r3, [r2, #4]

	LOG_DBG("Temperature:%d,%d", val->val1, val->val2);

	return 0;
    2f82:	2000      	movs	r0, #0
    2f84:	4770      	bx	lr
		return -ENOTSUP;
    2f86:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
    2f8a:	4770      	bx	lr
    2f8c:	0003d090 	.word	0x0003d090
    2f90:	000f4240 	.word	0x000f4240

00002f94 <temp_nrf5_isr>:
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)event);
}

NRF_STATIC_INLINE void nrf_temp_event_clear(NRF_TEMP_Type * p_reg, nrf_temp_event_t event)
{
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    2f94:	4b04      	ldr	r3, [pc, #16]	; (2fa8 <temp_nrf5_isr+0x14>)

static void temp_nrf5_isr(const void *arg)
{
	const struct device *dev = (const struct device *)arg;
	struct temp_nrf5_data *data = dev->data;
    2f96:	6900      	ldr	r0, [r0, #16]
    2f98:	2200      	movs	r2, #0
    2f9a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    2f9e:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
	z_impl_k_sem_give(sem);
    2fa2:	f002 be43 	b.w	5c2c <z_impl_k_sem_give>
    2fa6:	bf00      	nop
    2fa8:	4000c000 	.word	0x4000c000

00002fac <temp_nrf5_sample_fetch>:
{
    2fac:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	struct temp_nrf5_data *data = dev->data;
    2fae:	6905      	ldr	r5, [r0, #16]
	if (data->clk_mgr == NULL) {
    2fb0:	6aab      	ldr	r3, [r5, #40]	; 0x28
    2fb2:	b363      	cbz	r3, 300e <temp_nrf5_sample_fetch+0x62>
	if (chan != SENSOR_CHAN_ALL && chan != SENSOR_CHAN_DIE_TEMP) {
    2fb4:	2939      	cmp	r1, #57	; 0x39
    2fb6:	d001      	beq.n	2fbc <temp_nrf5_sample_fetch+0x10>
    2fb8:	290c      	cmp	r1, #12
    2fba:	d12b      	bne.n	3014 <temp_nrf5_sample_fetch+0x68>
	k_mutex_lock(&data->mutex, K_FOREVER);
    2fbc:	f105 0610 	add.w	r6, r5, #16
	return z_impl_k_mutex_lock(mutex, timeout);
    2fc0:	f04f 32ff 	mov.w	r2, #4294967295
    2fc4:	f04f 33ff 	mov.w	r3, #4294967295
    2fc8:	4630      	mov	r0, r6
    2fca:	f002 fd79 	bl	5ac0 <z_impl_k_mutex_lock>
					      sys_notify_generic_callback handler)
{
	__ASSERT_NO_MSG(notify != NULL);
	__ASSERT_NO_MSG(handler != NULL);

	*notify = (struct sys_notify){
    2fce:	4b13      	ldr	r3, [pc, #76]	; (301c <temp_nrf5_sample_fetch+0x70>)
    2fd0:	9301      	str	r3, [sp, #4]
	r = onoff_request(data->clk_mgr, &cli);
    2fd2:	6aa8      	ldr	r0, [r5, #40]	; 0x28
    2fd4:	2303      	movs	r3, #3
    2fd6:	2400      	movs	r4, #0
    2fd8:	4669      	mov	r1, sp
    2fda:	9403      	str	r4, [sp, #12]
    2fdc:	9302      	str	r3, [sp, #8]
    2fde:	f003 ff18 	bl	6e12 <onoff_request>
	return z_impl_k_sem_take(sem, timeout);
    2fe2:	f04f 32ff 	mov.w	r2, #4294967295
    2fe6:	f04f 33ff 	mov.w	r3, #4294967295
    2fea:	4628      	mov	r0, r5
    2fec:	f002 fe3e 	bl	5c6c <z_impl_k_sem_take>
	r = onoff_release(data->clk_mgr);
    2ff0:	6aa8      	ldr	r0, [r5, #40]	; 0x28
    2ff2:	f003 ff66 	bl	6ec2 <onoff_release>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
}

NRF_STATIC_INLINE int32_t nrf_temp_result_get(NRF_TEMP_Type const * p_reg)
{
    int32_t raw_measurement = p_reg->TEMP;
    2ff6:	4b0a      	ldr	r3, [pc, #40]	; (3020 <temp_nrf5_sample_fetch+0x74>)
    2ff8:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
	data->sample = nrf_temp_result_get(NRF_TEMP);
    2ffc:	626a      	str	r2, [r5, #36]	; 0x24
    *(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task) = 1;
    2ffe:	2201      	movs	r2, #1
    3000:	605a      	str	r2, [r3, #4]
	return z_impl_k_mutex_unlock(mutex);
    3002:	4630      	mov	r0, r6
    3004:	f002 fdd6 	bl	5bb4 <z_impl_k_mutex_unlock>
	return 0;
    3008:	4620      	mov	r0, r4
}
    300a:	b004      	add	sp, #16
    300c:	bd70      	pop	{r4, r5, r6, pc}
		return -EAGAIN;
    300e:	f06f 000a 	mvn.w	r0, #10
    3012:	e7fa      	b.n	300a <temp_nrf5_sample_fetch+0x5e>
		return -ENOTSUP;
    3014:	f06f 0085 	mvn.w	r0, #133	; 0x85
    3018:	e7f7      	b.n	300a <temp_nrf5_sample_fetch+0x5e>
    301a:	bf00      	nop
    301c:	00002f5d 	.word	0x00002f5d
    3020:	4000c000 	.word	0x4000c000

00003024 <temp_nrf5_init>:
	.sample_fetch = temp_nrf5_sample_fetch,
	.channel_get = temp_nrf5_channel_get,
};

static int temp_nrf5_init(const struct device *dev)
{
    3024:	b510      	push	{r4, lr}
	struct temp_nrf5_data *data = dev->data;
    3026:	6904      	ldr	r4, [r0, #16]

	/* A null clk_mgr indicates sensor has not been initialized */
	data->clk_mgr =
		z_nrf_clock_control_get_onoff(CLOCK_CONTROL_NRF_SUBSYS_HF);
    3028:	2000      	movs	r0, #0
    302a:	f7ff fc07 	bl	283c <z_nrf_clock_control_get_onoff>
	data->clk_mgr =
    302e:	62a0      	str	r0, [r4, #40]	; 0x28
	return z_impl_k_sem_init(sem, initial_count, limit);
    3030:	f04f 32ff 	mov.w	r2, #4294967295
    3034:	2100      	movs	r1, #0
    3036:	4620      	mov	r0, r4
    3038:	f005 f80b 	bl	8052 <z_impl_k_sem_init>
	return z_impl_k_mutex_init(mutex);
    303c:	f104 0010 	add.w	r0, r4, #16
    3040:	f005 f800 	bl	8044 <z_impl_k_mutex_init>
	__ASSERT_NO_MSG(data->clk_mgr);

	k_sem_init(&data->device_sync_sem, 0, K_SEM_MAX_LIMIT);
	k_mutex_init(&data->mutex);

	IRQ_CONNECT(
    3044:	2200      	movs	r2, #0
    3046:	2101      	movs	r1, #1
    3048:	200c      	movs	r0, #12
    304a:	f7fe fcad 	bl	19a8 <z_arm_irq_priority_set>
		DT_INST_IRQN(0),
		DT_INST_IRQ(0, priority),
		temp_nrf5_isr,
		DEVICE_DT_INST_GET(0),
		0);
	irq_enable(DT_INST_IRQN(0));
    304e:	200c      	movs	r0, #12
    3050:	f7fe fc7a 	bl	1948 <arch_irq_enable>
    p_reg->INTENSET = mask;
    3054:	4b02      	ldr	r3, [pc, #8]	; (3060 <temp_nrf5_init+0x3c>)
    3056:	2201      	movs	r2, #1
    3058:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

	nrf_temp_int_enable(NRF_TEMP, NRF_TEMP_INT_DATARDY_MASK);

	return 0;
}
    305c:	2000      	movs	r0, #0
    305e:	bd10      	pop	{r4, pc}
    3060:	4000c000 	.word	0x4000c000

00003064 <uarte_nrfx_configure>:
	return 0;
}

static int uarte_nrfx_configure(const struct device *dev,
				const struct uart_config *cfg)
{
    3064:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct uarte_nrfx_data *data = dev->data;
	nrf_uarte_config_t uarte_cfg;

#if defined(UARTE_CONFIG_STOP_Msk)
	switch (cfg->stop_bits) {
    3066:	794b      	ldrb	r3, [r1, #5]
    3068:	2b01      	cmp	r3, #1
    306a:	d026      	beq.n	30ba <uarte_nrfx_configure+0x56>
    306c:	2b03      	cmp	r3, #3
    306e:	d121      	bne.n	30b4 <uarte_nrfx_configure+0x50>
	case UART_CFG_STOP_BITS_1:
		uarte_cfg.stop = NRF_UARTE_STOP_ONE;
		break;
	case UART_CFG_STOP_BITS_2:
		uarte_cfg.stop = NRF_UARTE_STOP_TWO;
    3070:	2510      	movs	r5, #16
	if (cfg->stop_bits != UART_CFG_STOP_BITS_1) {
		return -ENOTSUP;
	}
#endif

	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
    3072:	798b      	ldrb	r3, [r1, #6]
    3074:	2b03      	cmp	r3, #3
    3076:	d11d      	bne.n	30b4 <uarte_nrfx_configure+0x50>
		return -ENOTSUP;
	}

	switch (cfg->flow_ctrl) {
    3078:	79ce      	ldrb	r6, [r1, #7]
    307a:	b10e      	cbz	r6, 3080 <uarte_nrfx_configure+0x1c>
    307c:	2e01      	cmp	r6, #1
    307e:	d119      	bne.n	30b4 <uarte_nrfx_configure+0x50>
	}

#if defined(UARTE_CONFIG_PARITYTYPE_Msk)
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
#endif
	switch (cfg->parity) {
    3080:	790a      	ldrb	r2, [r1, #4]
    3082:	b112      	cbz	r2, 308a <uarte_nrfx_configure+0x26>
    3084:	2a02      	cmp	r2, #2
    3086:	d115      	bne.n	30b4 <uarte_nrfx_configure+0x50>
	case UART_CFG_PARITY_NONE:
		uarte_cfg.parity = NRF_UARTE_PARITY_EXCLUDED;
		break;
	case UART_CFG_PARITY_EVEN:
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
    3088:	220e      	movs	r2, #14
#endif
	default:
		return -ENOTSUP;
	}

	if (baudrate_set(dev, cfg->baudrate) != 0) {
    308a:	680b      	ldr	r3, [r1, #0]
	return config->uarte_regs;
    308c:	6844      	ldr	r4, [r0, #4]
	switch (baudrate) {
    308e:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
	return config->uarte_regs;
    3092:	6827      	ldr	r7, [r4, #0]
	switch (baudrate) {
    3094:	d067      	beq.n	3166 <uarte_nrfx_configure+0x102>
    3096:	d82d      	bhi.n	30f4 <uarte_nrfx_configure+0x90>
    3098:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
    309c:	d066      	beq.n	316c <uarte_nrfx_configure+0x108>
    309e:	d816      	bhi.n	30ce <uarte_nrfx_configure+0x6a>
    30a0:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
    30a4:	d064      	beq.n	3170 <uarte_nrfx_configure+0x10c>
    30a6:	d80a      	bhi.n	30be <uarte_nrfx_configure+0x5a>
    30a8:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
    30ac:	d063      	beq.n	3176 <uarte_nrfx_configure+0x112>
    30ae:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
    30b2:	d063      	beq.n	317c <uarte_nrfx_configure+0x118>
		return -ENOTSUP;
    30b4:	f06f 0085 	mvn.w	r0, #133	; 0x85
    30b8:	e054      	b.n	3164 <uarte_nrfx_configure+0x100>
	switch (cfg->stop_bits) {
    30ba:	2500      	movs	r5, #0
    30bc:	e7d9      	b.n	3072 <uarte_nrfx_configure+0xe>
	switch (baudrate) {
    30be:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
    30c2:	d05e      	beq.n	3182 <uarte_nrfx_configure+0x11e>
    30c4:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
    30c8:	d1f4      	bne.n	30b4 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
    30ca:	4b38      	ldr	r3, [pc, #224]	; (31ac <uarte_nrfx_configure+0x148>)
    30cc:	e03c      	b.n	3148 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    30ce:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
    30d2:	d059      	beq.n	3188 <uarte_nrfx_configure+0x124>
    30d4:	d807      	bhi.n	30e6 <uarte_nrfx_configure+0x82>
    30d6:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
    30da:	d057      	beq.n	318c <uarte_nrfx_configure+0x128>
    30dc:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
    30e0:	d1e8      	bne.n	30b4 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
    30e2:	4b33      	ldr	r3, [pc, #204]	; (31b0 <uarte_nrfx_configure+0x14c>)
    30e4:	e030      	b.n	3148 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    30e6:	f647 2412 	movw	r4, #31250	; 0x7a12
    30ea:	42a3      	cmp	r3, r4
    30ec:	d1e2      	bne.n	30b4 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
    30ee:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
    30f2:	e029      	b.n	3148 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    30f4:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
    30f8:	d04a      	beq.n	3190 <uarte_nrfx_configure+0x12c>
    30fa:	d813      	bhi.n	3124 <uarte_nrfx_configure+0xc0>
    30fc:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
    3100:	d049      	beq.n	3196 <uarte_nrfx_configure+0x132>
    3102:	d809      	bhi.n	3118 <uarte_nrfx_configure+0xb4>
    3104:	f64d 24c0 	movw	r4, #56000	; 0xdac0
    3108:	42a3      	cmp	r3, r4
    310a:	d046      	beq.n	319a <uarte_nrfx_configure+0x136>
    310c:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
    3110:	d1d0      	bne.n	30b4 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
    3112:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
    3116:	e017      	b.n	3148 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    3118:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
    311c:	d1ca      	bne.n	30b4 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
    311e:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
    3122:	e011      	b.n	3148 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    3124:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
    3128:	d03a      	beq.n	31a0 <uarte_nrfx_configure+0x13c>
    312a:	d808      	bhi.n	313e <uarte_nrfx_configure+0xda>
    312c:	4c21      	ldr	r4, [pc, #132]	; (31b4 <uarte_nrfx_configure+0x150>)
    312e:	42a3      	cmp	r3, r4
    3130:	d039      	beq.n	31a6 <uarte_nrfx_configure+0x142>
    3132:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
    3136:	d1bd      	bne.n	30b4 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
    3138:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
    313c:	e004      	b.n	3148 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    313e:	4c1e      	ldr	r4, [pc, #120]	; (31b8 <uarte_nrfx_configure+0x154>)
    3140:	42a3      	cmp	r3, r4
    3142:	d1b7      	bne.n	30b4 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
    3144:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
	struct uarte_nrfx_data *data = dev->data;
    3148:	6904      	ldr	r4, [r0, #16]
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
    314a:	f8c7 3524 	str.w	r3, [r7, #1316]	; 0x524
	return config->uarte_regs;
    314e:	6843      	ldr	r3, [r0, #4]
                    | (uint32_t)p_cfg->hwfc;
    3150:	4335      	orrs	r5, r6
    3152:	681b      	ldr	r3, [r3, #0]
    3154:	432a      	orrs	r2, r5
    p_reg->CONFIG = (uint32_t)p_cfg->parity
    3156:	f8c3 256c 	str.w	r2, [r3, #1388]	; 0x56c
		return -ENOTSUP;
	}

	nrf_uarte_configure(get_uarte_instance(dev), &uarte_cfg);

	data->uart_config = *cfg;
    315a:	c903      	ldmia	r1, {r0, r1}
    315c:	1d23      	adds	r3, r4, #4
    315e:	e883 0003 	stmia.w	r3, {r0, r1}

	return 0;
    3162:	2000      	movs	r0, #0
}
    3164:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
    3166:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
    316a:	e7ed      	b.n	3148 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
    316c:	4b13      	ldr	r3, [pc, #76]	; (31bc <uarte_nrfx_configure+0x158>)
    316e:	e7eb      	b.n	3148 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
    3170:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
    3174:	e7e8      	b.n	3148 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = 0x00014000;
    3176:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
    317a:	e7e5      	b.n	3148 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    317c:	f44f 331c 	mov.w	r3, #159744	; 0x27000
    3180:	e7e2      	b.n	3148 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
    3182:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
    3186:	e7df      	b.n	3148 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
    3188:	4b0d      	ldr	r3, [pc, #52]	; (31c0 <uarte_nrfx_configure+0x15c>)
    318a:	e7dd      	b.n	3148 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
    318c:	4b0d      	ldr	r3, [pc, #52]	; (31c4 <uarte_nrfx_configure+0x160>)
    318e:	e7db      	b.n	3148 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
    3190:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
    3194:	e7d8      	b.n	3148 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
    3196:	4b0c      	ldr	r3, [pc, #48]	; (31c8 <uarte_nrfx_configure+0x164>)
    3198:	e7d6      	b.n	3148 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
    319a:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
    319e:	e7d3      	b.n	3148 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
    31a0:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
    31a4:	e7d0      	b.n	3148 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
    31a6:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
    31aa:	e7cd      	b.n	3148 <uarte_nrfx_configure+0xe4>
    31ac:	0013b000 	.word	0x0013b000
    31b0:	004ea000 	.word	0x004ea000
    31b4:	0003d090 	.word	0x0003d090
    31b8:	000f4240 	.word	0x000f4240
    31bc:	00275000 	.word	0x00275000
    31c0:	0075c000 	.word	0x0075c000
    31c4:	003af000 	.word	0x003af000
    31c8:	013a9000 	.word	0x013a9000

000031cc <uarte_0_init>:
		(__attribute__((__section__(LINKER_DT_NODE_REGION_NAME(	       \
			DT_PHANDLE(UARTE(idx), memory_regions)))))),	       \
		())

#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
    31cc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    31d0:	4680      	mov	r8, r0
    31d2:	2200      	movs	r2, #0
    31d4:	2101      	movs	r1, #1
    31d6:	2002      	movs	r0, #2
    31d8:	f7fe fbe6 	bl	19a8 <z_arm_irq_priority_set>
    31dc:	2002      	movs	r0, #2
    31de:	f7fe fbb3 	bl	1948 <arch_irq_enable>
	const struct uarte_nrfx_config *config = dev->config;
    31e2:	f8d8 7004 	ldr.w	r7, [r8, #4]
	struct uarte_nrfx_data *data = dev->data;
    31e6:	f8d8 6010 	ldr.w	r6, [r8, #16]
	return config->uarte_regs;
    31ea:	683c      	ldr	r4, [r7, #0]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    31ec:	2100      	movs	r1, #0
    31ee:	f8c4 1500 	str.w	r1, [r4, #1280]	; 0x500
	data->dev = dev;
    31f2:	f8c6 8000 	str.w	r8, [r6]
	err = pinctrl_apply_state(cfg->pcfg, PINCTRL_STATE_DEFAULT);
    31f6:	f8d7 900c 	ldr.w	r9, [r7, #12]
	ret = pinctrl_lookup_state(config, id, &state);
    31fa:	aa01      	add	r2, sp, #4
    31fc:	4648      	mov	r0, r9
    31fe:	f004 f905 	bl	740c <pinctrl_lookup_state>
	if (ret < 0) {
    3202:	1e05      	subs	r5, r0, #0
    3204:	db54      	blt.n	32b0 <uarte_0_init+0xe4>
	return pinctrl_apply_state_direct(config, state);
    3206:	9b01      	ldr	r3, [sp, #4]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
    3208:	f8d9 2000 	ldr.w	r2, [r9]
    320c:	7919      	ldrb	r1, [r3, #4]
    320e:	6818      	ldr	r0, [r3, #0]
    3210:	f7ff fdea 	bl	2de8 <pinctrl_configure_pins>
	if (err < 0) {
    3214:	1e05      	subs	r5, r0, #0
    3216:	db4b      	blt.n	32b0 <uarte_0_init+0xe4>
	err = uarte_nrfx_configure(dev, &data->uart_config);
    3218:	1d31      	adds	r1, r6, #4
    321a:	4640      	mov	r0, r8
    321c:	f7ff ff22 	bl	3064 <uarte_nrfx_configure>
	if (err) {
    3220:	4605      	mov	r5, r0
    3222:	2800      	cmp	r0, #0
    3224:	d144      	bne.n	32b0 <uarte_0_init+0xe4>
	    cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX) {
    3226:	687b      	ldr	r3, [r7, #4]
	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
    3228:	0799      	lsls	r1, r3, #30
    322a:	d51a      	bpl.n	3262 <uarte_0_init+0x96>
	ret = gppi_channel_alloc(&data->ppi_ch_endtx);
    322c:	f106 0018 	add.w	r0, r6, #24
    3230:	f001 fba4 	bl	497c <nrfx_ppi_channel_alloc>
	if (ret != NRFX_SUCCESS) {
    3234:	4b22      	ldr	r3, [pc, #136]	; (32c0 <uarte_0_init+0xf4>)
    3236:	4298      	cmp	r0, r3
    3238:	d13e      	bne.n	32b8 <uarte_0_init+0xec>
NRF_STATIC_INLINE void nrf_ppi_channel_endpoint_setup(NRF_PPI_Type *    p_reg,
                                                      nrf_ppi_channel_t channel,
                                                      uint32_t          eep,
                                                      uint32_t          tep)
{
    p_reg->CH[(uint32_t) channel].EEP = eep;
    323a:	7e33      	ldrb	r3, [r6, #24]
    323c:	00db      	lsls	r3, r3, #3
    323e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    3242:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
    return (uint32_t)p_reg + (uint32_t)task;
    3246:	f104 020c 	add.w	r2, r4, #12
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)event);
    324a:	f504 7190 	add.w	r1, r4, #288	; 0x120
    324e:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
    p_reg->CH[(uint32_t) channel].TEP = tep;
    3252:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));
    3256:	7e32      	ldrb	r2, [r6, #24]
    3258:	2301      	movs	r3, #1
    325a:	4093      	lsls	r3, r2
    p_reg->CHENSET = mask;
    325c:	4a19      	ldr	r2, [pc, #100]	; (32c4 <uarte_0_init+0xf8>)
    325e:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    3262:	2308      	movs	r3, #8
    3264:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
		if (!cfg->disable_rx) {
    3268:	7a3b      	ldrb	r3, [r7, #8]
    326a:	b953      	cbnz	r3, 3282 <uarte_0_init+0xb6>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    326c:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
    3270:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    3274:	6973      	ldr	r3, [r6, #20]
    3276:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
    327a:	2301      	movs	r3, #1
    327c:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    3280:	6023      	str	r3, [r4, #0]
	if (!(cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX)) {
    3282:	687b      	ldr	r3, [r7, #4]
    3284:	079a      	lsls	r2, r3, #30
    p_reg->INTENSET = mask;
    3286:	bf5c      	itt	pl
    3288:	f44f 7380 	movpl.w	r3, #256	; 0x100
    328c:	f8c4 3304 	strpl.w	r3, [r4, #772]	; 0x304
	if (cfg->flags & UARTE_CFG_FLAG_LOW_POWER) {
    3290:	687b      	ldr	r3, [r7, #4]
    3292:	06db      	lsls	r3, r3, #27
    3294:	bf44      	itt	mi
    3296:	f44f 0380 	movmi.w	r3, #4194304	; 0x400000
    329a:	f8c4 3304 	strmi.w	r3, [r4, #772]	; 0x304
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    329e:	6933      	ldr	r3, [r6, #16]
    32a0:	f8c4 3544 	str.w	r3, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    32a4:	2300      	movs	r3, #0
    32a6:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    32aa:	2301      	movs	r3, #1
    32ac:	60a3      	str	r3, [r4, #8]
    32ae:	60e3      	str	r3, [r4, #12]
UART_NRF_UARTE_DEVICE(0);
    32b0:	4628      	mov	r0, r5
    32b2:	b003      	add	sp, #12
    32b4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return -EIO;
    32b8:	f06f 0504 	mvn.w	r5, #4
UART_NRF_UARTE_DEVICE(0);
    32bc:	e7f8      	b.n	32b0 <uarte_0_init+0xe4>
    32be:	bf00      	nop
    32c0:	0bad0000 	.word	0x0bad0000
    32c4:	4001f000 	.word	0x4001f000

000032c8 <uarte_nrfx_poll_out>:
{
    32c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    32ca:	4604      	mov	r4, r0
	struct uarte_nrfx_data *data = dev->data;
    32cc:	6907      	ldr	r7, [r0, #16]
{
    32ce:	460d      	mov	r5, r1
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    32d0:	f004 fe9e 	bl	8010 <k_is_in_isr>
    32d4:	b9b0      	cbnz	r0, 3304 <uarte_nrfx_poll_out+0x3c>
	return !z_sys_post_kernel;
    32d6:	4b2e      	ldr	r3, [pc, #184]	; (3390 <uarte_nrfx_poll_out+0xc8>)
    32d8:	781b      	ldrb	r3, [r3, #0]
    32da:	b19b      	cbz	r3, 3304 <uarte_nrfx_poll_out+0x3c>
{
    32dc:	2664      	movs	r6, #100	; 0x64
		NRFX_WAIT_FOR(is_tx_ready(dev), 100, 1, res);
    32de:	6860      	ldr	r0, [r4, #4]
    32e0:	f004 f8ca 	bl	7478 <is_tx_ready.isra.0>
    32e4:	bb00      	cbnz	r0, 3328 <uarte_nrfx_poll_out+0x60>
    32e6:	2001      	movs	r0, #1
    32e8:	f004 fb70 	bl	79cc <nrfx_busy_wait>
    32ec:	3e01      	subs	r6, #1
    32ee:	d1f6      	bne.n	32de <uarte_nrfx_poll_out+0x16>
	return z_impl_k_sleep(timeout);
    32f0:	2100      	movs	r1, #0
    32f2:	2021      	movs	r0, #33	; 0x21
    32f4:	f002 fffa 	bl	62ec <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    32f8:	e7f0      	b.n	32dc <uarte_nrfx_poll_out+0x14>
	__asm__ volatile(
    32fa:	f386 8811 	msr	BASEPRI, r6
    32fe:	f3bf 8f6f 	isb	sy
}
    3302:	e7f5      	b.n	32f0 <uarte_nrfx_poll_out+0x28>
	__asm__ volatile(
    3304:	f04f 0320 	mov.w	r3, #32
    3308:	f3ef 8611 	mrs	r6, BASEPRI
    330c:	f383 8812 	msr	BASEPRI_MAX, r3
    3310:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
    3314:	6860      	ldr	r0, [r4, #4]
    3316:	4631      	mov	r1, r6
    3318:	f004 f8ae 	bl	7478 <is_tx_ready.isra.0>
    331c:	b990      	cbnz	r0, 3344 <uarte_nrfx_poll_out+0x7c>
	__asm__ volatile(
    331e:	f386 8811 	msr	BASEPRI, r6
    3322:	f3bf 8f6f 	isb	sy
}
    3326:	e7ed      	b.n	3304 <uarte_nrfx_poll_out+0x3c>
	__asm__ volatile(
    3328:	f04f 0320 	mov.w	r3, #32
    332c:	f3ef 8611 	mrs	r6, BASEPRI
    3330:	f383 8812 	msr	BASEPRI_MAX, r3
    3334:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
    3338:	6860      	ldr	r0, [r4, #4]
    333a:	4631      	mov	r1, r6
    333c:	f004 f89c 	bl	7478 <is_tx_ready.isra.0>
    3340:	2800      	cmp	r0, #0
    3342:	d0da      	beq.n	32fa <uarte_nrfx_poll_out+0x32>
	*data->char_out = c;
    3344:	693b      	ldr	r3, [r7, #16]
    3346:	701d      	strb	r5, [r3, #0]
	const struct uarte_nrfx_config *config = dev->config;
    3348:	6862      	ldr	r2, [r4, #4]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    334a:	6938      	ldr	r0, [r7, #16]
	return config->uarte_regs;
    334c:	6813      	ldr	r3, [r2, #0]
    334e:	f8c3 0544 	str.w	r0, [r3, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    3352:	2001      	movs	r0, #1
    3354:	f8c3 0548 	str.w	r0, [r3, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    3358:	2000      	movs	r0, #0
    335a:	f8c3 0120 	str.w	r0, [r3, #288]	; 0x120
    335e:	f8d3 5120 	ldr.w	r5, [r3, #288]	; 0x120
    3362:	f8c3 0158 	str.w	r0, [r3, #344]	; 0x158
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
    3366:	6852      	ldr	r2, [r2, #4]
    3368:	f8d3 0158 	ldr.w	r0, [r3, #344]	; 0x158
    336c:	06d2      	lsls	r2, r2, #27
    336e:	d508      	bpl.n	3382 <uarte_nrfx_poll_out+0xba>
	return config->uarte_regs;
    3370:	6862      	ldr	r2, [r4, #4]
    3372:	6812      	ldr	r2, [r2, #0]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    3374:	2008      	movs	r0, #8
    3376:	f8c2 0500 	str.w	r0, [r2, #1280]	; 0x500
    p_reg->INTENSET = mask;
    337a:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
    337e:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    3382:	2201      	movs	r2, #1
    3384:	609a      	str	r2, [r3, #8]
	__asm__ volatile(
    3386:	f381 8811 	msr	BASEPRI, r1
    338a:	f3bf 8f6f 	isb	sy
}
    338e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3390:	200013a8 	.word	0x200013a8

00003394 <transfer_next_chunk>:
	spi_context_complete(ctx, dev, error);
	dev_data->busy = false;
}

static void transfer_next_chunk(const struct device *dev)
{
    3394:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    3396:	4605      	mov	r5, r0
	const struct spi_nrfx_config *dev_config = dev->config;
    3398:	6840      	ldr	r0, [r0, #4]
	struct spi_nrfx_data *dev_data = dev->data;
    339a:	692a      	ldr	r2, [r5, #16]
 * directions have a continuous buffer, i.e. the maximum SPI transfer that
 * can be done with DMA that handles only non-scattered buffers.
 */
static inline size_t spi_context_max_continuous_chunk(struct spi_context *ctx)
{
	if (!ctx->tx_len) {
    339c:	6c93      	ldr	r3, [r2, #72]	; 0x48
		return ctx->rx_len;
    339e:	6d11      	ldr	r1, [r2, #80]	; 0x50
	if (!ctx->tx_len) {
    33a0:	b9e3      	cbnz	r3, 33dc <transfer_next_chunk+0x48>
	struct spi_context *ctx = &dev_data->ctx;
	int error = 0;

	size_t chunk_len = spi_context_max_continuous_chunk(ctx);

	if (chunk_len > 0) {
    33a2:	b1a9      	cbz	r1, 33d0 <transfer_next_chunk+0x3c>
		nrfx_spi_xfer_desc_t xfer;
		nrfx_err_t result;

		dev_data->chunk_len = chunk_len;

		xfer.p_tx_buffer = ctx->tx_buf;
    33a4:	6c54      	ldr	r4, [r2, #68]	; 0x44
		dev_data->chunk_len = chunk_len;
    33a6:	6591      	str	r1, [r2, #88]	; 0x58
		xfer.tx_length   = spi_context_tx_buf_on(ctx) ? chunk_len : 0;
    33a8:	461e      	mov	r6, r3
		xfer.p_tx_buffer = ctx->tx_buf;
    33aa:	460b      	mov	r3, r1
		xfer.p_rx_buffer = ctx->rx_buf;
    33ac:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
    33ae:	9202      	str	r2, [sp, #8]
		xfer.tx_length   = spi_context_tx_buf_on(ctx) ? chunk_len : 0;
    33b0:	e9cd 4600 	strd	r4, r6, [sp]
	return !!(ctx->rx_buf && ctx->rx_len);
    33b4:	b1ea      	cbz	r2, 33f2 <transfer_next_chunk+0x5e>
    33b6:	2900      	cmp	r1, #0
    33b8:	bf18      	it	ne
    33ba:	4619      	movne	r1, r3
		xfer.rx_length   = spi_context_rx_buf_on(ctx) ? chunk_len : 0;
    33bc:	9103      	str	r1, [sp, #12]
		result = nrfx_spi_xfer(&dev_config->spi, &xfer, 0);
    33be:	2200      	movs	r2, #0
    33c0:	4669      	mov	r1, sp
    33c2:	f001 fbd5 	bl	4b70 <nrfx_spi_xfer>
		if (result == NRFX_SUCCESS) {
    33c6:	4b0d      	ldr	r3, [pc, #52]	; (33fc <transfer_next_chunk+0x68>)
    33c8:	4298      	cmp	r0, r3
    33ca:	d014      	beq.n	33f6 <transfer_next_chunk+0x62>
			return;
		}

		error = -EIO;
    33cc:	f06f 0104 	mvn.w	r1, #4
	}

	finish_transaction(dev, error);
    33d0:	6928      	ldr	r0, [r5, #16]
}
    33d2:	b004      	add	sp, #16
    33d4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	finish_transaction(dev, error);
    33d8:	f004 b95d 	b.w	7696 <finish_transaction.isra.0>
	} else if (!ctx->rx_len) {
    33dc:	6c54      	ldr	r4, [r2, #68]	; 0x44
    33de:	b111      	cbz	r1, 33e6 <transfer_next_chunk+0x52>
		return ctx->tx_len;
	}

	return MIN(ctx->tx_len, ctx->rx_len);
    33e0:	428b      	cmp	r3, r1
    33e2:	bf28      	it	cs
    33e4:	460b      	movcs	r3, r1
		return ctx->tx_len;
    33e6:	2c00      	cmp	r4, #0
		dev_data->chunk_len = chunk_len;
    33e8:	6593      	str	r3, [r2, #88]	; 0x58
    33ea:	bf14      	ite	ne
    33ec:	461e      	movne	r6, r3
    33ee:	2600      	moveq	r6, #0
    33f0:	e7dc      	b.n	33ac <transfer_next_chunk+0x18>
		xfer.rx_length   = spi_context_rx_buf_on(ctx) ? chunk_len : 0;
    33f2:	4611      	mov	r1, r2
    33f4:	e7e2      	b.n	33bc <transfer_next_chunk+0x28>
}
    33f6:	b004      	add	sp, #16
    33f8:	bd70      	pop	{r4, r5, r6, pc}
    33fa:	bf00      	nop
    33fc:	0bad0000 	.word	0x0bad0000

00003400 <spi_nrfx_transceive>:

static int spi_nrfx_transceive(const struct device *dev,
			       const struct spi_config *spi_cfg,
			       const struct spi_buf_set *tx_bufs,
			       const struct spi_buf_set *rx_bufs)
{
    3400:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3404:	b08b      	sub	sp, #44	; 0x2c
    3406:	4698      	mov	r8, r3
	const struct spi_nrfx_config *dev_config = dev->config;
    3408:	6843      	ldr	r3, [r0, #4]
    340a:	9303      	str	r3, [sp, #12]
	if ((spi_cfg->operation & SPI_LOCK_ON) &&
    340c:	888b      	ldrh	r3, [r1, #4]
	struct spi_nrfx_data *dev_data = dev->data;
    340e:	6904      	ldr	r4, [r0, #16]
    3410:	049b      	lsls	r3, r3, #18
{
    3412:	4607      	mov	r7, r0
    3414:	460e      	mov	r6, r1
    3416:	4691      	mov	r9, r2
    3418:	f100 80ec 	bmi.w	35f4 <spi_nrfx_transceive+0x1f4>
	return z_impl_k_sem_take(sem, timeout);
    341c:	f04f 32ff 	mov.w	r2, #4294967295
    3420:	f04f 33ff 	mov.w	r3, #4294967295
    3424:	f104 0010 	add.w	r0, r4, #16
    3428:	f002 fc20 	bl	5c6c <z_impl_k_sem_take>
	ctx->owner = spi_cfg;
    342c:	6066      	str	r6, [r4, #4]
	struct spi_nrfx_data *dev_data = dev->data;
    342e:	f8d7 a010 	ldr.w	sl, [r7, #16]
	const struct spi_nrfx_config *dev_config = dev->config;
    3432:	687b      	ldr	r3, [r7, #4]
    3434:	9301      	str	r3, [sp, #4]
	if (dev_data->initialized && spi_context_configured(ctx, spi_cfg)) {
    3436:	f89a 305d 	ldrb.w	r3, [sl, #93]	; 0x5d
    343a:	9302      	str	r3, [sp, #8]
    343c:	b11b      	cbz	r3, 3446 <spi_nrfx_transceive+0x46>
    343e:	f8da 3000 	ldr.w	r3, [sl]
    3442:	429e      	cmp	r6, r3
    3444:	d063      	beq.n	350e <spi_nrfx_transceive+0x10e>
	if (spi_cfg->operation & SPI_HALF_DUPLEX) {
    3446:	f8b6 c004 	ldrh.w	ip, [r6, #4]
    344a:	f41c 6f00 	tst.w	ip, #2048	; 0x800
    344e:	f040 8100 	bne.w	3652 <spi_nrfx_transceive+0x252>
	if (spi_cfg->operation & SPI_MODE_LOOP) {
    3452:	f01c 0f09 	tst.w	ip, #9
    3456:	f040 80f9 	bne.w	364c <spi_nrfx_transceive+0x24c>
	if (SPI_WORD_SIZE_GET(spi_cfg->operation) != 8) {
    345a:	f3cc 1345 	ubfx	r3, ip, #5, #6
    345e:	2b08      	cmp	r3, #8
    3460:	f040 80f4 	bne.w	364c <spi_nrfx_transceive+0x24c>
	if (spi_cfg->frequency < 125000) {
    3464:	6835      	ldr	r5, [r6, #0]
    3466:	4b8c      	ldr	r3, [pc, #560]	; (3698 <spi_nrfx_transceive+0x298>)
    3468:	429d      	cmp	r5, r3
    346a:	f240 80ef 	bls.w	364c <spi_nrfx_transceive+0x24c>
	config = dev_config->def_config;
    346e:	9b01      	ldr	r3, [sp, #4]
    3470:	f103 0b08 	add.w	fp, r3, #8
    3474:	e8bb 000f 	ldmia.w	fp!, {r0, r1, r2, r3}
    3478:	f10d 0e14 	add.w	lr, sp, #20
    347c:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
    3480:	f8db 3000 	ldr.w	r3, [fp]
    3484:	f8ce 3000 	str.w	r3, [lr]
	if (frequency < 250000) {
    3488:	4b84      	ldr	r3, [pc, #528]	; (369c <spi_nrfx_transceive+0x29c>)
    348a:	429d      	cmp	r5, r3
    348c:	f240 80bb 	bls.w	3606 <spi_nrfx_transceive+0x206>
	} else if (frequency < 500000) {
    3490:	4b83      	ldr	r3, [pc, #524]	; (36a0 <spi_nrfx_transceive+0x2a0>)
    3492:	429d      	cmp	r5, r3
    3494:	f240 80ba 	bls.w	360c <spi_nrfx_transceive+0x20c>
	} else if (frequency < 1000000) {
    3498:	4b82      	ldr	r3, [pc, #520]	; (36a4 <spi_nrfx_transceive+0x2a4>)
    349a:	429d      	cmp	r5, r3
    349c:	f240 80b9 	bls.w	3612 <spi_nrfx_transceive+0x212>
	} else if (frequency < 2000000) {
    34a0:	4b81      	ldr	r3, [pc, #516]	; (36a8 <spi_nrfx_transceive+0x2a8>)
    34a2:	429d      	cmp	r5, r3
    34a4:	f240 80b8 	bls.w	3618 <spi_nrfx_transceive+0x218>
	} else if (frequency < 4000000) {
    34a8:	4b80      	ldr	r3, [pc, #512]	; (36ac <spi_nrfx_transceive+0x2ac>)
    34aa:	429d      	cmp	r5, r3
    34ac:	f240 80b7 	bls.w	361e <spi_nrfx_transceive+0x21e>
		return NRF_SPI_FREQ_4M;
    34b0:	4b7f      	ldr	r3, [pc, #508]	; (36b0 <spi_nrfx_transceive+0x2b0>)
    34b2:	429d      	cmp	r5, r3
    34b4:	bf2c      	ite	cs
    34b6:	f04f 4500 	movcs.w	r5, #2147483648	; 0x80000000
    34ba:	f04f 4580 	movcc.w	r5, #1073741824	; 0x40000000
	if (SPI_MODE_GET(operation) & SPI_MODE_CPOL) {
    34be:	f01c 0f02 	tst.w	ip, #2
	config.frequency = get_nrf_spi_frequency(spi_cfg->frequency);
    34c2:	9507      	str	r5, [sp, #28]
	if (SPI_MODE_GET(operation) & SPI_MODE_CPOL) {
    34c4:	f00c 0304 	and.w	r3, ip, #4
    34c8:	f000 80ac 	beq.w	3624 <spi_nrfx_transceive+0x224>
			return NRF_SPI_MODE_2;
    34cc:	2b00      	cmp	r3, #0
    34ce:	bf14      	ite	ne
    34d0:	2303      	movne	r3, #3
    34d2:	2302      	moveq	r3, #2
	config.mode      = get_nrf_spi_mode(spi_cfg->operation);
    34d4:	f88d 3020 	strb.w	r3, [sp, #32]
	if (dev_data->initialized) {
    34d8:	9b02      	ldr	r3, [sp, #8]
	if (operation & SPI_TRANSFER_LSB) {
    34da:	f3cc 1c00 	ubfx	ip, ip, #4, #1
	config.bit_order = get_nrf_spi_bit_order(spi_cfg->operation);
    34de:	f88d c021 	strb.w	ip, [sp, #33]	; 0x21
	if (dev_data->initialized) {
    34e2:	b12b      	cbz	r3, 34f0 <spi_nrfx_transceive+0xf0>
		nrfx_spi_uninit(&dev_config->spi);
    34e4:	9801      	ldr	r0, [sp, #4]
    34e6:	f001 fb0b 	bl	4b00 <nrfx_spi_uninit>
		dev_data->initialized = false;
    34ea:	2300      	movs	r3, #0
    34ec:	f88a 305d 	strb.w	r3, [sl, #93]	; 0x5d
	result = nrfx_spi_init(&dev_config->spi, &config,
    34f0:	4653      	mov	r3, sl
    34f2:	4a70      	ldr	r2, [pc, #448]	; (36b4 <spi_nrfx_transceive+0x2b4>)
    34f4:	9801      	ldr	r0, [sp, #4]
    34f6:	a905      	add	r1, sp, #20
    34f8:	f001 fa54 	bl	49a4 <nrfx_spi_init>
	if (result != NRFX_SUCCESS) {
    34fc:	4b6e      	ldr	r3, [pc, #440]	; (36b8 <spi_nrfx_transceive+0x2b8>)
    34fe:	4298      	cmp	r0, r3
    3500:	f040 8094 	bne.w	362c <spi_nrfx_transceive+0x22c>
	dev_data->initialized = true;
    3504:	2301      	movs	r3, #1
    3506:	f88a 305d 	strb.w	r3, [sl, #93]	; 0x5d
	ctx->config = spi_cfg;
    350a:	f8ca 6000 	str.w	r6, [sl]
		dev_data->busy = true;
    350e:	2301      	movs	r3, #1
    3510:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
	ctx->current_tx = tx_bufs ? tx_bufs->buffers : NULL;
    3514:	f1b9 0f00 	cmp.w	r9, #0
    3518:	f040 809e 	bne.w	3658 <spi_nrfx_transceive+0x258>
    351c:	f8c4 9034 	str.w	r9, [r4, #52]	; 0x34
	ctx->tx_count = ctx->current_tx ? tx_bufs->count : 0;
    3520:	2300      	movs	r3, #0
    3522:	63a3      	str	r3, [r4, #56]	; 0x38
		spi_context_get_next_buf(&ctx->current_tx, &ctx->tx_count,
    3524:	f104 0248 	add.w	r2, r4, #72	; 0x48
    3528:	f104 0138 	add.w	r1, r4, #56	; 0x38
    352c:	f104 0034 	add.w	r0, r4, #52	; 0x34
    3530:	f003 fff0 	bl	7514 <spi_context_get_next_buf.constprop.0>
	ctx->tx_buf = (const uint8_t *)
    3534:	6460      	str	r0, [r4, #68]	; 0x44
	ctx->current_rx = rx_bufs ? rx_bufs->buffers : NULL;
    3536:	f1b8 0f00 	cmp.w	r8, #0
    353a:	f040 8096 	bne.w	366a <spi_nrfx_transceive+0x26a>
    353e:	f8c4 803c 	str.w	r8, [r4, #60]	; 0x3c
	ctx->rx_count = ctx->current_rx ? rx_bufs->count : 0;
    3542:	2300      	movs	r3, #0
    3544:	6423      	str	r3, [r4, #64]	; 0x40
		spi_context_get_next_buf(&ctx->current_rx, &ctx->rx_count,
    3546:	f104 0250 	add.w	r2, r4, #80	; 0x50
    354a:	f104 0140 	add.w	r1, r4, #64	; 0x40
    354e:	f104 003c 	add.w	r0, r4, #60	; 0x3c
    3552:	f003 ffdf 	bl	7514 <spi_context_get_next_buf.constprop.0>
	ctx->sync_status = 0;
    3556:	2500      	movs	r5, #0
	_spi_context_cs_control(ctx, on, false);
    3558:	462a      	mov	r2, r5
	ctx->rx_buf = (uint8_t *)
    355a:	64e0      	str	r0, [r4, #76]	; 0x4c
	_spi_context_cs_control(ctx, on, false);
    355c:	2101      	movs	r1, #1
    355e:	4620      	mov	r0, r4
	ctx->sync_status = 0;
    3560:	6325      	str	r5, [r4, #48]	; 0x30
	_spi_context_cs_control(ctx, on, false);
    3562:	f003 fffe 	bl	7562 <_spi_context_cs_control>
		transfer_next_chunk(dev);
    3566:	4638      	mov	r0, r7
    3568:	f7ff ff14 	bl	3394 <transfer_next_chunk>
static inline size_t spi_context_total_tx_len(struct spi_context *ctx)
{
	size_t n;
	size_t total_len = 0;

	for (n = 0; n < ctx->tx_count; ++n) {
    356c:	6ba0      	ldr	r0, [r4, #56]	; 0x38
	size_t total_len = 0;
    356e:	462a      	mov	r2, r5
	for (n = 0; n < ctx->tx_count; ++n) {
    3570:	462b      	mov	r3, r5
    3572:	4283      	cmp	r3, r0
    3574:	f040 8082 	bne.w	367c <spi_nrfx_transceive+0x27c>
}

static inline size_t spi_context_total_rx_len(struct spi_context *ctx)
{
	size_t n;
	size_t total_len = 0;
    3578:	2300      	movs	r3, #0

	for (n = 0; n < ctx->rx_count; ++n) {
    357a:	6c25      	ldr	r5, [r4, #64]	; 0x40
    357c:	4619      	mov	r1, r3
    357e:	42a9      	cmp	r1, r5
    3580:	f040 8083 	bne.w	368a <spi_nrfx_transceive+0x28a>
			timeout_ms = MAX(tx_len, rx_len) * 8 * 1000 /
    3584:	4293      	cmp	r3, r2
				     ctx->config->frequency;
    3586:	4626      	mov	r6, r4
			timeout_ms = MAX(tx_len, rx_len) * 8 * 1000 /
    3588:	bf38      	it	cc
    358a:	4613      	movcc	r3, r2
    358c:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
    3590:	fb02 f503 	mul.w	r5, r2, r3
				     ctx->config->frequency;
    3594:	f856 3b20 	ldr.w	r3, [r6], #32
    3598:	f04f 0800 	mov.w	r8, #0
			timeout_ms = MAX(tx_len, rx_len) * 8 * 1000 /
    359c:	681b      	ldr	r3, [r3, #0]
    359e:	fbb5 f5f3 	udiv	r5, r5, r3
    35a2:	f44f 4c00 	mov.w	ip, #32768	; 0x8000
			timeout_ms += CONFIG_SPI_COMPLETION_TIMEOUT_TOLERANCE;
    35a6:	35c8      	adds	r5, #200	; 0xc8
    35a8:	4641      	mov	r1, r8
    35aa:	f240 30e7 	movw	r0, #999	; 0x3e7
    35ae:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    35b2:	2300      	movs	r3, #0
    35b4:	fbe5 010c 	umlal	r0, r1, r5, ip
    35b8:	f7fc fda2 	bl	100 <__aeabi_uldivmod>
    35bc:	4602      	mov	r2, r0
    35be:	460b      	mov	r3, r1
    35c0:	4630      	mov	r0, r6
    35c2:	f002 fb53 	bl	5c6c <z_impl_k_sem_take>
		if (k_sem_take(&ctx->sync, timeout)) {
    35c6:	b918      	cbnz	r0, 35d0 <spi_nrfx_transceive+0x1d0>
		status = ctx->sync_status;
    35c8:	6b25      	ldr	r5, [r4, #48]	; 0x30
		if (error == -ETIMEDOUT) {
    35ca:	f115 0f74 	cmn.w	r5, #116	; 0x74
    35ce:	d12f      	bne.n	3630 <spi_nrfx_transceive+0x230>
			nrfx_spi_uninit(&dev_config->spi);
    35d0:	9803      	ldr	r0, [sp, #12]
			dev_data->chunk_len = 0;
    35d2:	f8c4 8058 	str.w	r8, [r4, #88]	; 0x58
			nrfx_spi_uninit(&dev_config->spi);
    35d6:	f001 fa93 	bl	4b00 <nrfx_spi_uninit>
			dev_data->initialized = false;
    35da:	f884 805d 	strb.w	r8, [r4, #93]	; 0x5d
			finish_transaction(dev, -ETIMEDOUT);
    35de:	6938      	ldr	r0, [r7, #16]
    35e0:	f06f 0173 	mvn.w	r1, #115	; 0x73
    35e4:	f004 f857 	bl	7696 <finish_transaction.isra.0>
		(void) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_SEM_RESET);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_reset(sem);
    35e8:	4630      	mov	r0, r6
    35ea:	f002 fb67 	bl	5cbc <z_impl_k_sem_reset>
		error = spi_context_wait_for_completion(&dev_data->ctx);
    35ee:	f06f 0573 	mvn.w	r5, #115	; 0x73
}
    35f2:	e01d      	b.n	3630 <spi_nrfx_transceive+0x230>
	if ((spi_cfg->operation & SPI_LOCK_ON) &&
    35f4:	69a3      	ldr	r3, [r4, #24]
    35f6:	2b00      	cmp	r3, #0
    35f8:	f47f af10 	bne.w	341c <spi_nrfx_transceive+0x1c>
		(k_sem_count_get(&ctx->lock) == 0) &&
    35fc:	6863      	ldr	r3, [r4, #4]
    35fe:	4299      	cmp	r1, r3
    3600:	f47f af0c 	bne.w	341c <spi_nrfx_transceive+0x1c>
    3604:	e713      	b.n	342e <spi_nrfx_transceive+0x2e>
		return NRF_SPI_FREQ_125K;
    3606:	f04f 7500 	mov.w	r5, #33554432	; 0x2000000
    360a:	e758      	b.n	34be <spi_nrfx_transceive+0xbe>
		return NRF_SPI_FREQ_250K;
    360c:	f04f 6580 	mov.w	r5, #67108864	; 0x4000000
    3610:	e755      	b.n	34be <spi_nrfx_transceive+0xbe>
		return NRF_SPI_FREQ_500K;
    3612:	f04f 6500 	mov.w	r5, #134217728	; 0x8000000
    3616:	e752      	b.n	34be <spi_nrfx_transceive+0xbe>
		return NRF_SPI_FREQ_1M;
    3618:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
    361c:	e74f      	b.n	34be <spi_nrfx_transceive+0xbe>
		return NRF_SPI_FREQ_2M;
    361e:	f04f 5500 	mov.w	r5, #536870912	; 0x20000000
    3622:	e74c      	b.n	34be <spi_nrfx_transceive+0xbe>
		if (SPI_MODE_GET(operation) & SPI_MODE_CPHA) {
    3624:	3b00      	subs	r3, #0
    3626:	bf18      	it	ne
    3628:	2301      	movne	r3, #1
    362a:	e753      	b.n	34d4 <spi_nrfx_transceive+0xd4>
		return -EIO;
    362c:	f06f 0504 	mvn.w	r5, #4
	if (!(ctx->config->operation & SPI_LOCK_ON)) {
    3630:	6823      	ldr	r3, [r4, #0]
    3632:	889b      	ldrh	r3, [r3, #4]
    3634:	f413 5300 	ands.w	r3, r3, #8192	; 0x2000
    3638:	d104      	bne.n	3644 <spi_nrfx_transceive+0x244>
		ctx->owner = NULL;
    363a:	6063      	str	r3, [r4, #4]
	z_impl_k_sem_give(sem);
    363c:	f104 0010 	add.w	r0, r4, #16
    3640:	f002 faf4 	bl	5c2c <z_impl_k_sem_give>
	return transceive(dev, spi_cfg, tx_bufs, rx_bufs, false, NULL, NULL);
}
    3644:	4628      	mov	r0, r5
    3646:	b00b      	add	sp, #44	; 0x2c
    3648:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return -EINVAL;
    364c:	f06f 0515 	mvn.w	r5, #21
    3650:	e7ee      	b.n	3630 <spi_nrfx_transceive+0x230>
		return -ENOTSUP;
    3652:	f06f 0585 	mvn.w	r5, #133	; 0x85
    3656:	e7eb      	b.n	3630 <spi_nrfx_transceive+0x230>
	ctx->current_tx = tx_bufs ? tx_bufs->buffers : NULL;
    3658:	f8d9 3000 	ldr.w	r3, [r9]
    365c:	6363      	str	r3, [r4, #52]	; 0x34
	ctx->tx_count = ctx->current_tx ? tx_bufs->count : 0;
    365e:	2b00      	cmp	r3, #0
    3660:	f43f af5e 	beq.w	3520 <spi_nrfx_transceive+0x120>
    3664:	f8d9 3004 	ldr.w	r3, [r9, #4]
    3668:	e75b      	b.n	3522 <spi_nrfx_transceive+0x122>
	ctx->current_rx = rx_bufs ? rx_bufs->buffers : NULL;
    366a:	f8d8 3000 	ldr.w	r3, [r8]
    366e:	63e3      	str	r3, [r4, #60]	; 0x3c
	ctx->rx_count = ctx->current_rx ? rx_bufs->count : 0;
    3670:	2b00      	cmp	r3, #0
    3672:	f43f af66 	beq.w	3542 <spi_nrfx_transceive+0x142>
    3676:	f8d8 3004 	ldr.w	r3, [r8, #4]
    367a:	e763      	b.n	3544 <spi_nrfx_transceive+0x144>
		total_len += ctx->current_tx[n].len;
    367c:	6b61      	ldr	r1, [r4, #52]	; 0x34
    367e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
	for (n = 0; n < ctx->tx_count; ++n) {
    3682:	3301      	adds	r3, #1
		total_len += ctx->current_tx[n].len;
    3684:	6849      	ldr	r1, [r1, #4]
    3686:	440a      	add	r2, r1
	for (n = 0; n < ctx->tx_count; ++n) {
    3688:	e773      	b.n	3572 <spi_nrfx_transceive+0x172>
		total_len += ctx->current_rx[n].len;
    368a:	6be0      	ldr	r0, [r4, #60]	; 0x3c
    368c:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
	for (n = 0; n < ctx->rx_count; ++n) {
    3690:	3101      	adds	r1, #1
		total_len += ctx->current_rx[n].len;
    3692:	6840      	ldr	r0, [r0, #4]
    3694:	4403      	add	r3, r0
	for (n = 0; n < ctx->rx_count; ++n) {
    3696:	e772      	b.n	357e <spi_nrfx_transceive+0x17e>
    3698:	0001e847 	.word	0x0001e847
    369c:	0003d08f 	.word	0x0003d08f
    36a0:	0007a11f 	.word	0x0007a11f
    36a4:	000f423f 	.word	0x000f423f
    36a8:	001e847f 	.word	0x001e847f
    36ac:	003d08ff 	.word	0x003d08ff
    36b0:	007a1200 	.word	0x007a1200
    36b4:	000076b7 	.word	0x000076b7
    36b8:	0bad0000 	.word	0x0bad0000

000036bc <transfer_next_chunk>:
	spi_context_complete(ctx, dev, error);
	dev_data->busy = false;
}

static void transfer_next_chunk(const struct device *dev)
{
    36bc:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct spi_nrfx_data *dev_data = dev->data;
    36be:	6904      	ldr	r4, [r0, #16]
	const struct spi_nrfx_config *dev_config = dev->config;
    36c0:	6847      	ldr	r7, [r0, #4]
	if (!ctx->tx_len) {
    36c2:	6ca5      	ldr	r5, [r4, #72]	; 0x48
		return ctx->rx_len;
    36c4:	6d23      	ldr	r3, [r4, #80]	; 0x50
{
    36c6:	b085      	sub	sp, #20
    36c8:	4606      	mov	r6, r0
	if (!ctx->tx_len) {
    36ca:	b93d      	cbnz	r5, 36dc <transfer_next_chunk+0x20>
	struct spi_context *ctx = &dev_data->ctx;
	int error = 0;

	size_t chunk_len = spi_context_max_continuous_chunk(ctx);

	if (chunk_len > 0) {
    36cc:	bb6b      	cbnz	r3, 372a <transfer_next_chunk+0x6e>
	int error = 0;
    36ce:	4619      	mov	r1, r3
			anomaly_58_workaround_clear(dev_data);
#endif
		}
	}

	finish_transaction(dev, error);
    36d0:	6930      	ldr	r0, [r6, #16]
}
    36d2:	b005      	add	sp, #20
    36d4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	finish_transaction(dev, error);
    36d8:	f004 b8ff 	b.w	78da <finish_transaction.isra.0>
		const uint8_t *tx_buf = ctx->tx_buf;
    36dc:	6c61      	ldr	r1, [r4, #68]	; 0x44
	} else if (!ctx->rx_len) {
    36de:	bb03      	cbnz	r3, 3722 <transfer_next_chunk+0x66>
	return !!(ctx->tx_buf && ctx->tx_len);
    36e0:	bb31      	cbnz	r1, 3730 <transfer_next_chunk+0x74>
		if (chunk_len > dev_config->max_chunk_len) {
    36e2:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
    36e4:	6c63      	ldr	r3, [r4, #68]	; 0x44
		xfer.p_tx_buffer = tx_buf;
    36e6:	9100      	str	r1, [sp, #0]
    36e8:	42aa      	cmp	r2, r5
    36ea:	bf28      	it	cs
    36ec:	462a      	movcs	r2, r5
		dev_data->chunk_len = chunk_len;
    36ee:	65a2      	str	r2, [r4, #88]	; 0x58
    36f0:	b11b      	cbz	r3, 36fa <transfer_next_chunk+0x3e>
    36f2:	6ca3      	ldr	r3, [r4, #72]	; 0x48
		xfer.tx_length   = spi_context_tx_buf_on(ctx) ? chunk_len : 0;
    36f4:	2b00      	cmp	r3, #0
    36f6:	bf18      	it	ne
    36f8:	4613      	movne	r3, r2
    36fa:	9301      	str	r3, [sp, #4]
		xfer.p_rx_buffer = ctx->rx_buf;
    36fc:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    36fe:	9302      	str	r3, [sp, #8]
	return !!(ctx->rx_buf && ctx->rx_len);
    3700:	b11b      	cbz	r3, 370a <transfer_next_chunk+0x4e>
    3702:	6d23      	ldr	r3, [r4, #80]	; 0x50
		xfer.rx_length   = spi_context_rx_buf_on(ctx) ? chunk_len : 0;
    3704:	2b00      	cmp	r3, #0
    3706:	bf18      	it	ne
    3708:	4613      	movne	r3, r2
			result = nrfx_spim_xfer(&dev_config->spim, &xfer, 0);
    370a:	2200      	movs	r2, #0
    370c:	4669      	mov	r1, sp
    370e:	4638      	mov	r0, r7
		xfer.rx_length   = spi_context_rx_buf_on(ctx) ? chunk_len : 0;
    3710:	9303      	str	r3, [sp, #12]
			result = nrfx_spim_xfer(&dev_config->spim, &xfer, 0);
    3712:	f001 fc1f 	bl	4f54 <nrfx_spim_xfer>
			if (result == NRFX_SUCCESS) {
    3716:	4b0e      	ldr	r3, [pc, #56]	; (3750 <transfer_next_chunk+0x94>)
    3718:	4298      	cmp	r0, r3
    371a:	d017      	beq.n	374c <transfer_next_chunk+0x90>
			error = -EIO;
    371c:	f06f 0104 	mvn.w	r1, #4
    3720:	e7d6      	b.n	36d0 <transfer_next_chunk+0x14>
	return MIN(ctx->tx_len, ctx->rx_len);
    3722:	429d      	cmp	r5, r3
    3724:	bf28      	it	cs
    3726:	461d      	movcs	r5, r3
    3728:	e7da      	b.n	36e0 <transfer_next_chunk+0x24>
		const uint8_t *tx_buf = ctx->tx_buf;
    372a:	6c61      	ldr	r1, [r4, #68]	; 0x44
    372c:	461d      	mov	r5, r3
    372e:	e7d8      	b.n	36e2 <transfer_next_chunk+0x26>

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE bool nrfx_is_in_ram(void const * p_object)
{
    return ((((uint32_t)p_object) & 0xE0000000u) == 0x20000000u);
    3730:	f001 4360 	and.w	r3, r1, #3758096384	; 0xe0000000
		if (spi_context_tx_buf_on(ctx) && !nrfx_is_in_ram(tx_buf)) {
    3734:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
    3738:	d0d3      	beq.n	36e2 <transfer_next_chunk+0x26>
			if (chunk_len > CONFIG_SPI_NRFX_RAM_BUFFER_SIZE) {
    373a:	2d08      	cmp	r5, #8
    373c:	bf28      	it	cs
    373e:	2508      	movcs	r5, #8
			memcpy(dev_data->buffer, tx_buf, chunk_len);
    3740:	6e20      	ldr	r0, [r4, #96]	; 0x60
    3742:	462a      	mov	r2, r5
    3744:	f003 fcbc 	bl	70c0 <memcpy>
			tx_buf = dev_data->buffer;
    3748:	6e21      	ldr	r1, [r4, #96]	; 0x60
    374a:	e7ca      	b.n	36e2 <transfer_next_chunk+0x26>
}
    374c:	b005      	add	sp, #20
    374e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3750:	0bad0000 	.word	0x0bad0000

00003754 <spi_nrfx_transceive>:

static int spi_nrfx_transceive(const struct device *dev,
			       const struct spi_config *spi_cfg,
			       const struct spi_buf_set *tx_bufs,
			       const struct spi_buf_set *rx_bufs)
{
    3754:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3758:	b08b      	sub	sp, #44	; 0x2c
    375a:	4698      	mov	r8, r3
	const struct spi_nrfx_config *dev_config = dev->config;
    375c:	6843      	ldr	r3, [r0, #4]
    375e:	9302      	str	r3, [sp, #8]
	if ((spi_cfg->operation & SPI_LOCK_ON) &&
    3760:	888b      	ldrh	r3, [r1, #4]
	struct spi_nrfx_data *dev_data = dev->data;
    3762:	6904      	ldr	r4, [r0, #16]
{
    3764:	4606      	mov	r6, r0
    3766:	0498      	lsls	r0, r3, #18
    3768:	460d      	mov	r5, r1
    376a:	4691      	mov	r9, r2
    376c:	f100 80fa 	bmi.w	3964 <spi_nrfx_transceive+0x210>
	return z_impl_k_sem_take(sem, timeout);
    3770:	f04f 32ff 	mov.w	r2, #4294967295
    3774:	f04f 33ff 	mov.w	r3, #4294967295
    3778:	f104 0010 	add.w	r0, r4, #16
    377c:	f002 fa76 	bl	5c6c <z_impl_k_sem_take>
	ctx->owner = spi_cfg;
    3780:	6065      	str	r5, [r4, #4]
	const struct spi_nrfx_config *dev_config = dev->config;
    3782:	f8d6 b004 	ldr.w	fp, [r6, #4]
	struct spi_nrfx_data *dev_data = dev->data;
    3786:	f8d6 a010 	ldr.w	sl, [r6, #16]
	uint32_t max_freq = dev_config->max_freq;
    378a:	f8db 3008 	ldr.w	r3, [fp, #8]
    378e:	9303      	str	r3, [sp, #12]
	if (dev_data->initialized && spi_context_configured(ctx, spi_cfg)) {
    3790:	f89a 305d 	ldrb.w	r3, [sl, #93]	; 0x5d
    3794:	9300      	str	r3, [sp, #0]
    3796:	b11b      	cbz	r3, 37a0 <spi_nrfx_transceive+0x4c>
    3798:	f8da 3000 	ldr.w	r3, [sl]
    379c:	429d      	cmp	r5, r3
    379e:	d06e      	beq.n	387e <spi_nrfx_transceive+0x12a>
	if (spi_cfg->operation & SPI_HALF_DUPLEX) {
    37a0:	88af      	ldrh	r7, [r5, #4]
    37a2:	0539      	lsls	r1, r7, #20
    37a4:	f100 8113 	bmi.w	39ce <spi_nrfx_transceive+0x27a>
	if (spi_cfg->operation & SPI_MODE_LOOP) {
    37a8:	f017 0f09 	tst.w	r7, #9
    37ac:	f040 810c 	bne.w	39c8 <spi_nrfx_transceive+0x274>
	if (SPI_WORD_SIZE_GET(spi_cfg->operation) != 8) {
    37b0:	f3c7 1345 	ubfx	r3, r7, #5, #6
    37b4:	2b08      	cmp	r3, #8
    37b6:	f040 8107 	bne.w	39c8 <spi_nrfx_transceive+0x274>
	if (spi_cfg->frequency < 125000) {
    37ba:	682b      	ldr	r3, [r5, #0]
    37bc:	9301      	str	r3, [sp, #4]
    37be:	9a01      	ldr	r2, [sp, #4]
    37c0:	4b94      	ldr	r3, [pc, #592]	; (3a14 <spi_nrfx_transceive+0x2c0>)
    37c2:	429a      	cmp	r2, r3
    37c4:	f240 8100 	bls.w	39c8 <spi_nrfx_transceive+0x274>
	config = dev_config->def_config;
    37c8:	f10b 0e0c 	add.w	lr, fp, #12
    37cc:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
    37d0:	f10d 0c10 	add.w	ip, sp, #16
    37d4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
	config.frequency = get_nrf_spim_frequency(MIN(spi_cfg->frequency,
    37d8:	9b03      	ldr	r3, [sp, #12]
    37da:	9a01      	ldr	r2, [sp, #4]
    37dc:	4293      	cmp	r3, r2
    37de:	bf28      	it	cs
    37e0:	4613      	movcs	r3, r2
	config = dev_config->def_config;
    37e2:	e89e 0003 	ldmia.w	lr, {r0, r1}
	if (frequency < 250000) {
    37e6:	4a8c      	ldr	r2, [pc, #560]	; (3a18 <spi_nrfx_transceive+0x2c4>)
    37e8:	4293      	cmp	r3, r2
	config = dev_config->def_config;
    37ea:	e88c 0003 	stmia.w	ip, {r0, r1}
	if (frequency < 250000) {
    37ee:	f240 80c2 	bls.w	3976 <spi_nrfx_transceive+0x222>
	} else if (frequency < 500000) {
    37f2:	4a8a      	ldr	r2, [pc, #552]	; (3a1c <spi_nrfx_transceive+0x2c8>)
    37f4:	4293      	cmp	r3, r2
    37f6:	f240 80c1 	bls.w	397c <spi_nrfx_transceive+0x228>
	} else if (frequency < 1000000) {
    37fa:	4a89      	ldr	r2, [pc, #548]	; (3a20 <spi_nrfx_transceive+0x2cc>)
    37fc:	4293      	cmp	r3, r2
    37fe:	f240 80c0 	bls.w	3982 <spi_nrfx_transceive+0x22e>
	} else if (frequency < 2000000) {
    3802:	4a88      	ldr	r2, [pc, #544]	; (3a24 <spi_nrfx_transceive+0x2d0>)
    3804:	4293      	cmp	r3, r2
    3806:	f240 80bf 	bls.w	3988 <spi_nrfx_transceive+0x234>
	} else if (frequency < 4000000) {
    380a:	4a87      	ldr	r2, [pc, #540]	; (3a28 <spi_nrfx_transceive+0x2d4>)
    380c:	4293      	cmp	r3, r2
    380e:	f240 80be 	bls.w	398e <spi_nrfx_transceive+0x23a>
	} else if (frequency < 8000000) {
    3812:	4a86      	ldr	r2, [pc, #536]	; (3a2c <spi_nrfx_transceive+0x2d8>)
    3814:	4293      	cmp	r3, r2
    3816:	f0c0 80bd 	bcc.w	3994 <spi_nrfx_transceive+0x240>
	} else if (frequency < 16000000) {
    381a:	4a85      	ldr	r2, [pc, #532]	; (3a30 <spi_nrfx_transceive+0x2dc>)
    381c:	4293      	cmp	r3, r2
    381e:	f0c0 80bc 	bcc.w	399a <spi_nrfx_transceive+0x246>
		return NRF_SPIM_FREQ_16M;
    3822:	4a84      	ldr	r2, [pc, #528]	; (3a34 <spi_nrfx_transceive+0x2e0>)
    3824:	4293      	cmp	r3, r2
    3826:	bf2c      	ite	cs
    3828:	f04f 53a0 	movcs.w	r3, #335544320	; 0x14000000
    382c:	f04f 6320 	movcc.w	r3, #167772160	; 0xa000000
	if (SPI_MODE_GET(operation) & SPI_MODE_CPOL) {
    3830:	07ba      	lsls	r2, r7, #30
	config.frequency = get_nrf_spim_frequency(MIN(spi_cfg->frequency,
    3832:	9306      	str	r3, [sp, #24]
	if (SPI_MODE_GET(operation) & SPI_MODE_CPOL) {
    3834:	f007 0304 	and.w	r3, r7, #4
    3838:	f140 80b2 	bpl.w	39a0 <spi_nrfx_transceive+0x24c>
			return NRF_SPIM_MODE_2;
    383c:	2b00      	cmp	r3, #0
    383e:	bf14      	ite	ne
    3840:	2303      	movne	r3, #3
    3842:	2302      	moveq	r3, #2
	config.mode      = get_nrf_spim_mode(spi_cfg->operation);
    3844:	f88d 301c 	strb.w	r3, [sp, #28]
	if (dev_data->initialized) {
    3848:	9b00      	ldr	r3, [sp, #0]
	if (operation & SPI_TRANSFER_LSB) {
    384a:	f3c7 1700 	ubfx	r7, r7, #4, #1
	config.bit_order = get_nrf_spim_bit_order(spi_cfg->operation);
    384e:	f88d 701d 	strb.w	r7, [sp, #29]
	if (dev_data->initialized) {
    3852:	b12b      	cbz	r3, 3860 <spi_nrfx_transceive+0x10c>
		nrfx_spim_uninit(&dev_config->spim);
    3854:	4658      	mov	r0, fp
    3856:	f001 fb1f 	bl	4e98 <nrfx_spim_uninit>
		dev_data->initialized = false;
    385a:	2300      	movs	r3, #0
    385c:	f88a 305d 	strb.w	r3, [sl, #93]	; 0x5d
	result = nrfx_spim_init(&dev_config->spim, &config,
    3860:	4653      	mov	r3, sl
    3862:	4a75      	ldr	r2, [pc, #468]	; (3a38 <spi_nrfx_transceive+0x2e4>)
    3864:	a904      	add	r1, sp, #16
    3866:	4658      	mov	r0, fp
    3868:	f001 fa16 	bl	4c98 <nrfx_spim_init>
	if (result != NRFX_SUCCESS) {
    386c:	4b73      	ldr	r3, [pc, #460]	; (3a3c <spi_nrfx_transceive+0x2e8>)
    386e:	4298      	cmp	r0, r3
    3870:	f040 809a 	bne.w	39a8 <spi_nrfx_transceive+0x254>
	dev_data->initialized = true;
    3874:	2301      	movs	r3, #1
    3876:	f88a 305d 	strb.w	r3, [sl, #93]	; 0x5d
	ctx->config = spi_cfg;
    387a:	f8ca 5000 	str.w	r5, [sl]
		dev_data->busy = true;
    387e:	2301      	movs	r3, #1
    3880:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
	ctx->current_tx = tx_bufs ? tx_bufs->buffers : NULL;
    3884:	f1b9 0f00 	cmp.w	r9, #0
    3888:	f040 80a4 	bne.w	39d4 <spi_nrfx_transceive+0x280>
    388c:	f8c4 9034 	str.w	r9, [r4, #52]	; 0x34
	ctx->tx_count = ctx->current_tx ? tx_bufs->count : 0;
    3890:	2300      	movs	r3, #0
    3892:	63a3      	str	r3, [r4, #56]	; 0x38
		spi_context_get_next_buf(&ctx->current_tx, &ctx->tx_count,
    3894:	f104 0248 	add.w	r2, r4, #72	; 0x48
    3898:	f104 0138 	add.w	r1, r4, #56	; 0x38
    389c:	f104 0034 	add.w	r0, r4, #52	; 0x34
    38a0:	f003 ff5a 	bl	7758 <spi_context_get_next_buf.constprop.0>
	ctx->tx_buf = (const uint8_t *)
    38a4:	6460      	str	r0, [r4, #68]	; 0x44
	ctx->current_rx = rx_bufs ? rx_bufs->buffers : NULL;
    38a6:	f1b8 0f00 	cmp.w	r8, #0
    38aa:	f040 809c 	bne.w	39e6 <spi_nrfx_transceive+0x292>
    38ae:	f8c4 803c 	str.w	r8, [r4, #60]	; 0x3c
	ctx->rx_count = ctx->current_rx ? rx_bufs->count : 0;
    38b2:	2300      	movs	r3, #0
    38b4:	6423      	str	r3, [r4, #64]	; 0x40
		spi_context_get_next_buf(&ctx->current_rx, &ctx->rx_count,
    38b6:	f104 0250 	add.w	r2, r4, #80	; 0x50
    38ba:	f104 0140 	add.w	r1, r4, #64	; 0x40
    38be:	f104 003c 	add.w	r0, r4, #60	; 0x3c
    38c2:	f003 ff49 	bl	7758 <spi_context_get_next_buf.constprop.0>
	ctx->sync_status = 0;
    38c6:	2500      	movs	r5, #0
	_spi_context_cs_control(ctx, on, false);
    38c8:	462a      	mov	r2, r5
	ctx->rx_buf = (uint8_t *)
    38ca:	64e0      	str	r0, [r4, #76]	; 0x4c
	_spi_context_cs_control(ctx, on, false);
    38cc:	2101      	movs	r1, #1
    38ce:	4620      	mov	r0, r4
	ctx->sync_status = 0;
    38d0:	6325      	str	r5, [r4, #48]	; 0x30
	_spi_context_cs_control(ctx, on, false);
    38d2:	f003 ff68 	bl	77a6 <_spi_context_cs_control>
		transfer_next_chunk(dev);
    38d6:	4630      	mov	r0, r6
    38d8:	f7ff fef0 	bl	36bc <transfer_next_chunk>
	for (n = 0; n < ctx->tx_count; ++n) {
    38dc:	6ba0      	ldr	r0, [r4, #56]	; 0x38
	size_t total_len = 0;
    38de:	462a      	mov	r2, r5
	for (n = 0; n < ctx->tx_count; ++n) {
    38e0:	462b      	mov	r3, r5
    38e2:	4283      	cmp	r3, r0
    38e4:	f040 8088 	bne.w	39f8 <spi_nrfx_transceive+0x2a4>
	size_t total_len = 0;
    38e8:	2300      	movs	r3, #0
	for (n = 0; n < ctx->rx_count; ++n) {
    38ea:	6c25      	ldr	r5, [r4, #64]	; 0x40
    38ec:	4619      	mov	r1, r3
    38ee:	42a9      	cmp	r1, r5
    38f0:	f040 8089 	bne.w	3a06 <spi_nrfx_transceive+0x2b2>
			timeout_ms = MAX(tx_len, rx_len) * 8 * 1000 /
    38f4:	4293      	cmp	r3, r2
				     ctx->config->frequency;
    38f6:	4627      	mov	r7, r4
			timeout_ms = MAX(tx_len, rx_len) * 8 * 1000 /
    38f8:	bf38      	it	cc
    38fa:	4613      	movcc	r3, r2
    38fc:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
    3900:	fb02 f503 	mul.w	r5, r2, r3
				     ctx->config->frequency;
    3904:	f857 3b20 	ldr.w	r3, [r7], #32
    3908:	f04f 0800 	mov.w	r8, #0
			timeout_ms = MAX(tx_len, rx_len) * 8 * 1000 /
    390c:	681b      	ldr	r3, [r3, #0]
    390e:	fbb5 f5f3 	udiv	r5, r5, r3
    3912:	f44f 4c00 	mov.w	ip, #32768	; 0x8000
			timeout_ms += CONFIG_SPI_COMPLETION_TIMEOUT_TOLERANCE;
    3916:	35c8      	adds	r5, #200	; 0xc8
    3918:	4641      	mov	r1, r8
    391a:	f240 30e7 	movw	r0, #999	; 0x3e7
    391e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    3922:	2300      	movs	r3, #0
    3924:	fbe5 010c 	umlal	r0, r1, r5, ip
    3928:	f7fc fbea 	bl	100 <__aeabi_uldivmod>
    392c:	4602      	mov	r2, r0
    392e:	460b      	mov	r3, r1
    3930:	4638      	mov	r0, r7
    3932:	f002 f99b 	bl	5c6c <z_impl_k_sem_take>
		if (k_sem_take(&ctx->sync, timeout)) {
    3936:	b918      	cbnz	r0, 3940 <spi_nrfx_transceive+0x1ec>
		status = ctx->sync_status;
    3938:	6b25      	ldr	r5, [r4, #48]	; 0x30
		if (error == -ETIMEDOUT) {
    393a:	f115 0f74 	cmn.w	r5, #116	; 0x74
    393e:	d135      	bne.n	39ac <spi_nrfx_transceive+0x258>
			nrfx_spim_uninit(&dev_config->spim);
    3940:	9802      	ldr	r0, [sp, #8]
			dev_data->chunk_len = 0;
    3942:	f8c4 8058 	str.w	r8, [r4, #88]	; 0x58
			nrfx_spim_uninit(&dev_config->spim);
    3946:	f001 faa7 	bl	4e98 <nrfx_spim_uninit>
			dev_data->initialized = false;
    394a:	f884 805d 	strb.w	r8, [r4, #93]	; 0x5d
			finish_transaction(dev, -ETIMEDOUT);
    394e:	6930      	ldr	r0, [r6, #16]
    3950:	f06f 0173 	mvn.w	r1, #115	; 0x73
    3954:	f003 ffc1 	bl	78da <finish_transaction.isra.0>
	z_impl_k_sem_reset(sem);
    3958:	4638      	mov	r0, r7
    395a:	f002 f9af 	bl	5cbc <z_impl_k_sem_reset>
		error = spi_context_wait_for_completion(&dev_data->ctx);
    395e:	f06f 0573 	mvn.w	r5, #115	; 0x73
}
    3962:	e023      	b.n	39ac <spi_nrfx_transceive+0x258>
	if ((spi_cfg->operation & SPI_LOCK_ON) &&
    3964:	69a3      	ldr	r3, [r4, #24]
    3966:	2b00      	cmp	r3, #0
    3968:	f47f af02 	bne.w	3770 <spi_nrfx_transceive+0x1c>
		(k_sem_count_get(&ctx->lock) == 0) &&
    396c:	6863      	ldr	r3, [r4, #4]
    396e:	4299      	cmp	r1, r3
    3970:	f47f aefe 	bne.w	3770 <spi_nrfx_transceive+0x1c>
    3974:	e705      	b.n	3782 <spi_nrfx_transceive+0x2e>
		return NRF_SPIM_FREQ_125K;
    3976:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
    397a:	e759      	b.n	3830 <spi_nrfx_transceive+0xdc>
		return NRF_SPIM_FREQ_250K;
    397c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
    3980:	e756      	b.n	3830 <spi_nrfx_transceive+0xdc>
		return NRF_SPIM_FREQ_500K;
    3982:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
    3986:	e753      	b.n	3830 <spi_nrfx_transceive+0xdc>
		return NRF_SPIM_FREQ_1M;
    3988:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    398c:	e750      	b.n	3830 <spi_nrfx_transceive+0xdc>
		return NRF_SPIM_FREQ_2M;
    398e:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
    3992:	e74d      	b.n	3830 <spi_nrfx_transceive+0xdc>
		return NRF_SPIM_FREQ_4M;
    3994:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    3998:	e74a      	b.n	3830 <spi_nrfx_transceive+0xdc>
		return NRF_SPIM_FREQ_8M;
    399a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
    399e:	e747      	b.n	3830 <spi_nrfx_transceive+0xdc>
		if (SPI_MODE_GET(operation) & SPI_MODE_CPHA) {
    39a0:	3b00      	subs	r3, #0
    39a2:	bf18      	it	ne
    39a4:	2301      	movne	r3, #1
    39a6:	e74d      	b.n	3844 <spi_nrfx_transceive+0xf0>
		return -EIO;
    39a8:	f06f 0504 	mvn.w	r5, #4
	if (!(ctx->config->operation & SPI_LOCK_ON)) {
    39ac:	6823      	ldr	r3, [r4, #0]
    39ae:	889b      	ldrh	r3, [r3, #4]
    39b0:	f413 5300 	ands.w	r3, r3, #8192	; 0x2000
    39b4:	d104      	bne.n	39c0 <spi_nrfx_transceive+0x26c>
		ctx->owner = NULL;
    39b6:	6063      	str	r3, [r4, #4]
	z_impl_k_sem_give(sem);
    39b8:	f104 0010 	add.w	r0, r4, #16
    39bc:	f002 f936 	bl	5c2c <z_impl_k_sem_give>
	return transceive(dev, spi_cfg, tx_bufs, rx_bufs, false, NULL, NULL);
}
    39c0:	4628      	mov	r0, r5
    39c2:	b00b      	add	sp, #44	; 0x2c
    39c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return -EINVAL;
    39c8:	f06f 0515 	mvn.w	r5, #21
    39cc:	e7ee      	b.n	39ac <spi_nrfx_transceive+0x258>
		return -ENOTSUP;
    39ce:	f06f 0585 	mvn.w	r5, #133	; 0x85
    39d2:	e7eb      	b.n	39ac <spi_nrfx_transceive+0x258>
	ctx->current_tx = tx_bufs ? tx_bufs->buffers : NULL;
    39d4:	f8d9 3000 	ldr.w	r3, [r9]
    39d8:	6363      	str	r3, [r4, #52]	; 0x34
	ctx->tx_count = ctx->current_tx ? tx_bufs->count : 0;
    39da:	2b00      	cmp	r3, #0
    39dc:	f43f af58 	beq.w	3890 <spi_nrfx_transceive+0x13c>
    39e0:	f8d9 3004 	ldr.w	r3, [r9, #4]
    39e4:	e755      	b.n	3892 <spi_nrfx_transceive+0x13e>
	ctx->current_rx = rx_bufs ? rx_bufs->buffers : NULL;
    39e6:	f8d8 3000 	ldr.w	r3, [r8]
    39ea:	63e3      	str	r3, [r4, #60]	; 0x3c
	ctx->rx_count = ctx->current_rx ? rx_bufs->count : 0;
    39ec:	2b00      	cmp	r3, #0
    39ee:	f43f af60 	beq.w	38b2 <spi_nrfx_transceive+0x15e>
    39f2:	f8d8 3004 	ldr.w	r3, [r8, #4]
    39f6:	e75d      	b.n	38b4 <spi_nrfx_transceive+0x160>
		total_len += ctx->current_tx[n].len;
    39f8:	6b61      	ldr	r1, [r4, #52]	; 0x34
    39fa:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
	for (n = 0; n < ctx->tx_count; ++n) {
    39fe:	3301      	adds	r3, #1
		total_len += ctx->current_tx[n].len;
    3a00:	6849      	ldr	r1, [r1, #4]
    3a02:	440a      	add	r2, r1
	for (n = 0; n < ctx->tx_count; ++n) {
    3a04:	e76d      	b.n	38e2 <spi_nrfx_transceive+0x18e>
		total_len += ctx->current_rx[n].len;
    3a06:	6be0      	ldr	r0, [r4, #60]	; 0x3c
    3a08:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
	for (n = 0; n < ctx->rx_count; ++n) {
    3a0c:	3101      	adds	r1, #1
		total_len += ctx->current_rx[n].len;
    3a0e:	6840      	ldr	r0, [r0, #4]
    3a10:	4403      	add	r3, r0
	for (n = 0; n < ctx->rx_count; ++n) {
    3a12:	e76c      	b.n	38ee <spi_nrfx_transceive+0x19a>
    3a14:	0001e847 	.word	0x0001e847
    3a18:	0003d08f 	.word	0x0003d08f
    3a1c:	0007a11f 	.word	0x0007a11f
    3a20:	000f423f 	.word	0x000f423f
    3a24:	001e847f 	.word	0x001e847f
    3a28:	003d08ff 	.word	0x003d08ff
    3a2c:	007a1200 	.word	0x007a1200
    3a30:	00f42400 	.word	0x00f42400
    3a34:	01e84800 	.word	0x01e84800
    3a38:	000078fb 	.word	0x000078fb
    3a3c:	0bad0000 	.word	0x0bad0000

00003a40 <compare_int_lock>:
	return 0;
#endif
}

static bool compare_int_lock(int32_t chan)
{
    3a40:	b570      	push	{r4, r5, r6, lr}
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
    3a42:	2301      	movs	r3, #1
    3a44:	4083      	lsls	r3, r0
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    3a46:	4a0e      	ldr	r2, [pc, #56]	; (3a80 <compare_int_lock+0x40>)
    3a48:	f3bf 8f5b 	dmb	ish
    3a4c:	43dc      	mvns	r4, r3
    3a4e:	e852 1f00 	ldrex	r1, [r2]
    3a52:	ea01 0504 	and.w	r5, r1, r4
    3a56:	e842 5600 	strex	r6, r5, [r2]
    3a5a:	2e00      	cmp	r6, #0
    3a5c:	d1f7      	bne.n	3a4e <compare_int_lock+0xe>
    3a5e:	f3bf 8f5b 	dmb	ish

	nrf_rtc_int_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
    3a62:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    3a66:	4082      	lsls	r2, r0
    p_reg->INTENSET = mask;
}

NRF_STATIC_INLINE void nrf_rtc_int_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->INTENCLR = mask;
    3a68:	4806      	ldr	r0, [pc, #24]	; (3a84 <compare_int_lock+0x44>)
    3a6a:	f8c0 2308 	str.w	r2, [r0, #776]	; 0x308
  __ASM volatile ("dmb 0xF":::"memory");
    3a6e:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("isb 0xF":::"memory");
    3a72:	f3bf 8f6f 	isb	sy

	__DMB();
	__ISB();

	return prev & BIT(chan);
    3a76:	420b      	tst	r3, r1
}
    3a78:	bf14      	ite	ne
    3a7a:	2001      	movne	r0, #1
    3a7c:	2000      	moveq	r0, #0
    3a7e:	bd70      	pop	{r4, r5, r6, pc}
    3a80:	20000bcc 	.word	0x20000bcc
    3a84:	40011000 	.word	0x40011000

00003a88 <sys_clock_timeout_handler>:
}

static void sys_clock_timeout_handler(int32_t chan,
				      uint64_t expire_time,
				      void *user_data)
{
    3a88:	b470      	push	{r4, r5, r6}
	uint32_t cc_value = absolute_time_to_cc(expire_time);
	uint32_t dticks = (uint32_t)(expire_time - last_count) / CYC_PER_TICK;
    3a8a:	490e      	ldr	r1, [pc, #56]	; (3ac4 <sys_clock_timeout_handler+0x3c>)
    3a8c:	e9d1 3400 	ldrd	r3, r4, [r1]
    3a90:	1ad0      	subs	r0, r2, r3

	last_count += dticks * CYC_PER_TICK;
    3a92:	18c3      	adds	r3, r0, r3
    3a94:	f144 0400 	adc.w	r4, r4, #0
	return absolute_time & COUNTER_MAX;
    3a98:	f022 467f 	bic.w	r6, r2, #4278190080	; 0xff000000
	last_count += dticks * CYC_PER_TICK;
    3a9c:	e9c1 3400 	strd	r3, r4, [r1]
	return (cc_value >= ANCHOR_RANGE_START) && (cc_value < ANCHOR_RANGE_END);
    3aa0:	f5a6 1300 	sub.w	r3, r6, #2097152	; 0x200000
	if (in_anchor_range(cc_value)) {
    3aa4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
    3aa8:	d209      	bcs.n	3abe <sys_clock_timeout_handler+0x36>
		anchor = (((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH) + cc_value;
    3aaa:	4b07      	ldr	r3, [pc, #28]	; (3ac8 <sys_clock_timeout_handler+0x40>)
    3aac:	681b      	ldr	r3, [r3, #0]
    3aae:	0a1a      	lsrs	r2, r3, #8
    3ab0:	061b      	lsls	r3, r3, #24
    3ab2:	199c      	adds	r4, r3, r6
    3ab4:	4b05      	ldr	r3, [pc, #20]	; (3acc <sys_clock_timeout_handler+0x44>)
    3ab6:	f142 0500 	adc.w	r5, r2, #0
    3aba:	e9c3 4500 	strd	r4, r5, [r3]
		compare_set(chan, last_count + CYC_PER_TICK,
					  sys_clock_timeout_handler, NULL);
	}

	sys_clock_announce(dticks);
}
    3abe:	bc70      	pop	{r4, r5, r6}
	sys_clock_announce(dticks);
    3ac0:	f002 bd7c 	b.w	65bc <sys_clock_announce>
    3ac4:	20000340 	.word	0x20000340
    3ac8:	20000bd0 	.word	0x20000bd0
    3acc:	20000348 	.word	0x20000348

00003ad0 <compare_int_unlock>:
	if (key) {
    3ad0:	b311      	cbz	r1, 3b18 <compare_int_unlock+0x48>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    3ad2:	f3bf 8f5b 	dmb	ish
		atomic_or(&int_mask, BIT(chan));
    3ad6:	2301      	movs	r3, #1
    3ad8:	4a10      	ldr	r2, [pc, #64]	; (3b1c <compare_int_unlock+0x4c>)
    3ada:	4083      	lsls	r3, r0
    3adc:	e852 cf00 	ldrex	ip, [r2]
    3ae0:	ea4c 0c03 	orr.w	ip, ip, r3
    3ae4:	e842 c100 	strex	r1, ip, [r2]
    3ae8:	2900      	cmp	r1, #0
    3aea:	d1f7      	bne.n	3adc <compare_int_unlock+0xc>
    3aec:	f3bf 8f5b 	dmb	ish
    p_reg->INTENSET = mask;
    3af0:	4a0b      	ldr	r2, [pc, #44]	; (3b20 <compare_int_unlock+0x50>)
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    3af2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    3af6:	4083      	lsls	r3, r0
    3af8:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    3afc:	4b09      	ldr	r3, [pc, #36]	; (3b24 <compare_int_unlock+0x54>)
    3afe:	f3bf 8f5b 	dmb	ish
    3b02:	681b      	ldr	r3, [r3, #0]
    3b04:	f3bf 8f5b 	dmb	ish
		if (atomic_get(&force_isr_mask) & BIT(chan)) {
    3b08:	40c3      	lsrs	r3, r0
    3b0a:	07db      	lsls	r3, r3, #31
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    3b0c:	bf42      	ittt	mi
    3b0e:	4b06      	ldrmi	r3, [pc, #24]	; (3b28 <compare_int_unlock+0x58>)
    3b10:	f44f 3200 	movmi.w	r2, #131072	; 0x20000
    3b14:	f8c3 2100 	strmi.w	r2, [r3, #256]	; 0x100
}
    3b18:	4770      	bx	lr
    3b1a:	bf00      	nop
    3b1c:	20000bcc 	.word	0x20000bcc
    3b20:	40011000 	.word	0x40011000
    3b24:	20000bc8 	.word	0x20000bc8
    3b28:	e000e100 	.word	0xe000e100

00003b2c <z_nrf_rtc_timer_read>:
	uint64_t val = ((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH;
    3b2c:	4b0d      	ldr	r3, [pc, #52]	; (3b64 <z_nrf_rtc_timer_read+0x38>)
    3b2e:	6818      	ldr	r0, [r3, #0]
    3b30:	0a01      	lsrs	r1, r0, #8
    3b32:	0600      	lsls	r0, r0, #24
  __ASM volatile ("dmb 0xF":::"memory");
    3b34:	f3bf 8f5f 	dmb	sy
    nrf_event_readback((uint8_t *)p_reg + (uint32_t)event);
}

NRF_STATIC_INLINE uint32_t nrf_rtc_counter_get(NRF_RTC_Type const * p_reg)
{
     return p_reg->COUNTER;
    3b38:	4b0b      	ldr	r3, [pc, #44]	; (3b68 <z_nrf_rtc_timer_read+0x3c>)
    3b3a:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	val += cntr;
    3b3e:	1818      	adds	r0, r3, r0
    3b40:	f141 0100 	adc.w	r1, r1, #0
	if (cntr < OVERFLOW_RISK_RANGE_END) {
    3b44:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
    3b48:	d20a      	bcs.n	3b60 <z_nrf_rtc_timer_read+0x34>
		if (val < anchor) {
    3b4a:	4b08      	ldr	r3, [pc, #32]	; (3b6c <z_nrf_rtc_timer_read+0x40>)
    3b4c:	e9d3 2300 	ldrd	r2, r3, [r3]
    3b50:	4290      	cmp	r0, r2
    3b52:	eb71 0303 	sbcs.w	r3, r1, r3
    3b56:	d203      	bcs.n	3b60 <z_nrf_rtc_timer_read+0x34>
			val += COUNTER_SPAN;
    3b58:	f110 7080 	adds.w	r0, r0, #16777216	; 0x1000000
    3b5c:	f141 0100 	adc.w	r1, r1, #0
}
    3b60:	4770      	bx	lr
    3b62:	bf00      	nop
    3b64:	20000bd0 	.word	0x20000bd0
    3b68:	40011000 	.word	0x40011000
    3b6c:	20000348 	.word	0x20000348

00003b70 <compare_set>:
{
    3b70:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3b74:	4616      	mov	r6, r2
    3b76:	461f      	mov	r7, r3
    3b78:	4604      	mov	r4, r0
	key = compare_int_lock(chan);
    3b7a:	f7ff ff61 	bl	3a40 <compare_int_lock>
    3b7e:	9000      	str	r0, [sp, #0]
	uint64_t curr_time = z_nrf_rtc_timer_read();
    3b80:	f7ff ffd4 	bl	3b2c <z_nrf_rtc_timer_read>
	if (curr_time < target_time) {
    3b84:	42b0      	cmp	r0, r6
    3b86:	eb71 0307 	sbcs.w	r3, r1, r7
    3b8a:	d251      	bcs.n	3c30 <compare_set+0xc0>
		if (target_time - curr_time > COUNTER_HALF_SPAN) {
    3b8c:	4b3a      	ldr	r3, [pc, #232]	; (3c78 <compare_set+0x108>)
    3b8e:	1a30      	subs	r0, r6, r0
    3b90:	eb67 0101 	sbc.w	r1, r7, r1
    3b94:	4298      	cmp	r0, r3
    3b96:	f171 0100 	sbcs.w	r1, r1, #0
    3b9a:	d26a      	bcs.n	3c72 <compare_set+0x102>
		if (target_time != cc_data[chan].target_time) {
    3b9c:	4b37      	ldr	r3, [pc, #220]	; (3c7c <compare_set+0x10c>)
    3b9e:	eb03 1304 	add.w	r3, r3, r4, lsl #4
    3ba2:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
    3ba6:	429f      	cmp	r7, r3
    3ba8:	bf08      	it	eq
    3baa:	4296      	cmpeq	r6, r2
    3bac:	d04e      	beq.n	3c4c <compare_set+0xdc>
    p_reg->EVTENSET = mask;
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
    3bae:	4934      	ldr	r1, [pc, #208]	; (3c80 <compare_set+0x110>)
	nrf_rtc_event_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
    3bb0:	f44f 3980 	mov.w	r9, #65536	; 0x10000
	return nrf_rtc_event_check(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
    3bb4:	f104 0550 	add.w	r5, r4, #80	; 0x50
	nrf_rtc_event_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
    3bb8:	fa09 f904 	lsl.w	r9, r9, r4
	return nrf_rtc_event_check(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
    3bbc:	00ad      	lsls	r5, r5, #2
    3bbe:	f8c1 9348 	str.w	r9, [r1, #840]	; 0x348
	event_clear(chan);
    3bc2:	4620      	mov	r0, r4
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    3bc4:	b2ad      	uxth	r5, r5
    3bc6:	f003 fee5 	bl	7994 <event_clear>
	return absolute_time & COUNTER_MAX;
    3bca:	f026 4b7f 	bic.w	fp, r6, #4278190080	; 0xff000000
    3bce:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
    p_reg->CC[ch] = cc_val;
    3bd2:	f504 73a8 	add.w	r3, r4, #336	; 0x150
		if (counter_sub(cc_val, now + MIN_CYCLES_FROM_NOW) >
    3bd6:	4a2b      	ldr	r2, [pc, #172]	; (3c84 <compare_set+0x114>)
    3bd8:	9301      	str	r3, [sp, #4]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    3bda:	f505 3588 	add.w	r5, r5, #69632	; 0x11000
	uint32_t cc_val = req_cc;
    3bde:	46dc      	mov	ip, fp
	uint32_t cc_inc = MIN_CYCLES_FROM_NOW;
    3be0:	f04f 0a03 	mov.w	sl, #3
    p_reg->CC[ch] = cc_val;
    3be4:	9b01      	ldr	r3, [sp, #4]
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    3be6:	f02c 407f 	bic.w	r0, ip, #4278190080	; 0xff000000
    3bea:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
    p_reg->EVTENSET = mask;
    3bee:	f8c1 9344 	str.w	r9, [r1, #836]	; 0x344
     return p_reg->COUNTER;
    3bf2:	f8d1 8504 	ldr.w	r8, [r1, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
    3bf6:	f06f 0002 	mvn.w	r0, #2
    3bfa:	eba0 0008 	sub.w	r0, r0, r8
    3bfe:	4460      	add	r0, ip
    3c00:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		if (counter_sub(cc_val, now + MIN_CYCLES_FROM_NOW) >
    3c04:	4290      	cmp	r0, r2
    3c06:	d921      	bls.n	3c4c <compare_set+0xdc>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    3c08:	6828      	ldr	r0, [r5, #0]
			if (event_check(chan)) {
    3c0a:	b160      	cbz	r0, 3c26 <compare_set+0xb6>
     return p_reg->COUNTER;
    3c0c:	f8d1 8504 	ldr.w	r8, [r1, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
    3c10:	eba8 000b 	sub.w	r0, r8, fp
    3c14:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
				if (counter_sub(now, req_cc) > COUNTER_HALF_SPAN) {
    3c18:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    3c1c:	d916      	bls.n	3c4c <compare_set+0xdc>
					event_clear(chan);
    3c1e:	4620      	mov	r0, r4
    3c20:	f003 feb8 	bl	7994 <event_clear>
    3c24:	4a17      	ldr	r2, [pc, #92]	; (3c84 <compare_set+0x114>)
			cc_val = now + cc_inc;
    3c26:	eb0a 0c08 	add.w	ip, sl, r8
			cc_inc++;
    3c2a:	f10a 0a01 	add.w	sl, sl, #1
	for (;;) {
    3c2e:	e7d9      	b.n	3be4 <compare_set+0x74>
		atomic_or(&force_isr_mask, BIT(chan));
    3c30:	2301      	movs	r3, #1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    3c32:	4a15      	ldr	r2, [pc, #84]	; (3c88 <compare_set+0x118>)
    3c34:	f3bf 8f5b 	dmb	ish
    3c38:	40a3      	lsls	r3, r4
    3c3a:	e852 0f00 	ldrex	r0, [r2]
    3c3e:	4318      	orrs	r0, r3
    3c40:	e842 0100 	strex	r1, r0, [r2]
    3c44:	2900      	cmp	r1, #0
    3c46:	d1f8      	bne.n	3c3a <compare_set+0xca>
    3c48:	f3bf 8f5b 	dmb	ish
	cc_data[chan].target_time = target_time;
    3c4c:	490b      	ldr	r1, [pc, #44]	; (3c7c <compare_set+0x10c>)
	cc_data[chan].callback = handler;
    3c4e:	980c      	ldr	r0, [sp, #48]	; 0x30
	cc_data[chan].target_time = target_time;
    3c50:	0123      	lsls	r3, r4, #4
    3c52:	eb01 1204 	add.w	r2, r1, r4, lsl #4
    3c56:	e9c2 6702 	strd	r6, r7, [r2, #8]
	cc_data[chan].callback = handler;
    3c5a:	50c8      	str	r0, [r1, r3]
	cc_data[chan].user_context = user_data;
    3c5c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    3c5e:	6053      	str	r3, [r2, #4]
	return ret;
    3c60:	2500      	movs	r5, #0
	compare_int_unlock(chan, key);
    3c62:	4620      	mov	r0, r4
    3c64:	9900      	ldr	r1, [sp, #0]
    3c66:	f7ff ff33 	bl	3ad0 <compare_int_unlock>
}
    3c6a:	4628      	mov	r0, r5
    3c6c:	b003      	add	sp, #12
    3c6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			return -EINVAL;
    3c72:	f06f 0515 	mvn.w	r5, #21
    3c76:	e7f4      	b.n	3c62 <compare_set+0xf2>
    3c78:	00800001 	.word	0x00800001
    3c7c:	20000330 	.word	0x20000330
    3c80:	40011000 	.word	0x40011000
    3c84:	007ffffd 	.word	0x007ffffd
    3c88:	20000bc8 	.word	0x20000bc8

00003c8c <sys_clock_driver_init>:
	int_event_disable_rtc();
	NVIC_ClearPendingIRQ(RTC_IRQn);
}

static int sys_clock_driver_init(void)
{
    3c8c:	b573      	push	{r0, r1, r4, r5, r6, lr}
    p_reg->INTENCLR = mask;
    3c8e:	4c1b      	ldr	r4, [pc, #108]	; (3cfc <sys_clock_driver_init+0x70>)
    3c90:	4b1b      	ldr	r3, [pc, #108]	; (3d00 <sys_clock_driver_init+0x74>)
    3c92:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
    p_reg->EVTENCLR = mask;
    3c96:	f8c4 3348 	str.w	r3, [r4, #840]	; 0x348
	int_event_disable_rtc();

	/* TODO: replace with counter driver to access RTC */
	nrf_rtc_prescaler_set(RTC, 0);
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
		cc_data[chan].target_time = TARGET_TIME_INVALID;
    3c9a:	4b1a      	ldr	r3, [pc, #104]	; (3d04 <sys_clock_driver_init+0x78>)
    p_reg->PRESCALER = val;
    3c9c:	2500      	movs	r5, #0
    3c9e:	f04f 30ff 	mov.w	r0, #4294967295
    3ca2:	f04f 31ff 	mov.w	r1, #4294967295
    3ca6:	f8c4 5508 	str.w	r5, [r4, #1288]	; 0x508
    3caa:	e9c3 0102 	strd	r0, r1, [r3, #8]
    p_reg->INTENSET = mask;
    3cae:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    3cb2:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    3cb6:	4b14      	ldr	r3, [pc, #80]	; (3d08 <sys_clock_driver_init+0x7c>)
    3cb8:	2602      	movs	r6, #2
    3cba:	f44f 3200 	mov.w	r2, #131072	; 0x20000

	nrf_rtc_int_enable(RTC, NRF_RTC_INT_OVERFLOW_MASK);

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
    3cbe:	2101      	movs	r1, #1
    3cc0:	f8c4 6304 	str.w	r6, [r4, #772]	; 0x304
    3cc4:	2011      	movs	r0, #17
    3cc6:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    3cca:	462a      	mov	r2, r5
    3ccc:	f7fd fe6c 	bl	19a8 <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
    3cd0:	2011      	movs	r0, #17
    3cd2:	f7fd fe39 	bl	1948 <arch_irq_enable>

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
    3cd6:	4a0d      	ldr	r2, [pc, #52]	; (3d0c <sys_clock_driver_init+0x80>)
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    3cd8:	2301      	movs	r3, #1
    3cda:	60a3      	str	r3, [r4, #8]
    3cdc:	6023      	str	r3, [r4, #0]
    3cde:	6013      	str	r3, [r2, #0]
	}

	uint32_t initial_timeout = IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
		MAX_CYCLES : CYC_PER_TICK;

	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
    3ce0:	4b0b      	ldr	r3, [pc, #44]	; (3d10 <sys_clock_driver_init+0x84>)
    3ce2:	4a0c      	ldr	r2, [pc, #48]	; (3d14 <sys_clock_driver_init+0x88>)
    3ce4:	9300      	str	r3, [sp, #0]
    3ce6:	9501      	str	r5, [sp, #4]
    3ce8:	2300      	movs	r3, #0
    3cea:	4628      	mov	r0, r5
    3cec:	f7ff ff40 	bl	3b70 <compare_set>

	z_nrf_clock_control_lf_on(mode);
    3cf0:	4630      	mov	r0, r6
    3cf2:	f7fe fdab 	bl	284c <z_nrf_clock_control_lf_on>

	return 0;
}
    3cf6:	4628      	mov	r0, r5
    3cf8:	b002      	add	sp, #8
    3cfa:	bd70      	pop	{r4, r5, r6, pc}
    3cfc:	40011000 	.word	0x40011000
    3d00:	000f0003 	.word	0x000f0003
    3d04:	20000330 	.word	0x20000330
    3d08:	e000e100 	.word	0xe000e100
    3d0c:	20000bcc 	.word	0x20000bcc
    3d10:	00003a89 	.word	0x00003a89
    3d14:	007fffff 	.word	0x007fffff

00003d18 <rtc_nrf_isr>:
{
    3d18:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    return p_reg->INTENSET & mask;
    3d1c:	4c2f      	ldr	r4, [pc, #188]	; (3ddc <rtc_nrf_isr+0xc4>)
    3d1e:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, NRF_RTC_INT_OVERFLOW_MASK) &&
    3d22:	0799      	lsls	r1, r3, #30
    3d24:	d50b      	bpl.n	3d3e <rtc_nrf_isr+0x26>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    3d26:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    3d2a:	b143      	cbz	r3, 3d3e <rtc_nrf_isr+0x26>
		overflow_cnt++;
    3d2c:	4a2c      	ldr	r2, [pc, #176]	; (3de0 <rtc_nrf_isr+0xc8>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    3d2e:	2300      	movs	r3, #0
    3d30:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
    3d34:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    3d38:	6813      	ldr	r3, [r2, #0]
    3d3a:	3301      	adds	r3, #1
    3d3c:	6013      	str	r3, [r2, #0]
    return p_reg->INTENSET & mask;
    3d3e:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan))) {
    3d42:	03da      	lsls	r2, r3, #15
    3d44:	d52a      	bpl.n	3d9c <rtc_nrf_isr+0x84>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    3d46:	f3bf 8f5b 	dmb	ish
    3d4a:	4b26      	ldr	r3, [pc, #152]	; (3de4 <rtc_nrf_isr+0xcc>)
    3d4c:	e853 2f00 	ldrex	r2, [r3]
    3d50:	f022 0101 	bic.w	r1, r2, #1
    3d54:	e843 1000 	strex	r0, r1, [r3]
    3d58:	2800      	cmp	r0, #0
    3d5a:	d1f7      	bne.n	3d4c <rtc_nrf_isr+0x34>
    3d5c:	f3bf 8f5b 	dmb	ish
		if ((atomic_and(&force_isr_mask, ~BIT(chan)) & BIT(chan)) ||
    3d60:	07d3      	lsls	r3, r2, #31
    3d62:	d402      	bmi.n	3d6a <rtc_nrf_isr+0x52>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    3d64:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
    3d68:	b1c3      	cbz	r3, 3d9c <rtc_nrf_isr+0x84>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    3d6a:	2500      	movs	r5, #0
    3d6c:	f8c4 5140 	str.w	r5, [r4, #320]	; 0x140
    3d70:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
		curr_time = z_nrf_rtc_timer_read();
    3d74:	f7ff feda 	bl	3b2c <z_nrf_rtc_timer_read>
	__asm__ volatile(
    3d78:	f04f 0320 	mov.w	r3, #32
    3d7c:	f3ef 8211 	mrs	r2, BASEPRI
    3d80:	f383 8812 	msr	BASEPRI_MAX, r3
    3d84:	f3bf 8f6f 	isb	sy
		expire_time = cc_data[chan].target_time;
    3d88:	4b17      	ldr	r3, [pc, #92]	; (3de8 <rtc_nrf_isr+0xd0>)
    3d8a:	e9d3 6702 	ldrd	r6, r7, [r3, #8]
		if (curr_time >= expire_time) {
    3d8e:	42b0      	cmp	r0, r6
    3d90:	41b9      	sbcs	r1, r7
    3d92:	d206      	bcs.n	3da2 <rtc_nrf_isr+0x8a>
	__asm__ volatile(
    3d94:	f382 8811 	msr	BASEPRI, r2
    3d98:	f3bf 8f6f 	isb	sy
}
    3d9c:	b003      	add	sp, #12
    3d9e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			cc_data[chan].target_time = TARGET_TIME_INVALID;
    3da2:	f04f 38ff 	mov.w	r8, #4294967295
    3da6:	f04f 39ff 	mov.w	r9, #4294967295
    3daa:	e9c3 8902 	strd	r8, r9, [r3, #8]
			user_context = cc_data[chan].user_context;
    3dae:	e9d3 1000 	ldrd	r1, r0, [r3]
			cc_data[chan].callback = NULL;
    3db2:	601d      	str	r5, [r3, #0]
    p_reg->EVTENCLR = mask;
    3db4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    3db8:	f8c4 3348 	str.w	r3, [r4, #840]	; 0x348
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    3dbc:	f8c4 5140 	str.w	r5, [r4, #320]	; 0x140
    3dc0:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
    3dc4:	f382 8811 	msr	BASEPRI, r2
    3dc8:	f3bf 8f6f 	isb	sy
		if (handler) {
    3dcc:	2900      	cmp	r1, #0
    3dce:	d0e5      	beq.n	3d9c <rtc_nrf_isr+0x84>
			handler(chan, expire_time, user_context);
    3dd0:	9000      	str	r0, [sp, #0]
    3dd2:	4632      	mov	r2, r6
    3dd4:	463b      	mov	r3, r7
    3dd6:	4628      	mov	r0, r5
    3dd8:	4788      	blx	r1
    3dda:	e7df      	b.n	3d9c <rtc_nrf_isr+0x84>
    3ddc:	40011000 	.word	0x40011000
    3de0:	20000bd0 	.word	0x20000bd0
    3de4:	20000bc8 	.word	0x20000bc8
    3de8:	20000330 	.word	0x20000330

00003dec <sys_clock_set_timeout>:
	if (ticks == K_TICKS_FOREVER) {
    3dec:	1c43      	adds	r3, r0, #1
{
    3dee:	b513      	push	{r0, r1, r4, lr}
	if (ticks == K_TICKS_FOREVER) {
    3df0:	d022      	beq.n	3e38 <sys_clock_set_timeout+0x4c>
		cyc = CLAMP(ticks, 1, (int32_t)MAX_TICKS);
    3df2:	2801      	cmp	r0, #1
    3df4:	dd22      	ble.n	3e3c <sys_clock_set_timeout+0x50>
    3df6:	4a12      	ldr	r2, [pc, #72]	; (3e40 <sys_clock_set_timeout+0x54>)
    3df8:	4b12      	ldr	r3, [pc, #72]	; (3e44 <sys_clock_set_timeout+0x58>)
    3dfa:	4290      	cmp	r0, r2
    3dfc:	bfd4      	ite	le
    3dfe:	4604      	movle	r4, r0
    3e00:	461c      	movgt	r4, r3
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
    3e02:	f7ff fe93 	bl	3b2c <z_nrf_rtc_timer_read>
    3e06:	4b10      	ldr	r3, [pc, #64]	; (3e48 <sys_clock_set_timeout+0x5c>)
	if (cyc > MAX_CYCLES) {
    3e08:	490e      	ldr	r1, [pc, #56]	; (3e44 <sys_clock_set_timeout+0x58>)
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
    3e0a:	e9d3 2300 	ldrd	r2, r3, [r3]
    3e0e:	1a80      	subs	r0, r0, r2
		cyc = 0;
    3e10:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    3e14:	bf28      	it	cs
    3e16:	2400      	movcs	r4, #0
	cyc += unannounced;
    3e18:	4404      	add	r4, r0
	if (cyc > MAX_CYCLES) {
    3e1a:	428c      	cmp	r4, r1
    3e1c:	bf28      	it	cs
    3e1e:	460c      	movcs	r4, r1
	uint64_t target_time = cyc + last_count;
    3e20:	18a2      	adds	r2, r4, r2
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
    3e22:	490a      	ldr	r1, [pc, #40]	; (3e4c <sys_clock_set_timeout+0x60>)
    3e24:	9100      	str	r1, [sp, #0]
	uint64_t target_time = cyc + last_count;
    3e26:	f04f 0000 	mov.w	r0, #0
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
    3e2a:	9001      	str	r0, [sp, #4]
    3e2c:	f143 0300 	adc.w	r3, r3, #0
    3e30:	f7ff fe9e 	bl	3b70 <compare_set>
}
    3e34:	b002      	add	sp, #8
    3e36:	bd10      	pop	{r4, pc}
		cyc = MAX_TICKS * CYC_PER_TICK;
    3e38:	4c02      	ldr	r4, [pc, #8]	; (3e44 <sys_clock_set_timeout+0x58>)
    3e3a:	e7e2      	b.n	3e02 <sys_clock_set_timeout+0x16>
		cyc = CLAMP(ticks, 1, (int32_t)MAX_TICKS);
    3e3c:	2401      	movs	r4, #1
    3e3e:	e7e0      	b.n	3e02 <sys_clock_set_timeout+0x16>
    3e40:	007ffffe 	.word	0x007ffffe
    3e44:	007fffff 	.word	0x007fffff
    3e48:	20000340 	.word	0x20000340
    3e4c:	00003a89 	.word	0x00003a89

00003e50 <sys_clock_elapsed>:
{
    3e50:	b508      	push	{r3, lr}
	return (z_nrf_rtc_timer_read() - last_count) / CYC_PER_TICK;
    3e52:	f7ff fe6b 	bl	3b2c <z_nrf_rtc_timer_read>
    3e56:	4b02      	ldr	r3, [pc, #8]	; (3e60 <sys_clock_elapsed+0x10>)
    3e58:	681b      	ldr	r3, [r3, #0]
}
    3e5a:	1ac0      	subs	r0, r0, r3
    3e5c:	bd08      	pop	{r3, pc}
    3e5e:	bf00      	nop
    3e60:	20000340 	.word	0x20000340

00003e64 <sys_clock_disable>:
{
    3e64:	b510      	push	{r4, lr}
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    3e66:	4c08      	ldr	r4, [pc, #32]	; (3e88 <sys_clock_disable+0x24>)
    3e68:	2301      	movs	r3, #1
    3e6a:	6063      	str	r3, [r4, #4]
	irq_disable(RTC_IRQn);
    3e6c:	2011      	movs	r0, #17
    3e6e:	f7fd fd79 	bl	1964 <arch_irq_disable>
    p_reg->INTENCLR = mask;
    3e72:	4b06      	ldr	r3, [pc, #24]	; (3e8c <sys_clock_disable+0x28>)
    3e74:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
    p_reg->EVTENCLR = mask;
    3e78:	f8c4 3348 	str.w	r3, [r4, #840]	; 0x348
    3e7c:	4b04      	ldr	r3, [pc, #16]	; (3e90 <sys_clock_disable+0x2c>)
    3e7e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    3e82:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
}
    3e86:	bd10      	pop	{r4, pc}
    3e88:	40011000 	.word	0x40011000
    3e8c:	000f0003 	.word	0x000f0003
    3e90:	e000e100 	.word	0xe000e100

00003e94 <__NVIC_SystemReset>:
  __ASM volatile ("dsb 0xF":::"memory");
    3e94:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    3e98:	4905      	ldr	r1, [pc, #20]	; (3eb0 <__NVIC_SystemReset+0x1c>)
    3e9a:	4b06      	ldr	r3, [pc, #24]	; (3eb4 <__NVIC_SystemReset+0x20>)
    3e9c:	68ca      	ldr	r2, [r1, #12]
    3e9e:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    3ea2:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    3ea4:	60cb      	str	r3, [r1, #12]
    3ea6:	f3bf 8f4f 	dsb	sy
    __NOP();
    3eaa:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    3eac:	e7fd      	b.n	3eaa <__NVIC_SystemReset+0x16>
    3eae:	bf00      	nop
    3eb0:	e000ed00 	.word	0xe000ed00
    3eb4:	05fa0004 	.word	0x05fa0004

00003eb8 <nrf52_errata_103>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    3eb8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            if (var1 == 0x08)
    3ebc:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
    3ec0:	2a08      	cmp	r2, #8
    3ec2:	d106      	bne.n	3ed2 <nrf52_errata_103+0x1a>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    3ec4:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
                switch(var2)
    3ec8:	2b05      	cmp	r3, #5
    3eca:	d802      	bhi.n	3ed2 <nrf52_errata_103+0x1a>
    3ecc:	4a02      	ldr	r2, [pc, #8]	; (3ed8 <nrf52_errata_103+0x20>)
    3ece:	5cd0      	ldrb	r0, [r2, r3]
    3ed0:	4770      	bx	lr
                        return false;
    3ed2:	2000      	movs	r0, #0
}
    3ed4:	4770      	bx	lr
    3ed6:	bf00      	nop
    3ed8:	00008c30 	.word	0x00008c30

00003edc <nvmc_wait>:

/* -- NVMC utility functions -- */
/* Waits until NVMC is done with the current pending action */
void nvmc_wait(void)
{
    while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
    3edc:	4a02      	ldr	r2, [pc, #8]	; (3ee8 <nvmc_wait+0xc>)
    3ede:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
    3ee2:	2b00      	cmp	r3, #0
    3ee4:	d0fb      	beq.n	3ede <nvmc_wait+0x2>
}
    3ee6:	4770      	bx	lr
    3ee8:	4001e000 	.word	0x4001e000

00003eec <SystemInit>:
{
    SystemCoreClock = __SYSTEM_CLOCK_DEFAULT;
}

void SystemInit(void)
{
    3eec:	b510      	push	{r4, lr}
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    3eee:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            if (var1 == 0x08)
    3ef2:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
    3ef6:	2a08      	cmp	r2, #8
    3ef8:	d14e      	bne.n	3f98 <SystemInit+0xac>

    #if NRF52_ERRATA_36_ENABLE_WORKAROUND
        /* Workaround for Errata 36 "CLOCK: Some registers are not reset when expected" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_36()){
            NRF_CLOCK->EVENTS_DONE = 0;
    3efa:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    3efe:	2100      	movs	r1, #0
    3f00:	f8c2 110c 	str.w	r1, [r2, #268]	; 0x10c
            NRF_CLOCK->EVENTS_CTTO = 0;
    3f04:	f8c2 1110 	str.w	r1, [r2, #272]	; 0x110
            NRF_CLOCK->CTIV = 0;
    3f08:	f8c2 1538 	str.w	r1, [r2, #1336]	; 0x538

    #if NRF52_ERRATA_66_ENABLE_WORKAROUND
        /* Workaround for Errata 66 "TEMP: Linearity specification not met with default settings" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_66()){
            NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
    3f0c:	f502 4240 	add.w	r2, r2, #49152	; 0xc000
    3f10:	f8d3 1404 	ldr.w	r1, [r3, #1028]	; 0x404
    3f14:	f8c2 1520 	str.w	r1, [r2, #1312]	; 0x520
            NRF_TEMP->A1 = NRF_FICR->TEMP.A1;
    3f18:	f8d3 1408 	ldr.w	r1, [r3, #1032]	; 0x408
    3f1c:	f8c2 1524 	str.w	r1, [r2, #1316]	; 0x524
            NRF_TEMP->A2 = NRF_FICR->TEMP.A2;
    3f20:	f8d3 140c 	ldr.w	r1, [r3, #1036]	; 0x40c
    3f24:	f8c2 1528 	str.w	r1, [r2, #1320]	; 0x528
            NRF_TEMP->A3 = NRF_FICR->TEMP.A3;
    3f28:	f8d3 1410 	ldr.w	r1, [r3, #1040]	; 0x410
    3f2c:	f8c2 152c 	str.w	r1, [r2, #1324]	; 0x52c
            NRF_TEMP->A4 = NRF_FICR->TEMP.A4;
    3f30:	f8d3 1414 	ldr.w	r1, [r3, #1044]	; 0x414
    3f34:	f8c2 1530 	str.w	r1, [r2, #1328]	; 0x530
            NRF_TEMP->A5 = NRF_FICR->TEMP.A5;
    3f38:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
    3f3c:	f8c2 1534 	str.w	r1, [r2, #1332]	; 0x534
            NRF_TEMP->B0 = NRF_FICR->TEMP.B0;
    3f40:	f8d3 141c 	ldr.w	r1, [r3, #1052]	; 0x41c
    3f44:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
            NRF_TEMP->B1 = NRF_FICR->TEMP.B1;
    3f48:	f8d3 1420 	ldr.w	r1, [r3, #1056]	; 0x420
    3f4c:	f8c2 1544 	str.w	r1, [r2, #1348]	; 0x544
            NRF_TEMP->B2 = NRF_FICR->TEMP.B2;
    3f50:	f8d3 1424 	ldr.w	r1, [r3, #1060]	; 0x424
    3f54:	f8c2 1548 	str.w	r1, [r2, #1352]	; 0x548
            NRF_TEMP->B3 = NRF_FICR->TEMP.B3;
    3f58:	f8d3 1428 	ldr.w	r1, [r3, #1064]	; 0x428
    3f5c:	f8c2 154c 	str.w	r1, [r2, #1356]	; 0x54c
            NRF_TEMP->B4 = NRF_FICR->TEMP.B4;
    3f60:	f8d3 142c 	ldr.w	r1, [r3, #1068]	; 0x42c
    3f64:	f8c2 1550 	str.w	r1, [r2, #1360]	; 0x550
            NRF_TEMP->B5 = NRF_FICR->TEMP.B5;
    3f68:	f8d3 1430 	ldr.w	r1, [r3, #1072]	; 0x430
    3f6c:	f8c2 1554 	str.w	r1, [r2, #1364]	; 0x554
            NRF_TEMP->T0 = NRF_FICR->TEMP.T0;
    3f70:	f8d3 1434 	ldr.w	r1, [r3, #1076]	; 0x434
    3f74:	f8c2 1560 	str.w	r1, [r2, #1376]	; 0x560
            NRF_TEMP->T1 = NRF_FICR->TEMP.T1;
    3f78:	f8d3 1438 	ldr.w	r1, [r3, #1080]	; 0x438
    3f7c:	f8c2 1564 	str.w	r1, [r2, #1380]	; 0x564
            NRF_TEMP->T2 = NRF_FICR->TEMP.T2;
    3f80:	f8d3 143c 	ldr.w	r1, [r3, #1084]	; 0x43c
    3f84:	f8c2 1568 	str.w	r1, [r2, #1384]	; 0x568
            NRF_TEMP->T3 = NRF_FICR->TEMP.T3;
    3f88:	f8d3 1440 	ldr.w	r1, [r3, #1088]	; 0x440
    3f8c:	f8c2 156c 	str.w	r1, [r2, #1388]	; 0x56c
            NRF_TEMP->T4 = NRF_FICR->TEMP.T4;
    3f90:	f8d3 3444 	ldr.w	r3, [r3, #1092]	; 0x444
    3f94:	f8c2 3570 	str.w	r3, [r2, #1392]	; 0x570
    #endif

    #if NRF52_ERRATA_98_ENABLE_WORKAROUND
        /* Workaround for Errata 98 "NFCT: Not able to communicate with the peer" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_98()){
    3f98:	f7ff ff8e 	bl	3eb8 <nrf52_errata_103>
    3f9c:	b118      	cbz	r0, 3fa6 <SystemInit+0xba>
            *(volatile uint32_t *)0x4000568Cul = 0x00038148ul;
    3f9e:	4b47      	ldr	r3, [pc, #284]	; (40bc <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xbc>)
    3fa0:	4a47      	ldr	r2, [pc, #284]	; (40c0 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xc0>)
    3fa2:	f8c3 268c 	str.w	r2, [r3, #1676]	; 0x68c
    #endif

    #if NRF52_ERRATA_103_ENABLE_WORKAROUND && defined(CCM_MAXPACKETSIZE_MAXPACKETSIZE_Pos)
        /* Workaround for Errata 103 "CCM: Wrong reset value of CCM MAXPACKETSIZE" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_103()){
    3fa6:	f7ff ff87 	bl	3eb8 <nrf52_errata_103>
    3faa:	b118      	cbz	r0, 3fb4 <SystemInit+0xc8>
            NRF_CCM->MAXPACKETSIZE = 0xFBul;
    3fac:	4b45      	ldr	r3, [pc, #276]	; (40c4 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xc4>)
    3fae:	22fb      	movs	r2, #251	; 0xfb
    3fb0:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    #endif

    #if NRF52_ERRATA_115_ENABLE_WORKAROUND
        /* Workaround for Errata 115 "RAM: RAM content cannot be trusted upon waking up from System ON Idle or System OFF mode" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_115()){
    3fb4:	f7ff ff80 	bl	3eb8 <nrf52_errata_103>
    3fb8:	b170      	cbz	r0, 3fd8 <SystemInit+0xec>
            *(volatile uint32_t *)0x40000EE4 = (*(volatile uint32_t *)0x40000EE4 & 0xFFFFFFF0) | (*(uint32_t *)0x10000258 & 0x0000000F);
    3fba:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    3fbe:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    3fc2:	f8d1 2ee4 	ldr.w	r2, [r1, #3812]	; 0xee4
    3fc6:	f8d3 3258 	ldr.w	r3, [r3, #600]	; 0x258
    3fca:	f022 020f 	bic.w	r2, r2, #15
    3fce:	f003 030f 	and.w	r3, r3, #15
    3fd2:	4313      	orrs	r3, r2
    3fd4:	f8c1 3ee4 	str.w	r3, [r1, #3812]	; 0xee4
    #endif

    #if NRF52_ERRATA_120_ENABLE_WORKAROUND
        /* Workaround for Errata 120 "QSPI: Data read or written is corrupted" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_120()){
    3fd8:	f7ff ff6e 	bl	3eb8 <nrf52_errata_103>
    3fdc:	b120      	cbz	r0, 3fe8 <SystemInit+0xfc>
            *(volatile uint32_t *)0x40029640ul = 0x200ul;
    3fde:	4b3a      	ldr	r3, [pc, #232]	; (40c8 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xc8>)
    3fe0:	f44f 7200 	mov.w	r2, #512	; 0x200
    3fe4:	f8c3 2640 	str.w	r2, [r3, #1600]	; 0x640
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    3fe8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            if (var1 == 0x08)
    3fec:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
    3ff0:	2b08      	cmp	r3, #8
    3ff2:	d109      	bne.n	4008 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x8>

    #if NRF52_ERRATA_136_ENABLE_WORKAROUND
        /* Workaround for Errata 136 "System: Bits in RESETREAS are set when they should not be" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_136()){
            if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk){
    3ff4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    3ff8:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    3ffc:	07d2      	lsls	r2, r2, #31
                NRF_POWER->RESETREAS =  ~POWER_RESETREAS_RESETPIN_Msk;
    3ffe:	bf44      	itt	mi
    4000:	f06f 0201 	mvnmi.w	r2, #1
    4004:	f8c3 2400 	strmi.w	r2, [r3, #1024]	; 0x400

    /* Enable the FPU if the compiler used floating point unit instructions. __FPU_USED is a MACRO defined by the
     * compiler. Since the FPU consumes energy, remember to disable FPU use in the compiler if floating point unit
     * operations are not used in your code. */
    #if (__FPU_USED == 1)
        SCB->CPACR |= (3UL << 20) | (3UL << 22);
    4008:	4a30      	ldr	r2, [pc, #192]	; (40cc <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xcc>)
    400a:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
    400e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
    4012:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    4016:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    401a:	f3bf 8f6f 	isb	sy
         || defined (NRF52820_XXAA) || defined (DEVELOP_IN_NRF52820)\
         || defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    401e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
                        return true;
                }
            }
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
    4022:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
    4026:	2a08      	cmp	r2, #8
    4028:	d10e      	bne.n	4048 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x48>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    402a:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
            {
                switch(var2)
    402e:	2b05      	cmp	r3, #5
    4030:	d802      	bhi.n	4038 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x38>
            {
                /* Prevent processor from unlocking APPROTECT soft branch after this point. */
                NRF_APPROTECT->FORCEPROTECT = APPROTECT_FORCEPROTECT_FORCEPROTECT_Force;
            }
        #else
            if (nrf52_configuration_249())
    4032:	4a27      	ldr	r2, [pc, #156]	; (40d0 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xd0>)
    4034:	5cd3      	ldrb	r3, [r2, r3]
    4036:	b13b      	cbz	r3, 4048 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x48>
            {
                /* Load APPROTECT soft branch from UICR.
                   If UICR->APPROTECT is disabled, POWER->APPROTECT will be disabled. */
                NRF_APPROTECT->DISABLE = NRF_UICR->APPROTECT;
    4038:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    403c:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
    4040:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    4044:	f8c3 2558 	str.w	r2, [r3, #1368]	; 0x558

    /* Configure NFCT pins as GPIOs if NFCT is not to be used in your code. If CONFIG_NFCT_PINS_AS_GPIOS is not defined,
       two GPIOs (see Product Specification to see which ones) will be reserved for NFC and will not be available as
       normal GPIOs. */
    #if defined (CONFIG_NFCT_PINS_AS_GPIOS) && defined(NFCT_PRESENT)
        if ((NRF_UICR->NFCPINS & UICR_NFCPINS_PROTECT_Msk) == (UICR_NFCPINS_PROTECT_NFC << UICR_NFCPINS_PROTECT_Pos)){
    4048:	f04f 2110 	mov.w	r1, #268439552	; 0x10001000
    404c:	f8d1 320c 	ldr.w	r3, [r1, #524]	; 0x20c
    4050:	07db      	lsls	r3, r3, #31
    4052:	d514      	bpl.n	407e <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x7e>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    4054:	481f      	ldr	r0, [pc, #124]	; (40d4 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xd4>)
    4056:	2301      	movs	r3, #1
    4058:	f8c0 3504 	str.w	r3, [r0, #1284]	; 0x504
    nvmc_wait();
    405c:	f7ff ff3e 	bl	3edc <nvmc_wait>
            nvmc_config(NVMC_CONFIG_WEN_Wen);
            NRF_UICR->NFCPINS &= ~UICR_NFCPINS_PROTECT_Msk;
    4060:	f8d1 320c 	ldr.w	r3, [r1, #524]	; 0x20c
    4064:	f023 0301 	bic.w	r3, r3, #1
    4068:	f8c1 320c 	str.w	r3, [r1, #524]	; 0x20c
            nvmc_wait();
    406c:	f7ff ff36 	bl	3edc <nvmc_wait>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    4070:	2300      	movs	r3, #0
    4072:	f8c0 3504 	str.w	r3, [r0, #1284]	; 0x504
    nvmc_wait();
    4076:	f7ff ff31 	bl	3edc <nvmc_wait>
            NRF_UICR->PSELRESET[0] = RESET_PIN;
            nvmc_wait();
            NRF_UICR->PSELRESET[1] = RESET_PIN;
            nvmc_wait();
            nvmc_config(NVMC_CONFIG_WEN_Ren);
            NVIC_SystemReset();
    407a:	f7ff ff0b 	bl	3e94 <__NVIC_SystemReset>
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
    407e:	f8d1 3200 	ldr.w	r3, [r1, #512]	; 0x200
    4082:	2b00      	cmp	r3, #0
    4084:	db03      	blt.n	408e <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x8e>
            ((NRF_UICR->PSELRESET[1] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos))){
    4086:	f8d1 3204 	ldr.w	r3, [r1, #516]	; 0x204
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
    408a:	2b00      	cmp	r3, #0
    408c:	da14      	bge.n	40b8 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xb8>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    408e:	4911      	ldr	r1, [pc, #68]	; (40d4 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xd4>)
    4090:	2301      	movs	r3, #1
            NRF_UICR->PSELRESET[0] = RESET_PIN;
    4092:	f04f 2010 	mov.w	r0, #268439552	; 0x10001000
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    4096:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
            NRF_UICR->PSELRESET[0] = RESET_PIN;
    409a:	2412      	movs	r4, #18
    nvmc_wait();
    409c:	f7ff ff1e 	bl	3edc <nvmc_wait>
            NRF_UICR->PSELRESET[0] = RESET_PIN;
    40a0:	f8c0 4200 	str.w	r4, [r0, #512]	; 0x200
            nvmc_wait();
    40a4:	f7ff ff1a 	bl	3edc <nvmc_wait>
            NRF_UICR->PSELRESET[1] = RESET_PIN;
    40a8:	f8c0 4204 	str.w	r4, [r0, #516]	; 0x204
            nvmc_wait();
    40ac:	f7ff ff16 	bl	3edc <nvmc_wait>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    40b0:	2300      	movs	r3, #0
    40b2:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
    40b6:	e7de      	b.n	4076 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x76>
            nvmc_wait();
            nvmc_config(NVMC_CONFIG_WEN_Ren);
            NVIC_SystemReset();
        }
    #endif
}
    40b8:	bd10      	pop	{r4, pc}
    40ba:	bf00      	nop
    40bc:	40005000 	.word	0x40005000
    40c0:	00038148 	.word	0x00038148
    40c4:	4000f000 	.word	0x4000f000
    40c8:	40029000 	.word	0x40029000
    40cc:	e000ed00 	.word	0xe000ed00
    40d0:	00008c2a 	.word	0x00008c2a
    40d4:	4001e000 	.word	0x4001e000

000040d8 <nrfx_flag32_alloc>:
{
    return (mask & NRFX_BIT(bitpos)) ? false : true;
}

nrfx_err_t nrfx_flag32_alloc(nrfx_atomic_t * p_mask, uint8_t *p_flag)
{
    40d8:	b570      	push	{r4, r5, r6, lr}
        idx = 31 - NRF_CLZ(prev_mask);
        if (idx < 0) {
            return NRFX_ERROR_NO_MEM;
        }

        new_mask = prev_mask & ~NRFX_BIT(idx);
    40da:	2501      	movs	r5, #1
        prev_mask = *p_mask;
    40dc:	6802      	ldr	r2, [r0, #0]
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    40de:	f3bf 8f5b 	dmb	ish
        idx = 31 - NRF_CLZ(prev_mask);
    40e2:	fab2 f382 	clz	r3, r2
    40e6:	f1c3 031f 	rsb	r3, r3, #31
    40ea:	b2db      	uxtb	r3, r3
        new_mask = prev_mask & ~NRFX_BIT(idx);
    40ec:	fa05 f403 	lsl.w	r4, r5, r3
    40f0:	ea22 0404 	bic.w	r4, r2, r4
    40f4:	e850 6f00 	ldrex	r6, [r0]
    40f8:	4296      	cmp	r6, r2
    40fa:	d104      	bne.n	4106 <nrfx_flag32_alloc+0x2e>
    40fc:	e840 4c00 	strex	ip, r4, [r0]
    4100:	f1bc 0f00 	cmp.w	ip, #0
    4104:	d1f6      	bne.n	40f4 <nrfx_flag32_alloc+0x1c>
    4106:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
    410a:	d1e7      	bne.n	40dc <nrfx_flag32_alloc+0x4>

    *p_flag = idx;

    return NRFX_SUCCESS;
}
    410c:	4801      	ldr	r0, [pc, #4]	; (4114 <nrfx_flag32_alloc+0x3c>)
    *p_flag = idx;
    410e:	700b      	strb	r3, [r1, #0]
}
    4110:	bd70      	pop	{r4, r5, r6, pc}
    4112:	bf00      	nop
    4114:	0bad0000 	.word	0x0bad0000

00004118 <nrfx_flag32_free>:

nrfx_err_t nrfx_flag32_free(nrfx_atomic_t * p_mask, uint8_t flag)
{
    4118:	b510      	push	{r4, lr}
    uint32_t new_mask, prev_mask;

    if ((NRFX_BIT(flag) & *p_mask))
    411a:	6803      	ldr	r3, [r0, #0]
    411c:	40cb      	lsrs	r3, r1
    411e:	07db      	lsls	r3, r3, #31
    4120:	d414      	bmi.n	414c <nrfx_flag32_free+0x34>
        return NRFX_ERROR_INVALID_PARAM;
    }

    do {
        prev_mask = *p_mask;
        new_mask = prev_mask | NRFX_BIT(flag);
    4122:	2301      	movs	r3, #1
    4124:	408b      	lsls	r3, r1
        prev_mask = *p_mask;
    4126:	6802      	ldr	r2, [r0, #0]
    4128:	f3bf 8f5b 	dmb	ish
        new_mask = prev_mask | NRFX_BIT(flag);
    412c:	ea43 0102 	orr.w	r1, r3, r2
    4130:	e850 4f00 	ldrex	r4, [r0]
    4134:	4294      	cmp	r4, r2
    4136:	d104      	bne.n	4142 <nrfx_flag32_free+0x2a>
    4138:	e840 1c00 	strex	ip, r1, [r0]
    413c:	f1bc 0f00 	cmp.w	ip, #0
    4140:	d1f6      	bne.n	4130 <nrfx_flag32_free+0x18>
    4142:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
    4146:	d1ee      	bne.n	4126 <nrfx_flag32_free+0xe>

    return NRFX_SUCCESS;
    4148:	4801      	ldr	r0, [pc, #4]	; (4150 <nrfx_flag32_free+0x38>)
}
    414a:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
    414c:	4801      	ldr	r0, [pc, #4]	; (4154 <nrfx_flag32_free+0x3c>)
    414e:	e7fc      	b.n	414a <nrfx_flag32_free+0x32>
    4150:	0bad0000 	.word	0x0bad0000
    4154:	0bad0004 	.word	0x0bad0004

00004158 <clock_stop>:
    CoreDebug->DEMCR = core_debug;
}
#endif // NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_132)

static void clock_stop(nrf_clock_domain_t domain)
{
    4158:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    switch (domain)
    415a:	4604      	mov	r4, r0
    415c:	b118      	cbz	r0, 4166 <clock_stop+0xe>
    415e:	2801      	cmp	r0, #1
    4160:	d022      	beq.n	41a8 <clock_stop+0x50>
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    {
            m_clock_cb.hfclk_started = false;
    }
#endif
}
    4162:	b003      	add	sp, #12
    4164:	bdf0      	pop	{r4, r5, r6, r7, pc}
    p_reg->INTENCLR = mask;
    4166:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    416a:	2202      	movs	r2, #2
    416c:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    4170:	f8c3 0104 	str.w	r0, [r3, #260]	; 0x104
    4174:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    4178:	2201      	movs	r2, #1
    417a:	60da      	str	r2, [r3, #12]
    nrf_clock_hfclk_t *p_clk_src = (domain == NRF_CLOCK_DOMAIN_HFCLK) ? &clk_src : NULL;
    417c:	4607      	mov	r7, r0
    nrf_clock_hfclk_t clk_src = NRF_CLOCK_HFCLK_HIGH_ACCURACY;
    417e:	2301      	movs	r3, #1
    4180:	f88d 3007 	strb.w	r3, [sp, #7]
    4184:	f242 7510 	movw	r5, #10000	; 0x2710
    4188:	f04f 4680 	mov.w	r6, #1073741824	; 0x40000000
    switch (domain)
    418c:	b1cc      	cbz	r4, 41c2 <clock_stop+0x6a>
    418e:	2c01      	cmp	r4, #1
    4190:	d1e7      	bne.n	4162 <clock_stop+0xa>
            if (p_clk_src != NULL)
    4192:	b3c7      	cbz	r7, 4206 <clock_stop+0xae>
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    4194:	f8d6 340c 	ldr.w	r3, [r6, #1036]	; 0x40c
    4198:	f003 0301 	and.w	r3, r3, #1
                (*(nrf_clock_hfclk_t *)p_clk_src) =
    419c:	703b      	strb	r3, [r7, #0]
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    419e:	f8d6 340c 	ldr.w	r3, [r6, #1036]	; 0x40c
    41a2:	03da      	lsls	r2, r3, #15
    41a4:	d521      	bpl.n	41ea <clock_stop+0x92>
    41a6:	e016      	b.n	41d6 <clock_stop+0x7e>
    p_reg->INTENCLR = mask;
    41a8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    41ac:	2200      	movs	r2, #0
    p_reg->INTENCLR = mask;
    41ae:	f8c3 0308 	str.w	r0, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    41b2:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    41b6:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    41ba:	6058      	str	r0, [r3, #4]
    nrf_clock_hfclk_t *p_clk_src = (domain == NRF_CLOCK_DOMAIN_HFCLK) ? &clk_src : NULL;
    41bc:	f10d 0707 	add.w	r7, sp, #7
    41c0:	e7dd      	b.n	417e <clock_stop+0x26>
            if (p_clk_src != NULL)
    41c2:	b1b7      	cbz	r7, 41f2 <clock_stop+0x9a>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    41c4:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    41c8:	f003 0303 	and.w	r3, r3, #3
                (*(nrf_clock_lfclk_t *)p_clk_src) =
    41cc:	603b      	str	r3, [r7, #0]
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    41ce:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
    41d2:	03d8      	lsls	r0, r3, #15
    41d4:	d5c5      	bpl.n	4162 <clock_stop+0xa>
    NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, p_clk_src) ||
    41d6:	f89d 0007 	ldrb.w	r0, [sp, #7]
    41da:	2801      	cmp	r0, #1
    41dc:	d103      	bne.n	41e6 <clock_stop+0x8e>
    41de:	f003 fbf5 	bl	79cc <nrfx_busy_wait>
    41e2:	3d01      	subs	r5, #1
    41e4:	d1d2      	bne.n	418c <clock_stop+0x34>
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    41e6:	2c01      	cmp	r4, #1
    41e8:	d1bb      	bne.n	4162 <clock_stop+0xa>
            m_clock_cb.hfclk_started = false;
    41ea:	4b0c      	ldr	r3, [pc, #48]	; (421c <clock_stop+0xc4>)
    41ec:	2200      	movs	r2, #0
    41ee:	715a      	strb	r2, [r3, #5]
    41f0:	e7b7      	b.n	4162 <clock_stop+0xa>
    41f2:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
    41f6:	03d9      	lsls	r1, r3, #15
    41f8:	d5b3      	bpl.n	4162 <clock_stop+0xa>
    NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, p_clk_src) ||
    41fa:	2001      	movs	r0, #1
    41fc:	f003 fbe6 	bl	79cc <nrfx_busy_wait>
    4200:	3d01      	subs	r5, #1
    4202:	d1f6      	bne.n	41f2 <clock_stop+0x9a>
    4204:	e7ad      	b.n	4162 <clock_stop+0xa>
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    4206:	f8d6 340c 	ldr.w	r3, [r6, #1036]	; 0x40c
    420a:	03db      	lsls	r3, r3, #15
    420c:	d5ed      	bpl.n	41ea <clock_stop+0x92>
    420e:	2001      	movs	r0, #1
    4210:	f003 fbdc 	bl	79cc <nrfx_busy_wait>
    4214:	3d01      	subs	r5, #1
    4216:	d1f6      	bne.n	4206 <clock_stop+0xae>
    4218:	e7e7      	b.n	41ea <clock_stop+0x92>
    421a:	bf00      	nop
    421c:	20000bd4 	.word	0x20000bd4

00004220 <nrfx_clock_init>:
nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
    NRFX_ASSERT(event_handler);

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
    4220:	4b04      	ldr	r3, [pc, #16]	; (4234 <nrfx_clock_init+0x14>)
    4222:	791a      	ldrb	r2, [r3, #4]
    4224:	b922      	cbnz	r2, 4230 <nrfx_clock_init+0x10>
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
#endif
        m_clock_cb.event_handler = event_handler;
        m_clock_cb.module_initialized = true;
    4226:	2201      	movs	r2, #1
        m_clock_cb.event_handler = event_handler;
    4228:	6018      	str	r0, [r3, #0]
        m_clock_cb.module_initialized = true;
    422a:	809a      	strh	r2, [r3, #4]
    nrfx_err_t err_code = NRFX_SUCCESS;
    422c:	4802      	ldr	r0, [pc, #8]	; (4238 <nrfx_clock_init+0x18>)
    422e:	4770      	bx	lr
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
    4230:	4802      	ldr	r0, [pc, #8]	; (423c <nrfx_clock_init+0x1c>)
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    4232:	4770      	bx	lr
    4234:	20000bd4 	.word	0x20000bd4
    4238:	0bad0000 	.word	0x0bad0000
    423c:	0bad000c 	.word	0x0bad000c

00004240 <nrfx_power_clock_irq_handler>:
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
    4240:	b510      	push	{r4, lr}
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    4242:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    4246:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
    424a:	b16a      	cbz	r2, 4268 <nrfx_power_clock_irq_handler+0x28>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    424c:	2200      	movs	r2, #0
    424e:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    4252:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENCLR = mask;
    4256:	2201      	movs	r2, #1
    4258:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_HFCLKSTARTED");
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF_STARTED_MASK);

#if NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_201)
        if (!m_clock_cb.hfclk_started)
    425c:	4b11      	ldr	r3, [pc, #68]	; (42a4 <nrfx_power_clock_irq_handler+0x64>)
    425e:	7958      	ldrb	r0, [r3, #5]
    4260:	b910      	cbnz	r0, 4268 <nrfx_power_clock_irq_handler+0x28>
        {
            m_clock_cb.hfclk_started = true;
    4262:	715a      	strb	r2, [r3, #5]
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
    4264:	681b      	ldr	r3, [r3, #0]
    4266:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    4268:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    426c:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
    4270:	b172      	cbz	r2, 4290 <nrfx_power_clock_irq_handler+0x50>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    4272:	2200      	movs	r2, #0
    4274:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    4278:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    427c:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    4280:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_LFCLKSTARTED");

#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
        nrf_clock_lfclk_t lfclksrc;
        (void)nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc);
        if (lfclksrc == NRF_CLOCK_LFCLK_RC)
    4284:	0792      	lsls	r2, r2, #30
    4286:	d104      	bne.n	4292 <nrfx_power_clock_irq_handler+0x52>
    p_reg->LFCLKSRC = (uint32_t)(source);
    4288:	2201      	movs	r2, #1
    428a:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    428e:	609a      	str	r2, [r3, #8]
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    }
#endif
}
    4290:	bd10      	pop	{r4, pc}
    p_reg->INTENCLR = mask;
    4292:	2202      	movs	r2, #2
    4294:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
    4298:	4b02      	ldr	r3, [pc, #8]	; (42a4 <nrfx_power_clock_irq_handler+0x64>)
}
    429a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
    429e:	681b      	ldr	r3, [r3, #0]
    42a0:	2001      	movs	r0, #1
    42a2:	4718      	bx	r3
    42a4:	20000bd4 	.word	0x20000bd4

000042a8 <nrf_gpio_pin_port_decode>:
    uint32_t pin_number = *p_pin;
    42a8:	6803      	ldr	r3, [r0, #0]
    *p_pin = pin_number & 0x1F;
    42aa:	f003 021f 	and.w	r2, r3, #31
    return pin_number >> 5;
    42ae:	095b      	lsrs	r3, r3, #5
        case 0: return NRF_P0;
    42b0:	2b01      	cmp	r3, #1
    *p_pin = pin_number & 0x1F;
    42b2:	6002      	str	r2, [r0, #0]
}
    42b4:	4802      	ldr	r0, [pc, #8]	; (42c0 <nrf_gpio_pin_port_decode+0x18>)
    42b6:	bf18      	it	ne
    42b8:	f04f 40a0 	movne.w	r0, #1342177280	; 0x50000000
    42bc:	4770      	bx	lr
    42be:	bf00      	nop
    42c0:	50000300 	.word	0x50000300

000042c4 <pin_in_use_by_te>:
 *
 * @return True if pin uses GPIOTE task/event.
 */
static bool pin_in_use_by_te(uint32_t pin)
{
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
    42c4:	4b03      	ldr	r3, [pc, #12]	; (42d4 <pin_in_use_by_te+0x10>)
    42c6:	3008      	adds	r0, #8
    42c8:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
    42cc:	f3c0 1040 	ubfx	r0, r0, #5, #1
    42d0:	4770      	bx	lr
    42d2:	bf00      	nop
    42d4:	200001cc 	.word	0x200001cc

000042d8 <call_handler>:
    nrf_gpiote_event_t event = nrfx_gpiote_in_event_get(pin);
    return nrf_gpiote_event_address_get(NRF_GPIOTE, event);
}

static void call_handler(nrfx_gpiote_pin_t pin, nrfx_gpiote_trigger_t trigger)
{
    42d8:	b570      	push	{r4, r5, r6, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    42da:	f100 0308 	add.w	r3, r0, #8
    42de:	4c0c      	ldr	r4, [pc, #48]	; (4310 <call_handler+0x38>)
    42e0:	f834 3013 	ldrh.w	r3, [r4, r3, lsl #1]
    42e4:	05da      	lsls	r2, r3, #23
{
    42e6:	4605      	mov	r5, r0
    42e8:	460e      	mov	r6, r1
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    42ea:	d507      	bpl.n	42fc <call_handler+0x24>
    42ec:	f3c3 2343 	ubfx	r3, r3, #9, #4
    nrfx_gpiote_handler_config_t const * handler = channel_handler_get(pin);

    if (handler)
    {
        handler->handler(pin, trigger, handler->p_context);
    42f0:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
    42f4:	f854 3033 	ldr.w	r3, [r4, r3, lsl #3]
    42f8:	6852      	ldr	r2, [r2, #4]
    42fa:	4798      	blx	r3
    }
    if (m_cb.global_handler.handler)
    42fc:	68a3      	ldr	r3, [r4, #8]
    42fe:	b12b      	cbz	r3, 430c <call_handler+0x34>
    {
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
    4300:	68e2      	ldr	r2, [r4, #12]
    4302:	4631      	mov	r1, r6
    4304:	4628      	mov	r0, r5
    }
}
    4306:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
    430a:	4718      	bx	r3
}
    430c:	bd70      	pop	{r4, r5, r6, pc}
    430e:	bf00      	nop
    4310:	200001cc 	.word	0x200001cc

00004314 <release_handler>:
{
    4314:	b410      	push	{r4}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    4316:	4a13      	ldr	r2, [pc, #76]	; (4364 <release_handler+0x50>)
    4318:	3008      	adds	r0, #8
    431a:	f832 3010 	ldrh.w	r3, [r2, r0, lsl #1]
    431e:	05d9      	lsls	r1, r3, #23
    4320:	d51c      	bpl.n	435c <release_handler+0x48>
    4322:	f3c3 2143 	ubfx	r1, r3, #9, #4
    m_cb.pin_flags[pin] &= ~PIN_HANDLER_MASK;
    4326:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
    432a:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
    432e:	f102 040e 	add.w	r4, r2, #14
    4332:	2000      	movs	r0, #0
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
    4334:	f834 3f02 	ldrh.w	r3, [r4, #2]!
    4338:	f413 7f80 	tst.w	r3, #256	; 0x100
    433c:	d003      	beq.n	4346 <release_handler+0x32>
    433e:	f3c3 2343 	ubfx	r3, r3, #9, #4
    4342:	4299      	cmp	r1, r3
    4344:	d00a      	beq.n	435c <release_handler+0x48>
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
    4346:	3001      	adds	r0, #1
    4348:	2830      	cmp	r0, #48	; 0x30
    434a:	d1f3      	bne.n	4334 <release_handler+0x20>
        m_cb.handlers[handler_id].handler = NULL;
    434c:	2300      	movs	r3, #0
    434e:	f842 3031 	str.w	r3, [r2, r1, lsl #3]
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
    4352:	4805      	ldr	r0, [pc, #20]	; (4368 <release_handler+0x54>)
}
    4354:	f85d 4b04 	ldr.w	r4, [sp], #4
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
    4358:	f7ff bede 	b.w	4118 <nrfx_flag32_free>
}
    435c:	f85d 4b04 	ldr.w	r4, [sp], #4
    4360:	4770      	bx	lr
    4362:	bf00      	nop
    4364:	200001cc 	.word	0x200001cc
    4368:	20000240 	.word	0x20000240

0000436c <pin_handler_trigger_uninit>:
{
    436c:	b538      	push	{r3, r4, r5, lr}
    436e:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin))
    4370:	f7ff ffa8 	bl	42c4 <pin_in_use_by_te>
    4374:	4c09      	ldr	r4, [pc, #36]	; (439c <pin_handler_trigger_uninit+0x30>)
    4376:	f102 0508 	add.w	r5, r2, #8
    437a:	b140      	cbz	r0, 438e <pin_handler_trigger_uninit+0x22>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    437c:	f834 3015 	ldrh.w	r3, [r4, r5, lsl #1]
                         ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
}

NRF_STATIC_INLINE void nrf_gpiote_te_default(NRF_GPIOTE_Type * p_reg, uint32_t idx)
{
    p_reg->CONFIG[idx] = 0;
    4380:	4907      	ldr	r1, [pc, #28]	; (43a0 <pin_handler_trigger_uninit+0x34>)
        nrf_gpiote_te_default(NRF_GPIOTE, pin_te_get(pin));
    4382:	0b5b      	lsrs	r3, r3, #13
    4384:	f503 73a2 	add.w	r3, r3, #324	; 0x144
    4388:	2000      	movs	r0, #0
    438a:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
    release_handler(pin);
    438e:	4610      	mov	r0, r2
    4390:	f7ff ffc0 	bl	4314 <release_handler>
    m_cb.pin_flags[pin] = PIN_FLAG_NOT_USED;
    4394:	2300      	movs	r3, #0
    4396:	f824 3015 	strh.w	r3, [r4, r5, lsl #1]
}
    439a:	bd38      	pop	{r3, r4, r5, pc}
    439c:	200001cc 	.word	0x200001cc
    43a0:	40006000 	.word	0x40006000

000043a4 <nrfx_gpiote_input_configure>:
{
    43a4:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    43a8:	4604      	mov	r4, r0
    43aa:	4616      	mov	r6, r2
    43ac:	461d      	mov	r5, r3
    if (p_input_config)
    43ae:	b301      	cbz	r1, 43f2 <nrfx_gpiote_input_configure+0x4e>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    43b0:	4f4e      	ldr	r7, [pc, #312]	; (44ec <nrfx_gpiote_input_configure+0x148>)
    43b2:	f100 0808 	add.w	r8, r0, #8
    return pin_is_output(pin) && pin_in_use_by_te(pin);
    43b6:	f837 3018 	ldrh.w	r3, [r7, r8, lsl #1]
    43ba:	079b      	lsls	r3, r3, #30
    43bc:	d502      	bpl.n	43c4 <nrfx_gpiote_input_configure+0x20>
    43be:	f7ff ff81 	bl	42c4 <pin_in_use_by_te>
    43c2:	bb10      	cbnz	r0, 440a <nrfx_gpiote_input_configure+0x66>
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_INPUT;
    43c4:	2300      	movs	r3, #0
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
    43c6:	e9cd 3300 	strd	r3, r3, [sp]
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_INPUT;
    43ca:	f88d 300e 	strb.w	r3, [sp, #14]
        nrf_gpio_pin_input_t input_connect = NRF_GPIO_PIN_INPUT_CONNECT;
    43ce:	f88d 300f 	strb.w	r3, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
    43d2:	f10d 020f 	add.w	r2, sp, #15
    43d6:	460b      	mov	r3, r1
    43d8:	4620      	mov	r0, r4
    43da:	f10d 010e 	add.w	r1, sp, #14
    43de:	f003 fb42 	bl	7a66 <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] &= ~PIN_FLAG_OUTPUT;
    43e2:	f837 3018 	ldrh.w	r3, [r7, r8, lsl #1]
    43e6:	f023 0302 	bic.w	r3, r3, #2
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
    43ea:	f043 0301 	orr.w	r3, r3, #1
    43ee:	f827 3018 	strh.w	r3, [r7, r8, lsl #1]
    if (p_trigger_config)
    43f2:	b346      	cbz	r6, 4446 <nrfx_gpiote_input_configure+0xa2>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    43f4:	4b3d      	ldr	r3, [pc, #244]	; (44ec <nrfx_gpiote_input_configure+0x148>)
        nrfx_gpiote_trigger_t trigger = p_trigger_config->trigger;
    43f6:	f896 c000 	ldrb.w	ip, [r6]
        bool use_evt = p_trigger_config->p_in_channel ? true : false;
    43fa:	6872      	ldr	r2, [r6, #4]
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    43fc:	f104 0708 	add.w	r7, r4, #8
    4400:	f833 1017 	ldrh.w	r1, [r3, r7, lsl #1]
        if (pin_is_output(pin))
    4404:	0788      	lsls	r0, r1, #30
    4406:	d502      	bpl.n	440e <nrfx_gpiote_input_configure+0x6a>
            if (use_evt)
    4408:	b1aa      	cbz	r2, 4436 <nrfx_gpiote_input_configure+0x92>
            return NRFX_ERROR_INVALID_PARAM;
    440a:	4839      	ldr	r0, [pc, #228]	; (44f0 <nrfx_gpiote_input_configure+0x14c>)
    440c:	e01d      	b.n	444a <nrfx_gpiote_input_configure+0xa6>
            m_cb.pin_flags[pin] &= ~(PIN_TE_ID_MASK | PIN_FLAG_TE_USED);
    440e:	f021 0120 	bic.w	r1, r1, #32
    4412:	04c9      	lsls	r1, r1, #19
    4414:	0cc9      	lsrs	r1, r1, #19
    4416:	f823 1017 	strh.w	r1, [r3, r7, lsl #1]
            if (use_evt)
    441a:	b162      	cbz	r2, 4436 <nrfx_gpiote_input_configure+0x92>
                if (!edge)
    441c:	f1bc 0f03 	cmp.w	ip, #3
    4420:	d8f3      	bhi.n	440a <nrfx_gpiote_input_configure+0x66>
                uint8_t ch = *p_trigger_config->p_in_channel;
    4422:	6872      	ldr	r2, [r6, #4]
    4424:	7816      	ldrb	r6, [r2, #0]
                if (trigger == NRFX_GPIOTE_TRIGGER_NONE)
    4426:	f1bc 0f00 	cmp.w	ip, #0
    442a:	d111      	bne.n	4450 <nrfx_gpiote_input_configure+0xac>
    442c:	4a31      	ldr	r2, [pc, #196]	; (44f4 <nrfx_gpiote_input_configure+0x150>)
    442e:	f506 76a2 	add.w	r6, r6, #324	; 0x144
    4432:	f842 c026 	str.w	ip, [r2, r6, lsl #2]
        m_cb.pin_flags[pin] &= ~PIN_FLAG_TRIG_MODE_MASK;
    4436:	f833 2017 	ldrh.w	r2, [r3, r7, lsl #1]
    443a:	f022 021c 	bic.w	r2, r2, #28
        m_cb.pin_flags[pin] |= PIN_FLAG_TRIG_MODE_SET(trigger);
    443e:	ea42 028c 	orr.w	r2, r2, ip, lsl #2
    4442:	f823 2017 	strh.w	r2, [r3, r7, lsl #1]
    if (p_handler_config)
    4446:	bb45      	cbnz	r5, 449a <nrfx_gpiote_input_configure+0xf6>
        err = NRFX_SUCCESS;
    4448:	482b      	ldr	r0, [pc, #172]	; (44f8 <nrfx_gpiote_input_configure+0x154>)
}
    444a:	b004      	add	sp, #16
    444c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
    4450:	00b2      	lsls	r2, r6, #2
    4452:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    4456:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
                    m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
    445a:	ea41 3146 	orr.w	r1, r1, r6, lsl #13
    445e:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
    4462:	f020 0003 	bic.w	r0, r0, #3
    4466:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
    446a:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
    446e:	f420 304f 	bic.w	r0, r0, #211968	; 0x33c00
    4472:	f420 7040 	bic.w	r0, r0, #768	; 0x300
    4476:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    447a:	0220      	lsls	r0, r4, #8
    447c:	f8d2 e510 	ldr.w	lr, [r2, #1296]	; 0x510
    4480:	f400 507c 	and.w	r0, r0, #16128	; 0x3f00
    4484:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
    4488:	ea40 000e 	orr.w	r0, r0, lr
    448c:	f041 0120 	orr.w	r1, r1, #32
    4490:	f823 1017 	strh.w	r1, [r3, r7, lsl #1]
    4494:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
    4498:	e7cd      	b.n	4436 <nrfx_gpiote_input_configure+0x92>
        err = pin_handler_set(pin, p_handler_config->handler, p_handler_config->p_context);
    449a:	e9d5 6700 	ldrd	r6, r7, [r5]
    release_handler(pin);
    449e:	4620      	mov	r0, r4
    44a0:	f7ff ff38 	bl	4314 <release_handler>
    if (!handler)
    44a4:	2e00      	cmp	r6, #0
    44a6:	d0cf      	beq.n	4448 <nrfx_gpiote_input_configure+0xa4>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
    44a8:	4d10      	ldr	r5, [pc, #64]	; (44ec <nrfx_gpiote_input_configure+0x148>)
    44aa:	e9d5 2300 	ldrd	r2, r3, [r5]
    44ae:	4296      	cmp	r6, r2
    44b0:	d101      	bne.n	44b6 <nrfx_gpiote_input_configure+0x112>
    44b2:	429f      	cmp	r7, r3
    44b4:	d018      	beq.n	44e8 <nrfx_gpiote_input_configure+0x144>
        err = nrfx_flag32_alloc(&m_cb.available_evt_handlers, &id);
    44b6:	4811      	ldr	r0, [pc, #68]	; (44fc <nrfx_gpiote_input_configure+0x158>)
    44b8:	f10d 010f 	add.w	r1, sp, #15
    44bc:	f7ff fe0c 	bl	40d8 <nrfx_flag32_alloc>
        if (err != NRFX_SUCCESS)
    44c0:	4b0d      	ldr	r3, [pc, #52]	; (44f8 <nrfx_gpiote_input_configure+0x154>)
    44c2:	4298      	cmp	r0, r3
    44c4:	d1c1      	bne.n	444a <nrfx_gpiote_input_configure+0xa6>
        handler_id = (int32_t)id;
    44c6:	f89d 200f 	ldrb.w	r2, [sp, #15]
    m_cb.handlers[handler_id].handler = handler;
    44ca:	f845 6032 	str.w	r6, [r5, r2, lsl #3]
    m_cb.handlers[handler_id].p_context = p_context;
    44ce:	eb05 03c2 	add.w	r3, r5, r2, lsl #3
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
    44d2:	3408      	adds	r4, #8
    m_cb.handlers[handler_id].p_context = p_context;
    44d4:	605f      	str	r7, [r3, #4]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
    44d6:	f835 3014 	ldrh.w	r3, [r5, r4, lsl #1]
    44da:	ea43 2342 	orr.w	r3, r3, r2, lsl #9
    44de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    44e2:	f825 3014 	strh.w	r3, [r5, r4, lsl #1]
    return NRFX_SUCCESS;
    44e6:	e7af      	b.n	4448 <nrfx_gpiote_input_configure+0xa4>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
    44e8:	2200      	movs	r2, #0
    44ea:	e7ee      	b.n	44ca <nrfx_gpiote_input_configure+0x126>
    44ec:	200001cc 	.word	0x200001cc
    44f0:	0bad0004 	.word	0x0bad0004
    44f4:	40006000 	.word	0x40006000
    44f8:	0bad0000 	.word	0x0bad0000
    44fc:	20000240 	.word	0x20000240

00004500 <nrfx_gpiote_output_configure>:
{
    4500:	b5f0      	push	{r4, r5, r6, r7, lr}
    4502:	4604      	mov	r4, r0
    4504:	b085      	sub	sp, #20
    4506:	4615      	mov	r5, r2
    if (p_config)
    4508:	b319      	cbz	r1, 4552 <nrfx_gpiote_output_configure+0x52>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    450a:	4e33      	ldr	r6, [pc, #204]	; (45d8 <nrfx_gpiote_output_configure+0xd8>)
    450c:	f100 0708 	add.w	r7, r0, #8
    4510:	f836 2017 	ldrh.w	r2, [r6, r7, lsl #1]
        if (pin_is_input(pin) && pin_in_use_by_te(pin))
    4514:	0793      	lsls	r3, r2, #30
    4516:	d403      	bmi.n	4520 <nrfx_gpiote_output_configure+0x20>
    4518:	f7ff fed4 	bl	42c4 <pin_in_use_by_te>
    451c:	2800      	cmp	r0, #0
    451e:	d158      	bne.n	45d2 <nrfx_gpiote_output_configure+0xd2>
        if (pin_has_trigger(pin) && (p_config->input_connect == NRF_GPIO_PIN_INPUT_DISCONNECT))
    4520:	f012 0f1c 	tst.w	r2, #28
    4524:	d002      	beq.n	452c <nrfx_gpiote_output_configure+0x2c>
    4526:	784b      	ldrb	r3, [r1, #1]
    4528:	2b01      	cmp	r3, #1
    452a:	d052      	beq.n	45d2 <nrfx_gpiote_output_configure+0xd2>
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_OUTPUT;
    452c:	2301      	movs	r3, #1
    452e:	f88d 300f 	strb.w	r3, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &p_config->input_connect, &p_config->pull,
    4532:	2300      	movs	r3, #0
    4534:	e9cd 1300 	strd	r1, r3, [sp]
    4538:	1c4a      	adds	r2, r1, #1
    453a:	1c8b      	adds	r3, r1, #2
    453c:	4620      	mov	r0, r4
    453e:	f10d 010f 	add.w	r1, sp, #15
    4542:	f003 fa90 	bl	7a66 <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE | PIN_FLAG_OUTPUT;
    4546:	f836 3017 	ldrh.w	r3, [r6, r7, lsl #1]
    454a:	f043 0303 	orr.w	r3, r3, #3
    454e:	f826 3017 	strh.w	r3, [r6, r7, lsl #1]
    if (p_task_config)
    4552:	b915      	cbnz	r5, 455a <nrfx_gpiote_output_configure+0x5a>
    return NRFX_SUCCESS;
    4554:	4821      	ldr	r0, [pc, #132]	; (45dc <nrfx_gpiote_output_configure+0xdc>)
}
    4556:	b005      	add	sp, #20
    4558:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    455a:	4e1f      	ldr	r6, [pc, #124]	; (45d8 <nrfx_gpiote_output_configure+0xd8>)
    455c:	f104 0708 	add.w	r7, r4, #8
    4560:	f836 0017 	ldrh.w	r0, [r6, r7, lsl #1]
        if (pin_is_input(pin))
    4564:	0783      	lsls	r3, r0, #30
    4566:	d534      	bpl.n	45d2 <nrfx_gpiote_output_configure+0xd2>
        uint32_t ch = p_task_config->task_ch;
    4568:	f895 c000 	ldrb.w	ip, [r5]
    p_reg->CONFIG[idx] = 0;
    456c:	4661      	mov	r1, ip
    456e:	0089      	lsls	r1, r1, #2
        m_cb.pin_flags[pin] &= ~(PIN_FLAG_TE_USED | PIN_TE_ID_MASK);
    4570:	f020 0020 	bic.w	r0, r0, #32
    4574:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
    4578:	04c0      	lsls	r0, r0, #19
    457a:	f501 41c0 	add.w	r1, r1, #24576	; 0x6000
    457e:	0cc0      	lsrs	r0, r0, #19
    4580:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
    4584:	2300      	movs	r3, #0
    4586:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
        if (p_task_config->polarity != NRF_GPIOTE_POLARITY_NONE)
    458a:	786a      	ldrb	r2, [r5, #1]
    458c:	2a00      	cmp	r2, #0
    458e:	d0e1      	beq.n	4554 <nrfx_gpiote_output_configure+0x54>
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk |
    4590:	f8d1 3510 	ldr.w	r3, [r1, #1296]	; 0x510
                                      p_task_config->init_val);
    4594:	78ad      	ldrb	r5, [r5, #2]
    4596:	f423 1399 	bic.w	r3, r3, #1253376	; 0x132000
    459a:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
    459e:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    45a2:	f8d1 e510 	ldr.w	lr, [r1, #1296]	; 0x510
    45a6:	0223      	lsls	r3, r4, #8
    45a8:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
    45ac:	0412      	lsls	r2, r2, #16
    45ae:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    45b2:	ea43 030e 	orr.w	r3, r3, lr
    45b6:	4313      	orrs	r3, r2
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
    45b8:	052a      	lsls	r2, r5, #20
    45ba:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
            m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
    45be:	ea40 304c 	orr.w	r0, r0, ip, lsl #13
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    45c2:	4313      	orrs	r3, r2
    45c4:	f040 0020 	orr.w	r0, r0, #32
    45c8:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
    45cc:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
    45d0:	e7c0      	b.n	4554 <nrfx_gpiote_output_configure+0x54>
{
    45d2:	4803      	ldr	r0, [pc, #12]	; (45e0 <nrfx_gpiote_output_configure+0xe0>)
    45d4:	e7bf      	b.n	4556 <nrfx_gpiote_output_configure+0x56>
    45d6:	bf00      	nop
    45d8:	200001cc 	.word	0x200001cc
    45dc:	0bad0000 	.word	0x0bad0000
    45e0:	0bad0004 	.word	0x0bad0004

000045e4 <nrfx_gpiote_global_callback_set>:
    m_cb.global_handler.handler = handler;
    45e4:	4b01      	ldr	r3, [pc, #4]	; (45ec <nrfx_gpiote_global_callback_set+0x8>)
    m_cb.global_handler.p_context = p_context;
    45e6:	e9c3 0102 	strd	r0, r1, [r3, #8]
}
    45ea:	4770      	bx	lr
    45ec:	200001cc 	.word	0x200001cc

000045f0 <nrfx_gpiote_channel_get>:
{
    45f0:	b508      	push	{r3, lr}
    45f2:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin))
    45f4:	f7ff fe66 	bl	42c4 <pin_in_use_by_te>
    45f8:	b138      	cbz	r0, 460a <nrfx_gpiote_channel_get+0x1a>
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    45fa:	4b05      	ldr	r3, [pc, #20]	; (4610 <nrfx_gpiote_channel_get+0x20>)
        return NRFX_SUCCESS;
    45fc:	4805      	ldr	r0, [pc, #20]	; (4614 <nrfx_gpiote_channel_get+0x24>)
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    45fe:	3208      	adds	r2, #8
    4600:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    4604:	0b5b      	lsrs	r3, r3, #13
    4606:	700b      	strb	r3, [r1, #0]
}
    4608:	bd08      	pop	{r3, pc}
        return NRFX_ERROR_INVALID_PARAM;
    460a:	4803      	ldr	r0, [pc, #12]	; (4618 <nrfx_gpiote_channel_get+0x28>)
    460c:	e7fc      	b.n	4608 <nrfx_gpiote_channel_get+0x18>
    460e:	bf00      	nop
    4610:	200001cc 	.word	0x200001cc
    4614:	0bad0000 	.word	0x0bad0000
    4618:	0bad0004 	.word	0x0bad0004

0000461c <nrfx_gpiote_init>:
{
    461c:	b538      	push	{r3, r4, r5, lr}
    if (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
    461e:	4c0f      	ldr	r4, [pc, #60]	; (465c <nrfx_gpiote_init+0x40>)
    4620:	f894 5078 	ldrb.w	r5, [r4, #120]	; 0x78
    4624:	b9bd      	cbnz	r5, 4656 <nrfx_gpiote_init+0x3a>
    memset(m_cb.pin_flags, 0, sizeof(m_cb.pin_flags));
    4626:	2260      	movs	r2, #96	; 0x60
    4628:	4629      	mov	r1, r5
    462a:	f104 0010 	add.w	r0, r4, #16
    462e:	f002 fd52 	bl	70d6 <memset>
    NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_GPIOTE));
    4632:	2006      	movs	r0, #6
    4634:	f7fd f988 	bl	1948 <arch_irq_enable>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    4638:	4b09      	ldr	r3, [pc, #36]	; (4660 <nrfx_gpiote_init+0x44>)
    return err_code;
    463a:	480a      	ldr	r0, [pc, #40]	; (4664 <nrfx_gpiote_init+0x48>)
    463c:	f8c3 517c 	str.w	r5, [r3, #380]	; 0x17c
    4640:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
    p_reg->INTENSET = mask;
    4644:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    4648:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    m_cb.state = NRFX_DRV_STATE_INITIALIZED;
    464c:	2301      	movs	r3, #1
    464e:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
    m_cb.available_evt_handlers = NRFX_BIT_MASK(NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS);
    4652:	6763      	str	r3, [r4, #116]	; 0x74
}
    4654:	bd38      	pop	{r3, r4, r5, pc}
        return err_code;
    4656:	4804      	ldr	r0, [pc, #16]	; (4668 <nrfx_gpiote_init+0x4c>)
    4658:	e7fc      	b.n	4654 <nrfx_gpiote_init+0x38>
    465a:	bf00      	nop
    465c:	200001cc 	.word	0x200001cc
    4660:	40006000 	.word	0x40006000
    4664:	0bad0000 	.word	0x0bad0000
    4668:	0bad0005 	.word	0x0bad0005

0000466c <nrfx_gpiote_is_init>:
    return (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED) ? true : false;
    466c:	4b03      	ldr	r3, [pc, #12]	; (467c <nrfx_gpiote_is_init+0x10>)
    466e:	f893 0078 	ldrb.w	r0, [r3, #120]	; 0x78
}
    4672:	3800      	subs	r0, #0
    4674:	bf18      	it	ne
    4676:	2001      	movne	r0, #1
    4678:	4770      	bx	lr
    467a:	bf00      	nop
    467c:	200001cc 	.word	0x200001cc

00004680 <nrfx_gpiote_channel_free>:
{
    4680:	4601      	mov	r1, r0
    return nrfx_flag32_free(&m_cb.available_channels_mask, channel);
    4682:	4801      	ldr	r0, [pc, #4]	; (4688 <nrfx_gpiote_channel_free+0x8>)
    4684:	f7ff bd48 	b.w	4118 <nrfx_flag32_free>
    4688:	2000023c 	.word	0x2000023c

0000468c <nrfx_gpiote_channel_alloc>:
{
    468c:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_cb.available_channels_mask, p_channel);
    468e:	4801      	ldr	r0, [pc, #4]	; (4694 <nrfx_gpiote_channel_alloc+0x8>)
    4690:	f7ff bd22 	b.w	40d8 <nrfx_flag32_alloc>
    4694:	2000023c 	.word	0x2000023c

00004698 <nrfx_gpiote_trigger_enable>:
{
    4698:	b537      	push	{r0, r1, r2, r4, r5, lr}
    469a:	4604      	mov	r4, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    469c:	f7ff fe12 	bl	42c4 <pin_in_use_by_te>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    46a0:	f104 0208 	add.w	r2, r4, #8
    46a4:	4b1e      	ldr	r3, [pc, #120]	; (4720 <nrfx_gpiote_trigger_enable+0x88>)
    46a6:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    46aa:	b1e8      	cbz	r0, 46e8 <nrfx_gpiote_trigger_enable+0x50>
    46ac:	f013 0502 	ands.w	r5, r3, #2
    46b0:	d11a      	bne.n	46e8 <nrfx_gpiote_trigger_enable+0x50>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    46b2:	0b5b      	lsrs	r3, r3, #13
#endif

NRF_STATIC_INLINE nrf_gpiote_event_t nrf_gpiote_in_event_get(uint8_t index)
{
    NRFX_ASSERT(index < GPIOTE_CH_NUM);
    return (nrf_gpiote_event_t)NRFX_OFFSETOF(NRF_GPIOTE_Type, EVENTS_IN[index]);
    46b4:	009a      	lsls	r2, r3, #2
    return ((uint32_t)p_reg + event);
    46b6:	f102 4080 	add.w	r0, r2, #1073741824	; 0x40000000
    46ba:	f500 40c2 	add.w	r0, r0, #24832	; 0x6100
    46be:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    46c2:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    46c6:	6005      	str	r5, [r0, #0]
    46c8:	6800      	ldr	r0, [r0, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
    46ca:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
    46ce:	f040 0001 	orr.w	r0, r0, #1
    46d2:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
        if (int_enable)
    46d6:	b129      	cbz	r1, 46e4 <nrfx_gpiote_trigger_enable+0x4c>
            nrf_gpiote_int_enable(NRF_GPIOTE, NRFX_BIT(ch));
    46d8:	2201      	movs	r2, #1
    46da:	fa02 f303 	lsl.w	r3, r2, r3
    p_reg->INTENSET = mask;
    46de:	4a11      	ldr	r2, [pc, #68]	; (4724 <nrfx_gpiote_trigger_enable+0x8c>)
    46e0:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
    46e4:	b003      	add	sp, #12
    46e6:	bd30      	pop	{r4, r5, pc}
    nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    46e8:	f3c3 0382 	ubfx	r3, r3, #2, #3
    if (trigger == NRFX_GPIOTE_TRIGGER_LOW)
    46ec:	2b04      	cmp	r3, #4
    46ee:	d012      	beq.n	4716 <nrfx_gpiote_trigger_enable+0x7e>
    else if (trigger == NRFX_GPIOTE_TRIGGER_HIGH)
    46f0:	2b05      	cmp	r3, #5
    46f2:	d012      	beq.n	471a <nrfx_gpiote_trigger_enable+0x82>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    46f4:	a801      	add	r0, sp, #4
    46f6:	9401      	str	r4, [sp, #4]
    46f8:	f7ff fdd6 	bl	42a8 <nrf_gpio_pin_port_decode>
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
    46fc:	9b01      	ldr	r3, [sp, #4]
    return p_reg->IN;
    46fe:	f8d0 1510 	ldr.w	r1, [r0, #1296]	; 0x510
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
    4702:	40d9      	lsrs	r1, r3
    4704:	f001 0101 	and.w	r1, r1, #1
    4708:	3102      	adds	r1, #2
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
    470a:	4620      	mov	r0, r4
}
    470c:	b003      	add	sp, #12
    470e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
    4712:	f003 b9f1 	b.w	7af8 <nrf_gpio_cfg_sense_set>
        sense = NRF_GPIO_PIN_SENSE_LOW;
    4716:	2103      	movs	r1, #3
    4718:	e7f7      	b.n	470a <nrfx_gpiote_trigger_enable+0x72>
        sense = NRF_GPIO_PIN_SENSE_HIGH;
    471a:	2102      	movs	r1, #2
    471c:	e7f5      	b.n	470a <nrfx_gpiote_trigger_enable+0x72>
    471e:	bf00      	nop
    4720:	200001cc 	.word	0x200001cc
    4724:	40006000 	.word	0x40006000

00004728 <nrfx_gpiote_trigger_disable>:
{
    4728:	b508      	push	{r3, lr}
    472a:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    472c:	f7ff fdca 	bl	42c4 <pin_in_use_by_te>
    4730:	b1c0      	cbz	r0, 4764 <nrfx_gpiote_trigger_disable+0x3c>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    4732:	f102 0108 	add.w	r1, r2, #8
    4736:	4b0e      	ldr	r3, [pc, #56]	; (4770 <nrfx_gpiote_trigger_disable+0x48>)
    4738:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    473c:	0799      	lsls	r1, r3, #30
    473e:	d411      	bmi.n	4764 <nrfx_gpiote_trigger_disable+0x3c>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    4740:	0b5b      	lsrs	r3, r3, #13
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
    4742:	2201      	movs	r2, #1
    4744:	409a      	lsls	r2, r3
    p_reg->INTENCLR = mask;
    4746:	009b      	lsls	r3, r3, #2
    4748:	490a      	ldr	r1, [pc, #40]	; (4774 <nrfx_gpiote_trigger_disable+0x4c>)
    474a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    474e:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    4752:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
    4756:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
    475a:	f022 0203 	bic.w	r2, r2, #3
    475e:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
}
    4762:	bd08      	pop	{r3, pc}
    4764:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
    4768:	2100      	movs	r1, #0
    476a:	4610      	mov	r0, r2
    476c:	f003 b9c4 	b.w	7af8 <nrf_gpio_cfg_sense_set>
    4770:	200001cc 	.word	0x200001cc
    4774:	40006000 	.word	0x40006000

00004778 <nrfx_gpiote_pin_uninit>:
{
    4778:	b513      	push	{r0, r1, r4, lr}
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
    477a:	4b0e      	ldr	r3, [pc, #56]	; (47b4 <nrfx_gpiote_pin_uninit+0x3c>)
    477c:	f100 0208 	add.w	r2, r0, #8
{
    4780:	4604      	mov	r4, r0
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
    4782:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    if (!pin_in_use(pin))
    4786:	07db      	lsls	r3, r3, #31
    4788:	d511      	bpl.n	47ae <nrfx_gpiote_pin_uninit+0x36>
    nrfx_gpiote_trigger_disable(pin);
    478a:	f7ff ffcd 	bl	4728 <nrfx_gpiote_trigger_disable>
    pin_handler_trigger_uninit(pin);
    478e:	4620      	mov	r0, r4
    4790:	f7ff fdec 	bl	436c <pin_handler_trigger_uninit>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    4794:	a801      	add	r0, sp, #4
    4796:	9401      	str	r4, [sp, #4]
    4798:	f7ff fd86 	bl	42a8 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
    479c:	9b01      	ldr	r3, [sp, #4]
    479e:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    47a2:	2202      	movs	r2, #2
    47a4:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
    nrf_gpio_cfg(
    47a8:	4803      	ldr	r0, [pc, #12]	; (47b8 <nrfx_gpiote_pin_uninit+0x40>)
}
    47aa:	b002      	add	sp, #8
    47ac:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
    47ae:	4803      	ldr	r0, [pc, #12]	; (47bc <nrfx_gpiote_pin_uninit+0x44>)
    47b0:	e7fb      	b.n	47aa <nrfx_gpiote_pin_uninit+0x32>
    47b2:	bf00      	nop
    47b4:	200001cc 	.word	0x200001cc
    47b8:	0bad0000 	.word	0x0bad0000
    47bc:	0bad0004 	.word	0x0bad0004

000047c0 <nrfx_gpiote_irq_handler>:
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    }
}

void nrfx_gpiote_irq_handler(void)
{
    47c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    47c4:	4b68      	ldr	r3, [pc, #416]	; (4968 <nrfx_gpiote_irq_handler+0x1a8>)
    return p_reg->INTENSET & mask;
    47c6:	4869      	ldr	r0, [pc, #420]	; (496c <nrfx_gpiote_irq_handler+0x1ac>)
    uint32_t i;
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;

    /* collect status of all GPIOTE pin events. Processing is done once all are collected and cleared.*/
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    47c8:	4969      	ldr	r1, [pc, #420]	; (4970 <nrfx_gpiote_irq_handler+0x1b0>)
    uint32_t status = 0;
    47ca:	2600      	movs	r6, #0
{
    47cc:	b087      	sub	sp, #28
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;
    47ce:	2201      	movs	r2, #1
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    47d0:	4634      	mov	r4, r6
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    47d2:	681d      	ldr	r5, [r3, #0]
    {
        if (nrf_gpiote_event_check(NRF_GPIOTE, event) &&
    47d4:	b135      	cbz	r5, 47e4 <nrfx_gpiote_irq_handler+0x24>
    return p_reg->INTENSET & mask;
    47d6:	f8d0 5304 	ldr.w	r5, [r0, #772]	; 0x304
    47da:	4215      	tst	r5, r2
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    47dc:	bf1e      	ittt	ne
    47de:	601c      	strne	r4, [r3, #0]
    47e0:	681d      	ldrne	r5, [r3, #0]
            nrf_gpiote_int_enable_check(NRF_GPIOTE, mask))
        {
            nrf_gpiote_event_clear(NRF_GPIOTE, event);
            status |= mask;
    47e2:	4316      	orrne	r6, r2
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    47e4:	3304      	adds	r3, #4
    47e6:	428b      	cmp	r3, r1
        }
        mask <<= 1;
    47e8:	ea4f 0242 	mov.w	r2, r2, lsl #1
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    47ec:	d1f1      	bne.n	47d2 <nrfx_gpiote_irq_handler+0x12>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    47ee:	f8df 917c 	ldr.w	r9, [pc, #380]	; 496c <nrfx_gpiote_irq_handler+0x1ac>
    47f2:	f8d9 317c 	ldr.w	r3, [r9, #380]	; 0x17c
         * in ascending order. */
        event = (nrf_gpiote_event_t)((uint32_t)event + sizeof(uint32_t));
    }

    /* handle PORT event */
    if (nrf_gpiote_event_check(NRF_GPIOTE, NRF_GPIOTE_EVENT_PORT))
    47f6:	2b00      	cmp	r3, #0
    47f8:	f000 8099 	beq.w	492e <nrfx_gpiote_irq_handler+0x16e>
        *p_masks = gpio_regs[i]->LATCH;
    47fc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    4800:	f8d3 2520 	ldr.w	r2, [r3, #1312]	; 0x520
    4804:	9204      	str	r2, [sp, #16]
        gpio_regs[i]->LATCH = *p_masks;
    4806:	f8c3 2520 	str.w	r2, [r3, #1312]	; 0x520
        *p_masks = gpio_regs[i]->LATCH;
    480a:	f8d3 2820 	ldr.w	r2, [r3, #2080]	; 0x820
    480e:	9205      	str	r2, [sp, #20]
        gpio_regs[i]->LATCH = *p_masks;
    4810:	f8c3 2820 	str.w	r2, [r3, #2080]	; 0x820
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
    4814:	f04f 0800 	mov.w	r8, #0
            while (latch[i])
    4818:	f10d 0a10 	add.w	sl, sp, #16
    481c:	ea4f 1348 	mov.w	r3, r8, lsl #5
    4820:	9300      	str	r3, [sp, #0]
__STATIC_INLINE void nrf_bitmask_bit_clear(uint32_t bit, void * p_mask)
{
    uint8_t * p_mask8 = (uint8_t *)p_mask;
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    bit = BITMASK_RELBIT_GET(bit);
    p_mask8[byte_idx] &= ~(1 << bit);
    4822:	f04f 0b01 	mov.w	fp, #1
    4826:	e049      	b.n	48bc <nrfx_gpiote_irq_handler+0xfc>
                pin += 32 * i;
    4828:	9b00      	ldr	r3, [sp, #0]
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    482a:	4a52      	ldr	r2, [pc, #328]	; (4974 <nrfx_gpiote_irq_handler+0x1b4>)
                uint32_t pin = NRF_CTZ(latch[i]);
    482c:	fa94 f4a4 	rbit	r4, r4
    4830:	fab4 f484 	clz	r4, r4
                pin += 32 * i;
    4834:	441c      	add	r4, r3
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    4836:	08e0      	lsrs	r0, r4, #3
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    4838:	f104 0308 	add.w	r3, r4, #8
    483c:	9403      	str	r4, [sp, #12]
    483e:	f832 7013 	ldrh.w	r7, [r2, r3, lsl #1]
    p_mask8[byte_idx] &= ~(1 << bit);
    4842:	f81a 3000 	ldrb.w	r3, [sl, r0]
    bit = BITMASK_RELBIT_GET(bit);
    4846:	f004 0207 	and.w	r2, r4, #7
    p_mask8[byte_idx] &= ~(1 << bit);
    484a:	fa0b f202 	lsl.w	r2, fp, r2
    484e:	ea23 0302 	bic.w	r3, r3, r2
    4852:	f80a 3000 	strb.w	r3, [sl, r0]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    4856:	a803      	add	r0, sp, #12
    4858:	f7ff fd26 	bl	42a8 <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    485c:	9b03      	ldr	r3, [sp, #12]
    485e:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    4862:	08b9      	lsrs	r1, r7, #2
    4864:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
    4868:	f3c7 0582 	ubfx	r5, r7, #2, #3
    if (is_level(trigger))
    486c:	074a      	lsls	r2, r1, #29
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    486e:	462f      	mov	r7, r5
                                   GPIO_PIN_CNF_SENSE_Msk) >> GPIO_PIN_CNF_SENSE_Pos);
    4870:	f3c3 4301 	ubfx	r3, r3, #16, #2
    if (is_level(trigger))
    4874:	d52c      	bpl.n	48d0 <nrfx_gpiote_irq_handler+0x110>
        call_handler(pin, trigger);
    4876:	4620      	mov	r0, r4
    4878:	4639      	mov	r1, r7
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    487a:	b2dd      	uxtb	r5, r3
    487c:	f7ff fd2c 	bl	42d8 <call_handler>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    4880:	a803      	add	r0, sp, #12
    4882:	9403      	str	r4, [sp, #12]
    4884:	f7ff fd10 	bl	42a8 <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    4888:	9b03      	ldr	r3, [sp, #12]
    488a:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    488e:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
        if (nrf_gpio_pin_sense_get(pin) == sense)
    4892:	f3c3 4301 	ubfx	r3, r3, #16, #2
    4896:	429d      	cmp	r5, r3
    4898:	d107      	bne.n	48aa <nrfx_gpiote_irq_handler+0xea>
            nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
    489a:	2100      	movs	r1, #0
    489c:	4620      	mov	r0, r4
    489e:	f003 f92b 	bl	7af8 <nrf_gpio_cfg_sense_set>
            nrf_gpio_cfg_sense_set(pin, sense);
    48a2:	4629      	mov	r1, r5
    48a4:	4620      	mov	r0, r4
    48a6:	f003 f927 	bl	7af8 <nrf_gpio_cfg_sense_set>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    48aa:	a803      	add	r0, sp, #12
    48ac:	9403      	str	r4, [sp, #12]
    48ae:	f7ff fcfb 	bl	42a8 <nrf_gpio_pin_port_decode>
    reg->LATCH = (1 << pin_number);
    48b2:	9b03      	ldr	r3, [sp, #12]
    48b4:	fa0b f303 	lsl.w	r3, fp, r3
    48b8:	f8c0 3520 	str.w	r3, [r0, #1312]	; 0x520
            while (latch[i])
    48bc:	f85a 4028 	ldr.w	r4, [sl, r8, lsl #2]
    48c0:	2c00      	cmp	r4, #0
    48c2:	d1b1      	bne.n	4828 <nrfx_gpiote_irq_handler+0x68>
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
    48c4:	f1b8 0f00 	cmp.w	r8, #0
    48c8:	d11d      	bne.n	4906 <nrfx_gpiote_irq_handler+0x146>
    48ca:	f04f 0801 	mov.w	r8, #1
    48ce:	e7a5      	b.n	481c <nrfx_gpiote_irq_handler+0x5c>
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    48d0:	2b02      	cmp	r3, #2
    48d2:	d10c      	bne.n	48ee <nrfx_gpiote_irq_handler+0x12e>
        nrf_gpio_cfg_sense_set(pin, next_sense);
    48d4:	2103      	movs	r1, #3
    48d6:	4620      	mov	r0, r4
    48d8:	f003 f90e 	bl	7af8 <nrf_gpio_cfg_sense_set>
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
    48dc:	f005 0305 	and.w	r3, r5, #5
    48e0:	2b01      	cmp	r3, #1
    48e2:	d1e2      	bne.n	48aa <nrfx_gpiote_irq_handler+0xea>
            call_handler(pin, trigger);
    48e4:	4639      	mov	r1, r7
    48e6:	4620      	mov	r0, r4
    48e8:	f7ff fcf6 	bl	42d8 <call_handler>
    48ec:	e7dd      	b.n	48aa <nrfx_gpiote_irq_handler+0xea>
        nrf_gpio_cfg_sense_set(pin, next_sense);
    48ee:	2102      	movs	r1, #2
    48f0:	4620      	mov	r0, r4
    48f2:	9301      	str	r3, [sp, #4]
    48f4:	f003 f900 	bl	7af8 <nrf_gpio_cfg_sense_set>
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
    48f8:	2d03      	cmp	r5, #3
    48fa:	d0f3      	beq.n	48e4 <nrfx_gpiote_irq_handler+0x124>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
    48fc:	9b01      	ldr	r3, [sp, #4]
    48fe:	2b03      	cmp	r3, #3
    4900:	d1d3      	bne.n	48aa <nrfx_gpiote_irq_handler+0xea>
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
    4902:	2d02      	cmp	r5, #2
    4904:	e7ed      	b.n	48e2 <nrfx_gpiote_irq_handler+0x122>
        *p_masks = gpio_regs[i]->LATCH;
    4906:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    490a:	f8c9 417c 	str.w	r4, [r9, #380]	; 0x17c
    490e:	f8d9 317c 	ldr.w	r3, [r9, #380]	; 0x17c
    4912:	4919      	ldr	r1, [pc, #100]	; (4978 <nrfx_gpiote_irq_handler+0x1b8>)
    4914:	f8d2 3520 	ldr.w	r3, [r2, #1312]	; 0x520
    4918:	9304      	str	r3, [sp, #16]
        gpio_regs[i]->LATCH = *p_masks;
    491a:	f8c2 3520 	str.w	r3, [r2, #1312]	; 0x520
        *p_masks = gpio_regs[i]->LATCH;
    491e:	f8d1 2520 	ldr.w	r2, [r1, #1312]	; 0x520
    4922:	9205      	str	r2, [sp, #20]
        if (latch[port_idx])
    4924:	4313      	orrs	r3, r2
        gpio_regs[i]->LATCH = *p_masks;
    4926:	f8c1 2520 	str.w	r2, [r1, #1312]	; 0x520
    492a:	f47f af73 	bne.w	4814 <nrfx_gpiote_irq_handler+0x54>
        mask &= ~NRFX_BIT(ch);
    492e:	2401      	movs	r4, #1
    while (mask)
    4930:	b916      	cbnz	r6, 4938 <nrfx_gpiote_irq_handler+0x178>
        port_event_handle();
    }

    /* Process pin events. */
    gpiote_evt_handle(status);
}
    4932:	b007      	add	sp, #28
    4934:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        uint32_t ch = NRF_CTZ(mask);
    4938:	fa96 f3a6 	rbit	r3, r6
    493c:	fab3 f383 	clz	r3, r3
        mask &= ~NRFX_BIT(ch);
    4940:	fa04 f203 	lsl.w	r2, r4, r3
    4944:	009b      	lsls	r3, r3, #2
    4946:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    494a:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    494e:	ea26 0602 	bic.w	r6, r6, r2
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    4952:	f8d3 0510 	ldr.w	r0, [r3, #1296]	; 0x510
    return (nrf_gpiote_polarity_t)((p_reg->CONFIG[idx] & GPIOTE_CONFIG_POLARITY_Msk) >>
    4956:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    495a:	f3c0 2005 	ubfx	r0, r0, #8, #6
    495e:	f3c1 4101 	ubfx	r1, r1, #16, #2
    4962:	f7ff fcb9 	bl	42d8 <call_handler>
    4966:	e7e3      	b.n	4930 <nrfx_gpiote_irq_handler+0x170>
    4968:	40006100 	.word	0x40006100
    496c:	40006000 	.word	0x40006000
    4970:	40006120 	.word	0x40006120
    4974:	200001cc 	.word	0x200001cc
    4978:	50000300 	.word	0x50000300

0000497c <nrfx_ppi_channel_alloc>:
    nrfx_flag32_init(&m_groups_allocated, NRFX_PPI_ALL_APP_GROUPS_MASK);
}


nrfx_err_t nrfx_ppi_channel_alloc(nrf_ppi_channel_t * p_channel)
{
    497c:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_channels_allocated, (uint8_t *)p_channel);
    497e:	4801      	ldr	r0, [pc, #4]	; (4984 <nrfx_ppi_channel_alloc+0x8>)
    4980:	f7ff bbaa 	b.w	40d8 <nrfx_flag32_alloc>
    4984:	20000248 	.word	0x20000248

00004988 <nrf_gpio_pin_port_decode>:
    uint32_t pin_number = *p_pin;
    4988:	6803      	ldr	r3, [r0, #0]
    *p_pin = pin_number & 0x1F;
    498a:	f003 021f 	and.w	r2, r3, #31
    return pin_number >> 5;
    498e:	095b      	lsrs	r3, r3, #5
        case 0: return NRF_P0;
    4990:	2b01      	cmp	r3, #1
    *p_pin = pin_number & 0x1F;
    4992:	6002      	str	r2, [r0, #0]
}
    4994:	4802      	ldr	r0, [pc, #8]	; (49a0 <nrf_gpio_pin_port_decode+0x18>)
    4996:	bf18      	it	ne
    4998:	f04f 40a0 	movne.w	r0, #1342177280	; 0x50000000
    499c:	4770      	bx	lr
    499e:	bf00      	nop
    49a0:	50000300 	.word	0x50000300

000049a4 <nrfx_spi_init>:

nrfx_err_t nrfx_spi_init(nrfx_spi_t const *        p_instance,
                         nrfx_spi_config_t const * p_config,
                         nrfx_spi_evt_handler_t    handler,
                         void *                    p_context)
{
    49a4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    NRFX_ASSERT(p_config);
    spi_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
    49a8:	7907      	ldrb	r7, [r0, #4]
    NRF_SPI_Type * p_spi = p_instance->p_reg;
    nrfx_err_t err_code;

    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
    49aa:	4c52      	ldr	r4, [pc, #328]	; (4af4 <nrfx_spi_init+0x150>)
    49ac:	f04f 0c28 	mov.w	ip, #40	; 0x28
    49b0:	fb0c fc07 	mul.w	ip, ip, r7
{
    49b4:	4606      	mov	r6, r0
    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
    49b6:	eb04 000c 	add.w	r0, r4, ip
    49ba:	7f05      	ldrb	r5, [r0, #28]
    49bc:	2d00      	cmp	r5, #0
    49be:	f040 8096 	bne.w	4aee <nrfx_spi_init+0x14a>
    NRF_SPI_Type * p_spi = p_instance->p_reg;
    49c2:	6835      	ldr	r5, [r6, #0]
                         NRFX_LOG_ERROR_STRING_GET(err_code));
        return err_code;
    }
#endif // NRFX_CHECK(NRFX_PRS_ENABLED)

    p_cb->handler = handler;
    49c4:	f844 200c 	str.w	r2, [r4, ip]
    p_cb->p_context = p_context;
    49c8:	6043      	str	r3, [r0, #4]

    p_cb->skip_gpio_cfg = p_config->skip_gpio_cfg;
    49ca:	7bcb      	ldrb	r3, [r1, #15]
    49cc:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
    p_cb->ss_pin = p_config->ss_pin;
    49d0:	78cb      	ldrb	r3, [r1, #3]
    49d2:	7783      	strb	r3, [r0, #30]
    p_cb->orc = p_config->orc;
    49d4:	794b      	ldrb	r3, [r1, #5]
    49d6:	77c3      	strb	r3, [r0, #31]
    if (!p_config->skip_gpio_cfg)
    49d8:	7bcb      	ldrb	r3, [r1, #15]
    49da:	2b00      	cmp	r3, #0
    49dc:	d140      	bne.n	4a60 <nrfx_spi_init+0xbc>
    if (value == 0)
    49de:	7b0b      	ldrb	r3, [r1, #12]
        nrf_gpio_pin_write(p_config->sck_pin,
    49e0:	7808      	ldrb	r0, [r1, #0]
    49e2:	2b01      	cmp	r3, #1
    49e4:	d87a      	bhi.n	4adc <nrfx_spi_init+0x138>
        nrf_gpio_pin_clear(pin_number);
    49e6:	f003 f8b1 	bl	7b4c <nrf_gpio_pin_clear>
        nrf_gpio_cfg(p_config->sck_pin,
    49ea:	780b      	ldrb	r3, [r1, #0]
    49ec:	9301      	str	r3, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    49ee:	a801      	add	r0, sp, #4
    49f0:	f7ff ffca 	bl	4988 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
    49f4:	9b01      	ldr	r3, [sp, #4]
    49f6:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    49fa:	2201      	movs	r2, #1
    49fc:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
        if (p_config->mosi_pin != NRFX_SPI_PIN_NOT_USED)
    4a00:	7848      	ldrb	r0, [r1, #1]
    4a02:	28ff      	cmp	r0, #255	; 0xff
    4a04:	d00c      	beq.n	4a20 <nrfx_spi_init+0x7c>
        nrf_gpio_pin_clear(pin_number);
    4a06:	f003 f8a1 	bl	7b4c <nrf_gpio_pin_clear>
            nrf_gpio_cfg_output(p_config->mosi_pin);
    4a0a:	784b      	ldrb	r3, [r1, #1]
    4a0c:	9301      	str	r3, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    4a0e:	a801      	add	r0, sp, #4
    4a10:	f7ff ffba 	bl	4988 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
    4a14:	9b01      	ldr	r3, [sp, #4]
    4a16:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    4a1a:	2203      	movs	r2, #3
    4a1c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
        if (p_config->miso_pin != NRFX_SPI_PIN_NOT_USED)
    4a20:	788b      	ldrb	r3, [r1, #2]
    4a22:	2bff      	cmp	r3, #255	; 0xff
    4a24:	d00c      	beq.n	4a40 <nrfx_spi_init+0x9c>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    4a26:	a801      	add	r0, sp, #4
            nrf_gpio_cfg_input(p_config->miso_pin, p_config->miso_pull);
    4a28:	f891 800e 	ldrb.w	r8, [r1, #14]
    4a2c:	9301      	str	r3, [sp, #4]
    4a2e:	f7ff ffab 	bl	4988 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
    4a32:	9b01      	ldr	r3, [sp, #4]
    4a34:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    4a38:	ea4f 0288 	mov.w	r2, r8, lsl #2
    reg->PIN_CNF[pin_number] = cnf;
    4a3c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
        if (p_config->ss_pin != NRFX_SPI_PIN_NOT_USED)
    4a40:	78c8      	ldrb	r0, [r1, #3]
    4a42:	28ff      	cmp	r0, #255	; 0xff
    4a44:	d00c      	beq.n	4a60 <nrfx_spi_init+0xbc>
        nrf_gpio_pin_set(pin_number);
    4a46:	f003 f874 	bl	7b32 <nrf_gpio_pin_set>
            nrf_gpio_cfg_output(p_config->ss_pin);
    4a4a:	78cb      	ldrb	r3, [r1, #3]
    4a4c:	9301      	str	r3, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    4a4e:	a801      	add	r0, sp, #4
    4a50:	f7ff ff9a 	bl	4988 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
    4a54:	9b01      	ldr	r3, [sp, #4]
    4a56:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    4a5a:	2203      	movs	r2, #3
    4a5c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
    if (!p_config->skip_psel_cfg)
    4a60:	7c0b      	ldrb	r3, [r1, #16]
    4a62:	b993      	cbnz	r3, 4a8a <nrfx_spi_init+0xe6>
        uint32_t mosi_pin = (p_config->mosi_pin != NRFX_SPI_PIN_NOT_USED)
    4a64:	784b      	ldrb	r3, [r1, #1]
        nrf_spi_pins_set(p_spi, p_config->sck_pin, mosi_pin, miso_pin);
    4a66:	7808      	ldrb	r0, [r1, #0]
                            : NRF_SPI_PIN_NOT_CONNECTED;
    4a68:	2bff      	cmp	r3, #255	; 0xff
    4a6a:	bf18      	it	ne
    4a6c:	461a      	movne	r2, r3
        uint32_t miso_pin = (p_config->miso_pin != NRFX_SPI_PIN_NOT_USED)
    4a6e:	788b      	ldrb	r3, [r1, #2]
                                        uint32_t       sck_pin,
                                        uint32_t       mosi_pin,
                                        uint32_t       miso_pin)
{
#if defined(SPI_PSEL_SCK_CONNECT_Pos)
    p_reg->PSEL.SCK = sck_pin;
    4a70:	f8c5 0508 	str.w	r0, [r5, #1288]	; 0x508
                            : NRF_SPI_PIN_NOT_CONNECTED;
    4a74:	bf08      	it	eq
    4a76:	f04f 32ff 	moveq.w	r2, #4294967295
                            : NRF_SPI_PIN_NOT_CONNECTED;
    4a7a:	2bff      	cmp	r3, #255	; 0xff
    4a7c:	bf08      	it	eq
    4a7e:	f04f 33ff 	moveq.w	r3, #4294967295
#else
    p_reg->PSELSCK  = sck_pin;
#endif

#if defined(SPI_PSEL_MOSI_CONNECT_Pos)
    p_reg->PSEL.MOSI = mosi_pin;
    4a82:	f8c5 250c 	str.w	r2, [r5, #1292]	; 0x50c
#else
    p_reg->PSELMOSI = mosi_pin;
#endif

#if defined(SPI_PSEL_MISO_CONNECT_Pos)
    p_reg->PSEL.MISO = miso_pin;
    4a86:	f8c5 3510 	str.w	r3, [r5, #1296]	; 0x510
}

NRF_STATIC_INLINE void nrf_spi_frequency_set(NRF_SPI_Type *      p_reg,
                                             nrf_spi_frequency_t frequency)
{
    p_reg->FREQUENCY = (uint32_t)frequency;
    4a8a:	688b      	ldr	r3, [r1, #8]
    4a8c:	f8c5 3524 	str.w	r3, [r5, #1316]	; 0x524
NRF_STATIC_INLINE void nrf_spi_configure(NRF_SPI_Type *      p_reg,
                                         nrf_spi_mode_t      spi_mode,
                                         nrf_spi_bit_order_t spi_bit_order)
{
    uint32_t config = (spi_bit_order == NRF_SPI_BIT_ORDER_MSB_FIRST ?
        SPI_CONFIG_ORDER_MsbFirst : SPI_CONFIG_ORDER_LsbFirst);
    4a90:	7b4b      	ldrb	r3, [r1, #13]

    configure_pins(p_spi, p_config);

    nrf_spi_frequency_set(p_spi, p_config->frequency);
    nrf_spi_configure(p_spi, p_config->mode, p_config->bit_order);
    4a92:	7b0a      	ldrb	r2, [r1, #12]
    4a94:	3b00      	subs	r3, #0
    4a96:	bf18      	it	ne
    4a98:	2301      	movne	r3, #1
    switch (spi_mode)
    4a9a:	2a02      	cmp	r2, #2
    4a9c:	d021      	beq.n	4ae2 <nrfx_spi_init+0x13e>
    4a9e:	2a03      	cmp	r2, #3
    4aa0:	d022      	beq.n	4ae8 <nrfx_spi_init+0x144>
    4aa2:	2a01      	cmp	r2, #1
    4aa4:	d101      	bne.n	4aaa <nrfx_spi_init+0x106>
        config |= (SPI_CONFIG_CPOL_ActiveHigh << SPI_CONFIG_CPOL_Pos) |
                  (SPI_CONFIG_CPHA_Leading    << SPI_CONFIG_CPHA_Pos);
        break;

    case NRF_SPI_MODE_1:
        config |= (SPI_CONFIG_CPOL_ActiveHigh << SPI_CONFIG_CPOL_Pos) |
    4aa6:	f043 0302 	orr.w	r3, r3, #2
    case NRF_SPI_MODE_3:
        config |= (SPI_CONFIG_CPOL_ActiveLow  << SPI_CONFIG_CPOL_Pos) |
                  (SPI_CONFIG_CPHA_Trailing   << SPI_CONFIG_CPHA_Pos);
        break;
    }
    p_reg->CONFIG = config;
    4aaa:	f8c5 3554 	str.w	r3, [r5, #1364]	; 0x554
    p_reg->ENABLE = (SPI_ENABLE_ENABLE_Enabled << SPI_ENABLE_ENABLE_Pos);
    4aae:	2301      	movs	r3, #1
    4ab0:	f8c5 3500 	str.w	r3, [r5, #1280]	; 0x500

    nrf_spi_enable(p_spi);

    if (p_cb->handler)
    4ab4:	2328      	movs	r3, #40	; 0x28
    4ab6:	437b      	muls	r3, r7
    4ab8:	58e3      	ldr	r3, [r4, r3]
    4aba:	b123      	cbz	r3, 4ac6 <nrfx_spi_init+0x122>
    return ((((uint32_t)p_object) & 0x3u) == 0u);
}

NRF_STATIC_INLINE IRQn_Type nrfx_get_irq_number(void const * p_reg)
{
    return (IRQn_Type)NRFX_IRQ_NUMBER_GET(p_reg);
    4abc:	6830      	ldr	r0, [r6, #0]
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(p_instance->p_reg),
            p_config->irq_priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(p_instance->p_reg));
    4abe:	f340 3007 	sbfx	r0, r0, #12, #8
    4ac2:	f7fc ff41 	bl	1948 <arch_irq_enable>
    }

    p_cb->transfer_in_progress = false;
    4ac6:	2328      	movs	r3, #40	; 0x28
    4ac8:	fb03 4407 	mla	r4, r3, r7, r4
    4acc:	2300      	movs	r3, #0
    4ace:	7763      	strb	r3, [r4, #29]
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;

    err_code = NRFX_SUCCESS;
    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
    4ad0:	4809      	ldr	r0, [pc, #36]	; (4af8 <nrfx_spi_init+0x154>)
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
    4ad2:	2301      	movs	r3, #1
    4ad4:	7723      	strb	r3, [r4, #28]
}
    4ad6:	b002      	add	sp, #8
    4ad8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        nrf_gpio_pin_set(pin_number);
    4adc:	f003 f829 	bl	7b32 <nrf_gpio_pin_set>
    4ae0:	e783      	b.n	49ea <nrfx_spi_init+0x46>
        config |= (SPI_CONFIG_CPOL_ActiveLow  << SPI_CONFIG_CPOL_Pos) |
    4ae2:	f043 0304 	orr.w	r3, r3, #4
        break;
    4ae6:	e7e0      	b.n	4aaa <nrfx_spi_init+0x106>
        config |= (SPI_CONFIG_CPOL_ActiveLow  << SPI_CONFIG_CPOL_Pos) |
    4ae8:	f043 0306 	orr.w	r3, r3, #6
        break;
    4aec:	e7dd      	b.n	4aaa <nrfx_spi_init+0x106>
        return err_code;
    4aee:	4803      	ldr	r0, [pc, #12]	; (4afc <nrfx_spi_init+0x158>)
    4af0:	e7f1      	b.n	4ad6 <nrfx_spi_init+0x132>
    4af2:	bf00      	nop
    4af4:	20000bdc 	.word	0x20000bdc
    4af8:	0bad0000 	.word	0x0bad0000
    4afc:	0bad0005 	.word	0x0bad0005

00004b00 <nrfx_spi_uninit>:

void nrfx_spi_uninit(nrfx_spi_t const * p_instance)
{
    4b00:	b570      	push	{r4, r5, r6, lr}
    spi_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    4b02:	7906      	ldrb	r6, [r0, #4]
    NRFX_ASSERT(p_cb->state != NRFX_DRV_STATE_UNINITIALIZED);
    NRF_SPI_Type * p_spi = p_instance->p_reg;

    if (p_cb->handler)
    4b04:	4c19      	ldr	r4, [pc, #100]	; (4b6c <nrfx_spi_uninit+0x6c>)
    NRF_SPI_Type * p_spi = p_instance->p_reg;
    4b06:	6805      	ldr	r5, [r0, #0]
    if (p_cb->handler)
    4b08:	2328      	movs	r3, #40	; 0x28
    4b0a:	4373      	muls	r3, r6
    4b0c:	58e3      	ldr	r3, [r4, r3]
    4b0e:	b133      	cbz	r3, 4b1e <nrfx_spi_uninit+0x1e>
    {
        NRFX_IRQ_DISABLE(nrfx_get_irq_number(p_instance->p_reg));
    4b10:	f345 3007 	sbfx	r0, r5, #12, #8
    4b14:	f7fc ff26 	bl	1964 <arch_irq_disable>
    p_reg->INTENCLR = mask;
    4b18:	2304      	movs	r3, #4
    4b1a:	f8c5 3308 	str.w	r3, [r5, #776]	; 0x308
    p_reg->ENABLE = (SPI_ENABLE_ENABLE_Disabled << SPI_ENABLE_ENABLE_Pos);
    4b1e:	2300      	movs	r3, #0
    4b20:	f8c5 3500 	str.w	r3, [r5, #1280]	; 0x500
        nrf_spi_int_disable(p_spi, NRF_SPI_ALL_INTS_MASK);
    }

    nrf_spi_disable(p_spi);

    if (!p_cb->skip_gpio_cfg)
    4b24:	2328      	movs	r3, #40	; 0x28
    4b26:	fb03 4306 	mla	r3, r3, r6, r4
    4b2a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    4b2e:	b9bb      	cbnz	r3, 4b60 <nrfx_spi_uninit+0x60>
    return p_reg->PSEL.SCK;
    4b30:	f8d5 0508 	ldr.w	r0, [r5, #1288]	; 0x508
    {
        nrf_gpio_cfg_default(nrf_spi_sck_pin_get(p_spi));
    4b34:	f002 ffef 	bl	7b16 <nrf_gpio_cfg_default>
    return p_reg->PSEL.MISO;
    4b38:	f8d5 0510 	ldr.w	r0, [r5, #1296]	; 0x510

        uint32_t miso_pin = nrf_spi_miso_pin_get(p_spi);
        if (miso_pin != NRF_SPI_PIN_NOT_CONNECTED)
    4b3c:	1c42      	adds	r2, r0, #1
    4b3e:	d001      	beq.n	4b44 <nrfx_spi_uninit+0x44>
        {
            nrf_gpio_cfg_default(miso_pin);
    4b40:	f002 ffe9 	bl	7b16 <nrf_gpio_cfg_default>
    return p_reg->PSEL.MOSI;
    4b44:	f8d5 050c 	ldr.w	r0, [r5, #1292]	; 0x50c
        }

        uint32_t mosi_pin = nrf_spi_mosi_pin_get(p_spi);
        if (mosi_pin != NRF_SPI_PIN_NOT_CONNECTED)
    4b48:	1c43      	adds	r3, r0, #1
    4b4a:	d001      	beq.n	4b50 <nrfx_spi_uninit+0x50>
        {
            nrf_gpio_cfg_default(mosi_pin);
    4b4c:	f002 ffe3 	bl	7b16 <nrf_gpio_cfg_default>
        }

        if (p_cb->ss_pin != NRFX_SPI_PIN_NOT_USED)
    4b50:	2328      	movs	r3, #40	; 0x28
    4b52:	fb03 4306 	mla	r3, r3, r6, r4
    4b56:	7f98      	ldrb	r0, [r3, #30]
    4b58:	28ff      	cmp	r0, #255	; 0xff
    4b5a:	d001      	beq.n	4b60 <nrfx_spi_uninit+0x60>
        {
            nrf_gpio_cfg_default(p_cb->ss_pin);
    4b5c:	f002 ffdb 	bl	7b16 <nrf_gpio_cfg_default>

#if NRFX_CHECK(NRFX_PRS_ENABLED)
    nrfx_prs_release(p_instance->p_reg);
#endif

    p_cb->state = NRFX_DRV_STATE_UNINITIALIZED;
    4b60:	2328      	movs	r3, #40	; 0x28
    4b62:	fb03 4406 	mla	r4, r3, r6, r4
    4b66:	2300      	movs	r3, #0
    4b68:	7723      	strb	r3, [r4, #28]
}
    4b6a:	bd70      	pop	{r4, r5, r6, pc}
    4b6c:	20000bdc 	.word	0x20000bdc

00004b70 <nrfx_spi_xfer>:
}

nrfx_err_t nrfx_spi_xfer(nrfx_spi_t const *           p_instance,
                         nrfx_spi_xfer_desc_t const * p_xfer_desc,
                         uint32_t                     flags)
{
    4b70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    spi_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
    4b74:	7907      	ldrb	r7, [r0, #4]
    NRFX_ASSERT(p_xfer_desc->p_tx_buffer != NULL || p_xfer_desc->tx_length == 0);
    NRFX_ASSERT(p_xfer_desc->p_rx_buffer != NULL || p_xfer_desc->rx_length == 0);

    nrfx_err_t err_code = NRFX_SUCCESS;

    if (p_cb->transfer_in_progress)
    4b76:	4c39      	ldr	r4, [pc, #228]	; (4c5c <nrfx_spi_xfer+0xec>)
    4b78:	2328      	movs	r3, #40	; 0x28
    4b7a:	437b      	muls	r3, r7
{
    4b7c:	4690      	mov	r8, r2
    if (p_cb->transfer_in_progress)
    4b7e:	18e2      	adds	r2, r4, r3
{
    4b80:	460e      	mov	r6, r1
    if (p_cb->transfer_in_progress)
    4b82:	7f51      	ldrb	r1, [r2, #29]
{
    4b84:	4681      	mov	r9, r0
    if (p_cb->transfer_in_progress)
    4b86:	2900      	cmp	r1, #0
    4b88:	d166      	bne.n	4c58 <nrfx_spi_xfer+0xe8>
                         NRFX_LOG_ERROR_STRING_GET(err_code));
        return err_code;
    }
    else
    {
        if (p_cb->handler)
    4b8a:	58e3      	ldr	r3, [r4, r3]
    4b8c:	b10b      	cbz	r3, 4b92 <nrfx_spi_xfer+0x22>
        {
            p_cb->transfer_in_progress = true;
    4b8e:	2301      	movs	r3, #1
    4b90:	7753      	strb	r3, [r2, #29]
        }
    }

    p_cb->evt.xfer_desc = *p_xfer_desc;
    4b92:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
    4b96:	2528      	movs	r5, #40	; 0x28
    4b98:	fb05 4507 	mla	r5, r5, r7, r4
    4b9c:	f105 0c0c 	add.w	ip, r5, #12
    4ba0:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
    p_cb->abort = false;

    if (p_cb->ss_pin != NRFX_SPI_PIN_NOT_USED)
    4ba4:	7fa8      	ldrb	r0, [r5, #30]
    p_cb->abort = false;
    4ba6:	2300      	movs	r3, #0
    if (p_cb->ss_pin != NRFX_SPI_PIN_NOT_USED)
    4ba8:	28ff      	cmp	r0, #255	; 0xff
    p_cb->abort = false;
    4baa:	f885 3024 	strb.w	r3, [r5, #36]	; 0x24
    if (p_cb->ss_pin != NRFX_SPI_PIN_NOT_USED)
    4bae:	d001      	beq.n	4bb4 <nrfx_spi_xfer+0x44>
        nrf_gpio_pin_clear(pin_number);
    4bb0:	f002 ffcc 	bl	7b4c <nrf_gpio_pin_clear>
    {
        nrf_gpio_pin_write(p_cb->ss_pin, 0);
    }
    if (flags)
    4bb4:	2328      	movs	r3, #40	; 0x28
    4bb6:	f1b8 0f00 	cmp.w	r8, #0
    4bba:	d006      	beq.n	4bca <nrfx_spi_xfer+0x5a>
    {
        p_cb->transfer_in_progress = false;
    4bbc:	fb03 4307 	mla	r3, r3, r7, r4
    4bc0:	2200      	movs	r2, #0
        err_code = NRFX_ERROR_NOT_SUPPORTED;
    4bc2:	4827      	ldr	r0, [pc, #156]	; (4c60 <nrfx_spi_xfer+0xf0>)
        p_cb->transfer_in_progress = false;
    4bc4:	775a      	strb	r2, [r3, #29]
    }
    NRFX_LOG_INFO("Function: %s, error code: %s.",
                  __func__,
                  NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    4bc6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        spi_xfer(p_instance->p_reg, p_cb, p_xfer_desc);
    4bca:	f8d9 5000 	ldr.w	r5, [r9]
    p_cb->bytes_transferred = 0;
    4bce:	fb03 4307 	mla	r3, r3, r7, r4
    p_reg->INTENCLR = mask;
    4bd2:	2204      	movs	r2, #4
    4bd4:	f8c5 2308 	str.w	r2, [r5, #776]	; 0x308
    4bd8:	f8c3 8020 	str.w	r8, [r3, #32]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    4bdc:	f8c5 8108 	str.w	r8, [r5, #264]	; 0x108
    4be0:	f8d5 2108 	ldr.w	r2, [r5, #264]	; 0x108
    nrf_spi_txd_set(p_spi,
    4be4:	6872      	ldr	r2, [r6, #4]
    4be6:	b19a      	cbz	r2, 4c10 <nrfx_spi_xfer+0xa0>
    4be8:	6833      	ldr	r3, [r6, #0]
    4bea:	781b      	ldrb	r3, [r3, #0]
    p_reg->TXD = data;
    4bec:	f8c5 351c 	str.w	r3, [r5, #1308]	; 0x51c
    if (p_xfer_desc->tx_length > 1)
    4bf0:	6873      	ldr	r3, [r6, #4]
    4bf2:	2b01      	cmp	r3, #1
    4bf4:	d90e      	bls.n	4c14 <nrfx_spi_xfer+0xa4>
        nrf_spi_txd_set(p_spi, p_xfer_desc->p_tx_buffer[1]);
    4bf6:	6833      	ldr	r3, [r6, #0]
    4bf8:	785b      	ldrb	r3, [r3, #1]
    4bfa:	f8c5 351c 	str.w	r3, [r5, #1308]	; 0x51c
    if (p_cb->handler)
    4bfe:	2328      	movs	r3, #40	; 0x28
    4c00:	437b      	muls	r3, r7
    4c02:	58e6      	ldr	r6, [r4, r3]
    4c04:	b176      	cbz	r6, 4c24 <nrfx_spi_xfer+0xb4>
    p_reg->INTENSET = mask;
    4c06:	2304      	movs	r3, #4
    4c08:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    nrfx_err_t err_code = NRFX_SUCCESS;
    4c0c:	4815      	ldr	r0, [pc, #84]	; (4c64 <nrfx_spi_xfer+0xf4>)
    4c0e:	e7da      	b.n	4bc6 <nrfx_spi_xfer+0x56>
    nrf_spi_txd_set(p_spi,
    4c10:	7fdb      	ldrb	r3, [r3, #31]
    4c12:	e7eb      	b.n	4bec <nrfx_spi_xfer+0x7c>
    else if (p_xfer_desc->rx_length > 1)
    4c14:	68f3      	ldr	r3, [r6, #12]
    4c16:	2b01      	cmp	r3, #1
    4c18:	d9f1      	bls.n	4bfe <nrfx_spi_xfer+0x8e>
        nrf_spi_txd_set(p_spi, p_cb->orc);
    4c1a:	2328      	movs	r3, #40	; 0x28
    4c1c:	fb03 4307 	mla	r3, r3, r7, r4
    p_reg->TXD = data;
    4c20:	7fdb      	ldrb	r3, [r3, #31]
    4c22:	e7ea      	b.n	4bfa <nrfx_spi_xfer+0x8a>
    spi_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
    4c24:	eb07 0187 	add.w	r1, r7, r7, lsl #2
    4c28:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    4c2c:	f8d5 3108 	ldr.w	r3, [r5, #264]	; 0x108
            while (!nrf_spi_event_check(p_spi, NRF_SPI_EVENT_READY)) {}
    4c30:	2b00      	cmp	r3, #0
    4c32:	d0fb      	beq.n	4c2c <nrfx_spi_xfer+0xbc>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    4c34:	f8c5 6108 	str.w	r6, [r5, #264]	; 0x108
        } while (transfer_byte(p_spi, p_cb));
    4c38:	4628      	mov	r0, r5
    4c3a:	f8d5 3108 	ldr.w	r3, [r5, #264]	; 0x108
    4c3e:	f002 ff92 	bl	7b66 <transfer_byte>
    4c42:	2800      	cmp	r0, #0
    4c44:	d1f2      	bne.n	4c2c <nrfx_spi_xfer+0xbc>
        if (p_cb->ss_pin != NRFX_SPI_PIN_NOT_USED)
    4c46:	2328      	movs	r3, #40	; 0x28
    4c48:	fb03 4407 	mla	r4, r3, r7, r4
    4c4c:	7fa0      	ldrb	r0, [r4, #30]
    4c4e:	28ff      	cmp	r0, #255	; 0xff
    4c50:	d0dc      	beq.n	4c0c <nrfx_spi_xfer+0x9c>
        nrf_gpio_pin_set(pin_number);
    4c52:	f002 ff6e 	bl	7b32 <nrf_gpio_pin_set>
    4c56:	e7d9      	b.n	4c0c <nrfx_spi_xfer+0x9c>
        return err_code;
    4c58:	4803      	ldr	r0, [pc, #12]	; (4c68 <nrfx_spi_xfer+0xf8>)
    4c5a:	e7b4      	b.n	4bc6 <nrfx_spi_xfer+0x56>
    4c5c:	20000bdc 	.word	0x20000bdc
    4c60:	0bad0003 	.word	0x0bad0003
    4c64:	0bad0000 	.word	0x0bad0000
    4c68:	0bad000b 	.word	0x0bad000b

00004c6c <nrfx_spi_1_irq_handler>:
#endif

#if NRFX_CHECK(NRFX_SPI1_ENABLED)
void nrfx_spi_1_irq_handler(void)
{
    irq_handler(NRF_SPI1, &m_cb[NRFX_SPI1_INST_IDX]);
    4c6c:	4902      	ldr	r1, [pc, #8]	; (4c78 <nrfx_spi_1_irq_handler+0xc>)
    4c6e:	f04f 2040 	mov.w	r0, #1073758208	; 0x40004000
    4c72:	f002 bfab 	b.w	7bcc <irq_handler>
    4c76:	bf00      	nop
    4c78:	20000c04 	.word	0x20000c04

00004c7c <nrf_gpio_pin_port_decode>:
    uint32_t pin_number = *p_pin;
    4c7c:	6803      	ldr	r3, [r0, #0]
    *p_pin = pin_number & 0x1F;
    4c7e:	f003 021f 	and.w	r2, r3, #31
    return pin_number >> 5;
    4c82:	095b      	lsrs	r3, r3, #5
        case 0: return NRF_P0;
    4c84:	2b01      	cmp	r3, #1
    *p_pin = pin_number & 0x1F;
    4c86:	6002      	str	r2, [r0, #0]
}
    4c88:	4802      	ldr	r0, [pc, #8]	; (4c94 <nrf_gpio_pin_port_decode+0x18>)
    4c8a:	bf18      	it	ne
    4c8c:	f04f 40a0 	movne.w	r0, #1342177280	; 0x50000000
    4c90:	4770      	bx	lr
    4c92:	bf00      	nop
    4c94:	50000300 	.word	0x50000300

00004c98 <nrfx_spim_init>:

nrfx_err_t nrfx_spim_init(nrfx_spim_t const *        p_instance,
                          nrfx_spim_config_t const * p_config,
                          nrfx_spim_evt_handler_t    handler,
                          void *                     p_context)
{
    4c98:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    NRFX_ASSERT(p_config);
    spim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    NRF_SPIM_Type * p_spim = (NRF_SPIM_Type *)p_instance->p_reg;
    nrfx_err_t err_code;

    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
    4c9c:	4c7a      	ldr	r4, [pc, #488]	; (4e88 <nrfx_spim_init+0x1f0>)
    spim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    4c9e:	7905      	ldrb	r5, [r0, #4]
{
    4ca0:	4606      	mov	r6, r0
    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
    4ca2:	eb04 1045 	add.w	r0, r4, r5, lsl #5
    4ca6:	7f00      	ldrb	r0, [r0, #28]
    4ca8:	2800      	cmp	r0, #0
    4caa:	f040 80e9 	bne.w	4e80 <nrfx_spim_init+0x1e8>
        return err_code;
    }

#if NRFX_CHECK(NRFX_SPIM_EXTENDED_ENABLED)
    // Check if SPIM instance supports the extended features.
    if (
    4cae:	2d00      	cmp	r5, #0
    4cb0:	f040 80e8 	bne.w	4e84 <nrfx_spim_init+0x1ec>
    NRF_SPIM_Type * p_spim = (NRF_SPIM_Type *)p_instance->p_reg;
    4cb4:	6837      	ldr	r7, [r6, #0]
        return err_code;
    }
#endif // NRFX_CHECK(NRFX_PRS_ENABLED)

    p_cb->handler = handler;
    p_cb->p_context = p_context;
    4cb6:	e9c4 2300 	strd	r2, r3, [r4]

    p_cb->skip_gpio_cfg = p_config->skip_gpio_cfg;
    4cba:	7cca      	ldrb	r2, [r1, #19]
    4cbc:	7fa3      	ldrb	r3, [r4, #30]
    4cbe:	f362 0300 	bfi	r3, r2, #0, #1
    4cc2:	77a3      	strb	r3, [r4, #30]
    p_cb->ss_active_high = p_config->ss_active_high;
    4cc4:	790a      	ldrb	r2, [r1, #4]
    4cc6:	b2db      	uxtb	r3, r3
    4cc8:	f362 0341 	bfi	r3, r2, #1, #1
    4ccc:	77a3      	strb	r3, [r4, #30]
#if NRFX_CHECK(NRFX_SPIM_EXTENDED_ENABLED)
    p_cb->use_hw_ss = p_config->use_hw_ss;
    4cce:	7c4a      	ldrb	r2, [r1, #17]
    4cd0:	b2db      	uxtb	r3, r3
    4cd2:	f362 0382 	bfi	r3, r2, #2, #1
    4cd6:	77a3      	strb	r3, [r4, #30]
#endif
    p_cb->ss_pin = p_config->ss_pin;
    4cd8:	78cb      	ldrb	r3, [r1, #3]
    4cda:	77e3      	strb	r3, [r4, #31]
    if (!p_config->skip_gpio_cfg)
    4cdc:	7ccb      	ldrb	r3, [r1, #19]
    NRF_SPIM_Type * p_spim = (NRF_SPIM_Type *)p_instance->p_reg;
    4cde:	f8d6 8000 	ldr.w	r8, [r6]
    if (!p_config->skip_gpio_cfg)
    4ce2:	2b00      	cmp	r3, #0
    4ce4:	d15e      	bne.n	4da4 <nrfx_spim_init+0x10c>
                    : NRF_GPIO_PIN_S0S1;
    4ce6:	688b      	ldr	r3, [r1, #8]
        nrf_gpio_pin_write(p_config->sck_pin,
    4ce8:	7808      	ldrb	r0, [r1, #0]
                    : NRF_GPIO_PIN_S0S1;
    4cea:	f1b3 5fa0 	cmp.w	r3, #335544320	; 0x14000000
    if (value == 0)
    4cee:	7b0b      	ldrb	r3, [r1, #12]
    4cf0:	bf08      	it	eq
    4cf2:	2503      	moveq	r5, #3
    4cf4:	2b01      	cmp	r3, #1
    4cf6:	f200 80ad 	bhi.w	4e54 <nrfx_spim_init+0x1bc>
        nrf_gpio_pin_clear(pin_number);
    4cfa:	f002 ff8e 	bl	7c1a <nrf_gpio_pin_clear>
        nrf_gpio_cfg(p_config->sck_pin,
    4cfe:	780b      	ldrb	r3, [r1, #0]
    4d00:	9301      	str	r3, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    4d02:	a801      	add	r0, sp, #4
    4d04:	f7ff ffba 	bl	4c7c <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
    4d08:	9b01      	ldr	r3, [sp, #4]
           ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos) |
    4d0a:	022d      	lsls	r5, r5, #8
    reg->PIN_CNF[pin_number] = cnf;
    4d0c:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    4d10:	f045 0201 	orr.w	r2, r5, #1
    reg->PIN_CNF[pin_number] = cnf;
    4d14:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
        if (p_config->mosi_pin != NRFX_SPIM_PIN_NOT_USED)
    4d18:	7848      	ldrb	r0, [r1, #1]
    4d1a:	28ff      	cmp	r0, #255	; 0xff
    4d1c:	d00d      	beq.n	4d3a <nrfx_spim_init+0xa2>
        nrf_gpio_pin_clear(pin_number);
    4d1e:	f002 ff7c 	bl	7c1a <nrf_gpio_pin_clear>
            nrf_gpio_cfg(p_config->mosi_pin,
    4d22:	784b      	ldrb	r3, [r1, #1]
    4d24:	9301      	str	r3, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    4d26:	a801      	add	r0, sp, #4
    4d28:	f7ff ffa8 	bl	4c7c <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
    4d2c:	9b01      	ldr	r3, [sp, #4]
    4d2e:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    4d32:	f045 0203 	orr.w	r2, r5, #3
    reg->PIN_CNF[pin_number] = cnf;
    4d36:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
        if (p_config->miso_pin != NRFX_SPIM_PIN_NOT_USED)
    4d3a:	788b      	ldrb	r3, [r1, #2]
    4d3c:	2bff      	cmp	r3, #255	; 0xff
    4d3e:	d00c      	beq.n	4d5a <nrfx_spim_init+0xc2>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    4d40:	a801      	add	r0, sp, #4
                         p_config->miso_pull,
    4d42:	f891 900e 	ldrb.w	r9, [r1, #14]
            nrf_gpio_cfg(p_config->miso_pin,
    4d46:	9301      	str	r3, [sp, #4]
    4d48:	f7ff ff98 	bl	4c7c <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
    4d4c:	9b01      	ldr	r3, [sp, #4]
    4d4e:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    4d52:	ea45 0289 	orr.w	r2, r5, r9, lsl #2
    reg->PIN_CNF[pin_number] = cnf;
    4d56:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
        if (p_config->ss_pin != NRFX_SPIM_PIN_NOT_USED)
    4d5a:	78c8      	ldrb	r0, [r1, #3]
    4d5c:	28ff      	cmp	r0, #255	; 0xff
    4d5e:	d010      	beq.n	4d82 <nrfx_spim_init+0xea>
    if (value == 0)
    4d60:	790b      	ldrb	r3, [r1, #4]
    4d62:	2b00      	cmp	r3, #0
    4d64:	d079      	beq.n	4e5a <nrfx_spim_init+0x1c2>
        nrf_gpio_pin_clear(pin_number);
    4d66:	f002 ff58 	bl	7c1a <nrf_gpio_pin_clear>
            nrf_gpio_cfg(p_config->ss_pin,
    4d6a:	78cb      	ldrb	r3, [r1, #3]
    4d6c:	9301      	str	r3, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    4d6e:	a801      	add	r0, sp, #4
    4d70:	f7ff ff84 	bl	4c7c <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
    4d74:	9b01      	ldr	r3, [sp, #4]
    4d76:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    4d7a:	f045 0203 	orr.w	r2, r5, #3
    reg->PIN_CNF[pin_number] = cnf;
    4d7e:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
        if (p_config->dcx_pin != NRFX_SPIM_PIN_NOT_USED)
    4d82:	7bc8      	ldrb	r0, [r1, #15]
    4d84:	28ff      	cmp	r0, #255	; 0xff
    4d86:	d00d      	beq.n	4da4 <nrfx_spim_init+0x10c>
        nrf_gpio_pin_set(pin_number);
    4d88:	f002 ff3a 	bl	7c00 <nrf_gpio_pin_set>
            nrf_gpio_cfg(p_config->dcx_pin,
    4d8c:	7bcb      	ldrb	r3, [r1, #15]
    4d8e:	9301      	str	r3, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    4d90:	a801      	add	r0, sp, #4
    4d92:	f7ff ff73 	bl	4c7c <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
    4d96:	9b01      	ldr	r3, [sp, #4]
    4d98:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    4d9c:	f045 0503 	orr.w	r5, r5, #3
    reg->PIN_CNF[pin_number] = cnf;
    4da0:	f840 5023 	str.w	r5, [r0, r3, lsl #2]
    if (!p_config->skip_psel_cfg)
    4da4:	7d0b      	ldrb	r3, [r1, #20]
    4da6:	bb5b      	cbnz	r3, 4e00 <nrfx_spim_init+0x168>
        uint32_t mosi_pin = (p_config->mosi_pin != NRFX_SPIM_PIN_NOT_USED)
    4da8:	784b      	ldrb	r3, [r1, #1]
        nrf_spim_pins_set(p_spim, p_config->sck_pin, mosi_pin, miso_pin);
    4daa:	7808      	ldrb	r0, [r1, #0]
                            : NRF_SPIM_PIN_NOT_CONNECTED;
    4dac:	2bff      	cmp	r3, #255	; 0xff
    4dae:	bf18      	it	ne
    4db0:	461a      	movne	r2, r3
        uint32_t miso_pin = (p_config->miso_pin != NRFX_SPIM_PIN_NOT_USED)
    4db2:	788b      	ldrb	r3, [r1, #2]
NRF_STATIC_INLINE void nrf_spim_pins_set(NRF_SPIM_Type * p_reg,
                                         uint32_t        sck_pin,
                                         uint32_t        mosi_pin,
                                         uint32_t        miso_pin)
{
    p_reg->PSEL.SCK  = sck_pin;
    4db4:	f8c8 0508 	str.w	r0, [r8, #1288]	; 0x508
                            : NRF_SPIM_PIN_NOT_CONNECTED;
    4db8:	bf08      	it	eq
    4dba:	f04f 32ff 	moveq.w	r2, #4294967295
                            : NRF_SPIM_PIN_NOT_CONNECTED;
    4dbe:	2bff      	cmp	r3, #255	; 0xff
    4dc0:	bf08      	it	eq
    4dc2:	f04f 33ff 	moveq.w	r3, #4294967295
    p_reg->PSEL.MOSI = mosi_pin;
    4dc6:	f8c8 250c 	str.w	r2, [r8, #1292]	; 0x50c
    p_reg->PSEL.MISO = miso_pin;
    4dca:	f8c8 3510 	str.w	r3, [r8, #1296]	; 0x510
        if (SPIM_HW_CSN_PRESENT_VALIDATE(p_instance->drv_inst_idx))
    4dce:	7933      	ldrb	r3, [r6, #4]
    4dd0:	b9b3      	cbnz	r3, 4e00 <nrfx_spim_init+0x168>
            if (p_config->ss_pin != NRFX_SPIM_PIN_NOT_USED &&
    4dd2:	78cb      	ldrb	r3, [r1, #3]
    4dd4:	2bff      	cmp	r3, #255	; 0xff
    4dd6:	d043      	beq.n	4e60 <nrfx_spim_init+0x1c8>
    4dd8:	7c4a      	ldrb	r2, [r1, #17]
    4dda:	2a00      	cmp	r2, #0
    4ddc:	d040      	beq.n	4e60 <nrfx_spim_init+0x1c8>
                                    (p_config->ss_active_high == true
    4dde:	7908      	ldrb	r0, [r1, #4]
                nrf_spim_csn_configure(p_spim,
    4de0:	7c8a      	ldrb	r2, [r1, #18]
NRF_STATIC_INLINE void nrf_spim_csn_configure(NRF_SPIM_Type *    p_reg,
                                              uint32_t           pin,
                                              nrf_spim_csn_pol_t polarity,
                                              uint32_t           duration)
{
    p_reg->PSEL.CSN = pin;
    4de2:	f8c8 3514 	str.w	r3, [r8, #1300]	; 0x514
    p_reg->CSNPOL = polarity;
    4de6:	f8c8 0568 	str.w	r0, [r8, #1384]	; 0x568
    p_reg->IFTIMING.CSNDUR = duration;
    4dea:	f8c8 2564 	str.w	r2, [r8, #1380]	; 0x564
        if (SPIM_DCX_PRESENT_VALIDATE(p_instance->drv_inst_idx))
    4dee:	7933      	ldrb	r3, [r6, #4]
    4df0:	b933      	cbnz	r3, 4e00 <nrfx_spim_init+0x168>
            uint32_t dcx_pin = (p_config->dcx_pin != NRFX_SPIM_PIN_NOT_USED)
    4df2:	7bcb      	ldrb	r3, [r1, #15]
                               : NRF_SPIM_PIN_NOT_CONNECTED;
    4df4:	2bff      	cmp	r3, #255	; 0xff
    4df6:	bf08      	it	eq
    4df8:	f04f 33ff 	moveq.w	r3, #4294967295

#if NRF_SPIM_DCX_PRESENT
NRF_STATIC_INLINE void nrf_spim_dcx_pin_set(NRF_SPIM_Type * p_reg,
                                            uint32_t        dcx_pin)
{
    p_reg->PSELDCX = dcx_pin;
    4dfc:	f8c8 356c 	str.w	r3, [r8, #1388]	; 0x56c

    configure_pins(p_instance, p_config);

#if NRFX_CHECK(NRFX_SPIM_EXTENDED_ENABLED)
    // Change rx delay
    nrf_spim_iftiming_set(p_spim, p_config->rx_delay);
    4e00:	7c0b      	ldrb	r3, [r1, #16]

#if NRF_SPIM_RXDELAY_PRESENT
NRF_STATIC_INLINE void nrf_spim_iftiming_set(NRF_SPIM_Type * p_reg,
                                             uint32_t        rxdelay)
{
    p_reg->IFTIMING.RXDELAY = rxdelay;
    4e02:	f8c7 3560 	str.w	r3, [r7, #1376]	; 0x560
#endif // defined(SPIM_STALLSTAT_TX_Msk)

NRF_STATIC_INLINE void nrf_spim_frequency_set(NRF_SPIM_Type *      p_reg,
                                              nrf_spim_frequency_t frequency)
{
    p_reg->FREQUENCY = (uint32_t)frequency;
    4e06:	688b      	ldr	r3, [r1, #8]
    4e08:	f8c7 3524 	str.w	r3, [r7, #1316]	; 0x524
NRF_STATIC_INLINE void nrf_spim_configure(NRF_SPIM_Type *      p_reg,
                                          nrf_spim_mode_t      spi_mode,
                                          nrf_spim_bit_order_t spi_bit_order)
{
    uint32_t config = (spi_bit_order == NRF_SPIM_BIT_ORDER_MSB_FIRST ?
        SPIM_CONFIG_ORDER_MsbFirst : SPIM_CONFIG_ORDER_LsbFirst);
    4e0c:	7b4b      	ldrb	r3, [r1, #13]
#endif

    nrf_spim_frequency_set(p_spim, p_config->frequency);
    nrf_spim_configure(p_spim, p_config->mode, p_config->bit_order);
    4e0e:	7b0a      	ldrb	r2, [r1, #12]
    4e10:	3b00      	subs	r3, #0
    4e12:	bf18      	it	ne
    4e14:	2301      	movne	r3, #1
    switch (spi_mode)
    4e16:	2a02      	cmp	r2, #2
    4e18:	d02c      	beq.n	4e74 <nrfx_spim_init+0x1dc>
    4e1a:	2a03      	cmp	r2, #3
    4e1c:	d02d      	beq.n	4e7a <nrfx_spim_init+0x1e2>
    4e1e:	2a01      	cmp	r2, #1
    4e20:	d101      	bne.n	4e26 <nrfx_spim_init+0x18e>
        config |= (SPIM_CONFIG_CPOL_ActiveHigh << SPIM_CONFIG_CPOL_Pos) |
                  (SPIM_CONFIG_CPHA_Leading    << SPIM_CONFIG_CPHA_Pos);
        break;

    case NRF_SPIM_MODE_1:
        config |= (SPIM_CONFIG_CPOL_ActiveHigh << SPIM_CONFIG_CPOL_Pos) |
    4e22:	f043 0302 	orr.w	r3, r3, #2
    case NRF_SPIM_MODE_3:
        config |= (SPIM_CONFIG_CPOL_ActiveLow  << SPIM_CONFIG_CPOL_Pos) |
                  (SPIM_CONFIG_CPHA_Trailing   << SPIM_CONFIG_CPHA_Pos);
        break;
    }
    p_reg->CONFIG = config;
    4e26:	f8c7 3554 	str.w	r3, [r7, #1364]	; 0x554
}

NRF_STATIC_INLINE void nrf_spim_orc_set(NRF_SPIM_Type * p_reg,
                                        uint8_t         orc)
{
    p_reg->ORC = orc;
    4e2a:	798b      	ldrb	r3, [r1, #6]
    4e2c:	f8c7 35c0 	str.w	r3, [r7, #1472]	; 0x5c0
    p_reg->ENABLE = (SPIM_ENABLE_ENABLE_Enabled << SPIM_ENABLE_ENABLE_Pos);
    4e30:	2307      	movs	r3, #7
    4e32:	f8c7 3500 	str.w	r3, [r7, #1280]	; 0x500

    nrf_spim_orc_set(p_spim, p_config->orc);

    nrf_spim_enable(p_spim);

    if (p_cb->handler)
    4e36:	6823      	ldr	r3, [r4, #0]
    4e38:	b123      	cbz	r3, 4e44 <nrfx_spim_init+0x1ac>
    4e3a:	6830      	ldr	r0, [r6, #0]
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(p_instance->p_reg),
            p_config->irq_priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(p_instance->p_reg));
    4e3c:	f340 3007 	sbfx	r0, r0, #12, #8
    4e40:	f7fc fd82 	bl	1948 <arch_irq_enable>
    }

    p_cb->transfer_in_progress = false;
    4e44:	2300      	movs	r3, #0
    4e46:	7763      	strb	r3, [r4, #29]
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;

    err_code = NRFX_SUCCESS;
    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
    4e48:	4810      	ldr	r0, [pc, #64]	; (4e8c <nrfx_spim_init+0x1f4>)
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
    4e4a:	2301      	movs	r3, #1
    4e4c:	7723      	strb	r3, [r4, #28]
}
    4e4e:	b003      	add	sp, #12
    4e50:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        nrf_gpio_pin_set(pin_number);
    4e54:	f002 fed4 	bl	7c00 <nrf_gpio_pin_set>
    4e58:	e751      	b.n	4cfe <nrfx_spim_init+0x66>
    4e5a:	f002 fed1 	bl	7c00 <nrf_gpio_pin_set>
    4e5e:	e784      	b.n	4d6a <nrfx_spim_init+0xd2>
    p_reg->PSEL.CSN = pin;
    4e60:	f04f 33ff 	mov.w	r3, #4294967295
    4e64:	f8c8 3514 	str.w	r3, [r8, #1300]	; 0x514
    p_reg->CSNPOL = polarity;
    4e68:	2300      	movs	r3, #0
    4e6a:	f8c8 3568 	str.w	r3, [r8, #1384]	; 0x568
    p_reg->IFTIMING.CSNDUR = duration;
    4e6e:	f8c8 3564 	str.w	r3, [r8, #1380]	; 0x564
}
    4e72:	e7bc      	b.n	4dee <nrfx_spim_init+0x156>
        config |= (SPIM_CONFIG_CPOL_ActiveLow  << SPIM_CONFIG_CPOL_Pos) |
    4e74:	f043 0304 	orr.w	r3, r3, #4
        break;
    4e78:	e7d5      	b.n	4e26 <nrfx_spim_init+0x18e>
        config |= (SPIM_CONFIG_CPOL_ActiveLow  << SPIM_CONFIG_CPOL_Pos) |
    4e7a:	f043 0306 	orr.w	r3, r3, #6
        break;
    4e7e:	e7d2      	b.n	4e26 <nrfx_spim_init+0x18e>
        return err_code;
    4e80:	4803      	ldr	r0, [pc, #12]	; (4e90 <nrfx_spim_init+0x1f8>)
    4e82:	e7e4      	b.n	4e4e <nrfx_spim_init+0x1b6>
        return err_code;
    4e84:	4803      	ldr	r0, [pc, #12]	; (4e94 <nrfx_spim_init+0x1fc>)
    4e86:	e7e2      	b.n	4e4e <nrfx_spim_init+0x1b6>
    4e88:	20000c30 	.word	0x20000c30
    4e8c:	0bad0000 	.word	0x0bad0000
    4e90:	0bad0005 	.word	0x0bad0005
    4e94:	0bad0003 	.word	0x0bad0003

00004e98 <nrfx_spim_uninit>:

    nrf_gpio_cfg_default(pin);
}

void nrfx_spim_uninit(nrfx_spim_t const * p_instance)
{
    4e98:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    spim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    4e9c:	7903      	ldrb	r3, [r0, #4]
    NRFX_ASSERT(p_cb->state != NRFX_DRV_STATE_UNINITIALIZED);
    NRF_SPIM_Type * p_spim = p_instance->p_reg;

    if (p_cb->handler)
    4e9e:	4d2a      	ldr	r5, [pc, #168]	; (4f48 <nrfx_spim_uninit+0xb0>)
    NRF_SPIM_Type * p_spim = p_instance->p_reg;
    4ea0:	6804      	ldr	r4, [r0, #0]
    if (p_cb->handler)
    4ea2:	015e      	lsls	r6, r3, #5
    4ea4:	eb05 1843 	add.w	r8, r5, r3, lsl #5
    4ea8:	59ab      	ldr	r3, [r5, r6]
{
    4eaa:	4607      	mov	r7, r0
    if (p_cb->handler)
    4eac:	b1cb      	cbz	r3, 4ee2 <nrfx_spim_uninit+0x4a>
    {
        NRFX_IRQ_DISABLE(nrfx_get_irq_number(p_instance->p_reg));
    4eae:	f344 3007 	sbfx	r0, r4, #12, #8
    4eb2:	f7fc fd57 	bl	1964 <arch_irq_disable>
    p_reg->INTENCLR = mask;
    4eb6:	4b25      	ldr	r3, [pc, #148]	; (4f4c <nrfx_spim_uninit+0xb4>)
    4eb8:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
        nrf_spim_int_disable(p_spim, NRF_SPIM_ALL_INTS_MASK);
        if (p_cb->transfer_in_progress)
    4ebc:	f898 301d 	ldrb.w	r3, [r8, #29]
    4ec0:	b17b      	cbz	r3, 4ee2 <nrfx_spim_uninit+0x4a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    4ec2:	2301      	movs	r3, #1
    4ec4:	6163      	str	r3, [r4, #20]
    4ec6:	f04f 0864 	mov.w	r8, #100	; 0x64
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    4eca:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    NRFX_WAIT_FOR(nrf_spim_event_check(p_spim, NRF_SPIM_EVENT_STOPPED), 100, 1, stopped);
    4ece:	b92b      	cbnz	r3, 4edc <nrfx_spim_uninit+0x44>
    4ed0:	2001      	movs	r0, #1
    4ed2:	f002 fd7b 	bl	79cc <nrfx_busy_wait>
    4ed6:	f1b8 0801 	subs.w	r8, r8, #1
    4eda:	d1f6      	bne.n	4eca <nrfx_spim_uninit+0x32>
    p_cb->transfer_in_progress = false;
    4edc:	19ab      	adds	r3, r5, r6
    4ede:	2200      	movs	r2, #0
    4ee0:	775a      	strb	r2, [r3, #29]
    p_reg->ENABLE = (SPIM_ENABLE_ENABLE_Disabled << SPIM_ENABLE_ENABLE_Pos);
    4ee2:	2300      	movs	r3, #0
    4ee4:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
        }
    }

    nrf_spim_disable(p_spim);

    if (!p_cb->skip_gpio_cfg)
    4ee8:	19ab      	adds	r3, r5, r6
    4eea:	7f9b      	ldrb	r3, [r3, #30]
    4eec:	07db      	lsls	r3, r3, #31
    4eee:	d41f      	bmi.n	4f30 <nrfx_spim_uninit+0x98>
    return p_reg->PSEL.SCK;
    4ef0:	f8d4 0508 	ldr.w	r0, [r4, #1288]	; 0x508
    {
        spim_pin_uninit(nrf_spim_sck_pin_get(p_spim));
    4ef4:	f002 fe9e 	bl	7c34 <spim_pin_uninit>
    return p_reg->PSEL.MISO;
    4ef8:	f8d4 0510 	ldr.w	r0, [r4, #1296]	; 0x510
        spim_pin_uninit(nrf_spim_miso_pin_get(p_spim));
    4efc:	f002 fe9a 	bl	7c34 <spim_pin_uninit>
    return p_reg->PSEL.MOSI;
    4f00:	f8d4 050c 	ldr.w	r0, [r4, #1292]	; 0x50c
        spim_pin_uninit(nrf_spim_mosi_pin_get(p_spim));
    4f04:	f002 fe96 	bl	7c34 <spim_pin_uninit>
#if NRFX_CHECK(NRFX_SPIM_EXTENDED_ENABLED)
        if (SPIM_DCX_PRESENT_VALIDATE(p_instance->drv_inst_idx))
    4f08:	793b      	ldrb	r3, [r7, #4]
    4f0a:	b91b      	cbnz	r3, 4f14 <nrfx_spim_uninit+0x7c>
    return p_reg->PSELDCX;
    4f0c:	f8d4 056c 	ldr.w	r0, [r4, #1388]	; 0x56c
        {
            spim_pin_uninit(nrf_spim_dcx_pin_get(p_spim));
    4f10:	f002 fe90 	bl	7c34 <spim_pin_uninit>
        }
#endif
        if (p_cb->ss_pin != NRFX_SPIM_PIN_NOT_USED)
    4f14:	19ab      	adds	r3, r5, r6
    4f16:	7fdb      	ldrb	r3, [r3, #31]
    4f18:	2bff      	cmp	r3, #255	; 0xff
    4f1a:	d009      	beq.n	4f30 <nrfx_spim_uninit+0x98>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    4f1c:	a801      	add	r0, sp, #4
        {
            nrf_gpio_cfg_default(p_cb->ss_pin);
    4f1e:	9301      	str	r3, [sp, #4]
    4f20:	f7ff feac 	bl	4c7c <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
    4f24:	9b01      	ldr	r3, [sp, #4]
    4f26:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    4f2a:	2202      	movs	r2, #2
    4f2c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
        }
    }

#if NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_195)
    if (p_spim == NRF_SPIM3)
    4f30:	4b07      	ldr	r3, [pc, #28]	; (4f50 <nrfx_spim_uninit+0xb8>)
    4f32:	429c      	cmp	r4, r3
    {
        *(volatile uint32_t *)0x4002F004 = 1;
    4f34:	bf08      	it	eq
    4f36:	2301      	moveq	r3, #1

#if NRFX_CHECK(NRFX_PRS_ENABLED)
    nrfx_prs_release(p_instance->p_reg);
#endif

    p_cb->state = NRFX_DRV_STATE_UNINITIALIZED;
    4f38:	4435      	add	r5, r6
        *(volatile uint32_t *)0x4002F004 = 1;
    4f3a:	bf08      	it	eq
    4f3c:	6063      	streq	r3, [r4, #4]
    p_cb->state = NRFX_DRV_STATE_UNINITIALIZED;
    4f3e:	2300      	movs	r3, #0
    4f40:	772b      	strb	r3, [r5, #28]
}
    4f42:	b002      	add	sp, #8
    4f44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4f48:	20000c30 	.word	0x20000c30
    4f4c:	00080152 	.word	0x00080152
    4f50:	4002f000 	.word	0x4002f000

00004f54 <nrfx_spim_xfer>:
}

nrfx_err_t nrfx_spim_xfer(nrfx_spim_t const *           p_instance,
                          nrfx_spim_xfer_desc_t const * p_xfer_desc,
                          uint32_t                      flags)
{
    4f54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    spim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    4f58:	4f54      	ldr	r7, [pc, #336]	; (50ac <nrfx_spim_xfer+0x158>)
    4f5a:	7903      	ldrb	r3, [r0, #4]
    4f5c:	eb07 1843 	add.w	r8, r7, r3, lsl #5
{
    4f60:	4615      	mov	r5, r2
#endif
                (p_cb->ss_pin == NRFX_SPIM_PIN_NOT_USED));

    nrfx_err_t err_code = NRFX_SUCCESS;

    if (p_cb->transfer_in_progress)
    4f62:	f898 201d 	ldrb.w	r2, [r8, #29]
{
    4f66:	4681      	mov	r9, r0
    4f68:	460c      	mov	r4, r1
    if (p_cb->transfer_in_progress)
    4f6a:	015e      	lsls	r6, r3, #5
    4f6c:	2a00      	cmp	r2, #0
    4f6e:	f040 809b 	bne.w	50a8 <nrfx_spim_xfer+0x154>
                         NRFX_LOG_ERROR_STRING_GET(err_code));
        return err_code;
    }
    else
    {
        if (p_cb->handler && !(flags & (NRFX_SPIM_FLAG_REPEATED_XFER |
    4f72:	59ba      	ldr	r2, [r7, r6]
    4f74:	b12a      	cbz	r2, 4f82 <nrfx_spim_xfer+0x2e>
    4f76:	f015 0f14 	tst.w	r5, #20
                                        NRFX_SPIM_FLAG_NO_XFER_EVT_HANDLER)))
        {
            p_cb->transfer_in_progress = true;
    4f7a:	bf04      	itt	eq
    4f7c:	2201      	moveq	r2, #1
    4f7e:	f888 201d 	strbeq.w	r2, [r8, #29]
        }
    }

    p_cb->evt.xfer_desc = *p_xfer_desc;
    4f82:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
    4f86:	eb07 0c06 	add.w	ip, r7, r6
    4f8a:	f10c 0c0c 	add.w	ip, ip, #12
    4f8e:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}

    set_ss_pin_state(p_cb, true);
    4f92:	2101      	movs	r1, #1
    4f94:	4640      	mov	r0, r8
    4f96:	f002 fe5d 	bl	7c54 <set_ss_pin_state>
    if ((p_xfer_desc->p_tx_buffer != NULL && !nrfx_is_in_ram(p_xfer_desc->p_tx_buffer)) ||
    4f9a:	6821      	ldr	r1, [r4, #0]

    return spim_xfer(p_instance->p_reg, p_cb,  p_xfer_desc, flags);
    4f9c:	f8d9 3000 	ldr.w	r3, [r9]
    if ((p_xfer_desc->p_tx_buffer != NULL && !nrfx_is_in_ram(p_xfer_desc->p_tx_buffer)) ||
    4fa0:	b121      	cbz	r1, 4fac <nrfx_spim_xfer+0x58>
    return ((((uint32_t)p_object) & 0xE0000000u) == 0x20000000u);
    4fa2:	f001 4260 	and.w	r2, r1, #3758096384	; 0xe0000000
    4fa6:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
    4faa:	d106      	bne.n	4fba <nrfx_spim_xfer+0x66>
        (p_xfer_desc->p_rx_buffer != NULL && !nrfx_is_in_ram(p_xfer_desc->p_rx_buffer)))
    4fac:	68a2      	ldr	r2, [r4, #8]
    if ((p_xfer_desc->p_tx_buffer != NULL && !nrfx_is_in_ram(p_xfer_desc->p_tx_buffer)) ||
    4fae:	b152      	cbz	r2, 4fc6 <nrfx_spim_xfer+0x72>
    4fb0:	f002 4260 	and.w	r2, r2, #3758096384	; 0xe0000000
        (p_xfer_desc->p_rx_buffer != NULL && !nrfx_is_in_ram(p_xfer_desc->p_rx_buffer)))
    4fb4:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
    4fb8:	d005      	beq.n	4fc6 <nrfx_spim_xfer+0x72>
        p_cb->transfer_in_progress = false;
    4fba:	443e      	add	r6, r7
    4fbc:	2300      	movs	r3, #0
        return err_code;
    4fbe:	483c      	ldr	r0, [pc, #240]	; (50b0 <nrfx_spim_xfer+0x15c>)
        p_cb->transfer_in_progress = false;
    4fc0:	7773      	strb	r3, [r6, #29]
}
    4fc2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    nrf_spim_tx_buffer_set(p_spim, p_xfer_desc->p_tx_buffer, p_xfer_desc->tx_length);
    4fc6:	6862      	ldr	r2, [r4, #4]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    4fc8:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    4fcc:	f8c3 2548 	str.w	r2, [r3, #1352]	; 0x548
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    4fd0:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
    4fd4:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
    4fd8:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    if (p_spim == NRF_SPIM3)
    4fdc:	4a35      	ldr	r2, [pc, #212]	; (50b4 <nrfx_spim_xfer+0x160>)
    4fde:	4293      	cmp	r3, r2
    4fe0:	d125      	bne.n	502e <nrfx_spim_xfer+0xda>
    m_anomaly_198_preserved_value = *((volatile uint32_t *)0x40000E00);
    4fe2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
        anomaly_198_enable(p_xfer_desc->p_tx_buffer, p_xfer_desc->tx_length);
    4fe6:	e9d4 0100 	ldrd	r0, r1, [r4]
    m_anomaly_198_preserved_value = *((volatile uint32_t *)0x40000E00);
    4fea:	f8d2 4e00 	ldr.w	r4, [r2, #3584]	; 0xe00
    4fee:	4a32      	ldr	r2, [pc, #200]	; (50b8 <nrfx_spim_xfer+0x164>)
    4ff0:	6014      	str	r4, [r2, #0]
    if (buf_len == 0)
    4ff2:	b1e1      	cbz	r1, 502e <nrfx_spim_xfer+0xda>
    if (block_addr >= 0x20010000)
    4ff4:	4c31      	ldr	r4, [pc, #196]	; (50bc <nrfx_spim_xfer+0x168>)
    uint32_t block_addr      = ((uint32_t)p_buffer) & ~0x1FFF;
    4ff6:	f420 52ff 	bic.w	r2, r0, #8160	; 0x1fe0
    4ffa:	f022 021f 	bic.w	r2, r2, #31
    if (block_addr >= 0x20010000)
    4ffe:	42a2      	cmp	r2, r4
    5000:	d83b      	bhi.n	507a <nrfx_spim_xfer+0x126>
    uint32_t buffer_end_addr = ((uint32_t)p_buffer) + buf_len;
    5002:	180c      	adds	r4, r1, r0
        } while ((block_addr < buffer_end_addr) && (block_addr < 0x20012000));
    5004:	f8df c0c0 	ldr.w	ip, [pc, #192]	; 50c8 <nrfx_spim_xfer+0x174>
    uint32_t block_flag      = (1UL << ((block_addr >> 13) & 0xFFFF));
    5008:	f3c2 304f 	ubfx	r0, r2, #13, #16
    500c:	2101      	movs	r1, #1
    500e:	4081      	lsls	r1, r0
    uint32_t occupied_blocks = 0;
    5010:	2000      	movs	r0, #0
            block_addr  += 0x2000;
    5012:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
        } while ((block_addr < buffer_end_addr) && (block_addr < 0x20012000));
    5016:	4294      	cmp	r4, r2
            occupied_blocks |= block_flag;
    5018:	ea40 0001 	orr.w	r0, r0, r1
            block_flag <<= 1;
    501c:	ea4f 0141 	mov.w	r1, r1, lsl #1
        } while ((block_addr < buffer_end_addr) && (block_addr < 0x20012000));
    5020:	d901      	bls.n	5026 <nrfx_spim_xfer+0xd2>
    5022:	4562      	cmp	r2, ip
    5024:	d3f5      	bcc.n	5012 <nrfx_spim_xfer+0xbe>
    *((volatile uint32_t *)0x40000E00) = occupied_blocks;
    5026:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    502a:	f8c2 0e00 	str.w	r0, [r2, #3584]	; 0xe00
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    502e:	2200      	movs	r2, #0
    5030:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
    5034:	f8d3 2118 	ldr.w	r2, [r3, #280]	; 0x118
    if (NRFX_SPIM_FLAG_TX_POSTINC & flags)
    5038:	f015 0201 	ands.w	r2, r5, #1
}


NRF_STATIC_INLINE void nrf_spim_tx_list_enable(NRF_SPIM_Type * p_reg)
{
    p_reg->TXD.LIST = SPIM_TXD_LIST_LIST_ArrayList << SPIM_TXD_LIST_LIST_Pos;
    503c:	bf18      	it	ne
    503e:	2201      	movne	r2, #1
}

NRF_STATIC_INLINE void nrf_spim_tx_list_disable(NRF_SPIM_Type * p_reg)
{
    p_reg->TXD.LIST = SPIM_TXD_LIST_LIST_Disabled << SPIM_TXD_LIST_LIST_Pos;
    5040:	f8c3 2550 	str.w	r2, [r3, #1360]	; 0x550
    if (NRFX_SPIM_FLAG_RX_POSTINC & flags)
    5044:	f015 0202 	ands.w	r2, r5, #2
}

NRF_STATIC_INLINE void nrf_spim_rx_list_enable(NRF_SPIM_Type * p_reg)
{
    p_reg->RXD.LIST = SPIM_RXD_LIST_LIST_ArrayList << SPIM_RXD_LIST_LIST_Pos;
    5048:	bf18      	it	ne
    504a:	2201      	movne	r2, #1
}

NRF_STATIC_INLINE void nrf_spim_rx_list_disable(NRF_SPIM_Type * p_reg)
{
    p_reg->RXD.LIST = SPIM_RXD_LIST_LIST_Disabled << SPIM_RXD_LIST_LIST_Pos;
    504c:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
    if (!(flags & NRFX_SPIM_FLAG_HOLD_XFER))
    5050:	072a      	lsls	r2, r5, #28
    5052:	d515      	bpl.n	5080 <nrfx_spim_xfer+0x12c>
    if (!p_cb->handler)
    5054:	59ba      	ldr	r2, [r7, r6]
    5056:	b9e2      	cbnz	r2, 5092 <nrfx_spim_xfer+0x13e>
        if (p_spim == NRF_SPIM3)
    5058:	4a16      	ldr	r2, [pc, #88]	; (50b4 <nrfx_spim_xfer+0x160>)
    505a:	4293      	cmp	r3, r2
    *((volatile uint32_t *)0x40000E00) = m_anomaly_198_preserved_value;
    505c:	bf02      	ittt	eq
    505e:	4b16      	ldreq	r3, [pc, #88]	; (50b8 <nrfx_spim_xfer+0x164>)
    5060:	681a      	ldreq	r2, [r3, #0]
    5062:	f04f 4380 	moveq.w	r3, #1073741824	; 0x40000000
        set_ss_pin_state(p_cb, false);
    5066:	f04f 0100 	mov.w	r1, #0
    *((volatile uint32_t *)0x40000E00) = m_anomaly_198_preserved_value;
    506a:	bf08      	it	eq
    506c:	f8c3 2e00 	streq.w	r2, [r3, #3584]	; 0xe00
        set_ss_pin_state(p_cb, false);
    5070:	4640      	mov	r0, r8
    5072:	f002 fdef 	bl	7c54 <set_ss_pin_state>
    return err_code;
    5076:	4812      	ldr	r0, [pc, #72]	; (50c0 <nrfx_spim_xfer+0x16c>)
    5078:	e7a3      	b.n	4fc2 <nrfx_spim_xfer+0x6e>
        occupied_blocks = (1UL << 8);
    507a:	f44f 7080 	mov.w	r0, #256	; 0x100
    507e:	e7d2      	b.n	5026 <nrfx_spim_xfer+0xd2>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    5080:	2201      	movs	r2, #1
    5082:	611a      	str	r2, [r3, #16]
    if (!p_cb->handler)
    5084:	59ba      	ldr	r2, [r7, r6]
    5086:	b922      	cbnz	r2, 5092 <nrfx_spim_xfer+0x13e>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    5088:	f8d3 2118 	ldr.w	r2, [r3, #280]	; 0x118
            while (!nrf_spim_event_check(p_spim, NRF_SPIM_EVENT_END))
    508c:	2a00      	cmp	r2, #0
    508e:	d0fb      	beq.n	5088 <nrfx_spim_xfer+0x134>
    5090:	e7e2      	b.n	5058 <nrfx_spim_xfer+0x104>
    if (!enable)
    5092:	f015 0f04 	tst.w	r5, #4
    5096:	f04f 0240 	mov.w	r2, #64	; 0x40
    509a:	d002      	beq.n	50a2 <nrfx_spim_xfer+0x14e>
    p_reg->INTENCLR = mask;
    509c:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
    50a0:	e7e9      	b.n	5076 <nrfx_spim_xfer+0x122>
    p_reg->INTENSET = mask;
    50a2:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    50a6:	e7e6      	b.n	5076 <nrfx_spim_xfer+0x122>
        return err_code;
    50a8:	4806      	ldr	r0, [pc, #24]	; (50c4 <nrfx_spim_xfer+0x170>)
    50aa:	e78a      	b.n	4fc2 <nrfx_spim_xfer+0x6e>
    50ac:	20000c30 	.word	0x20000c30
    50b0:	0bad000a 	.word	0x0bad000a
    50b4:	4002f000 	.word	0x4002f000
    50b8:	20000c2c 	.word	0x20000c2c
    50bc:	2000ffff 	.word	0x2000ffff
    50c0:	0bad0000 	.word	0x0bad0000
    50c4:	0bad000b 	.word	0x0bad000b
    50c8:	20012000 	.word	0x20012000

000050cc <nrfx_spim_3_irq_handler>:
}
#endif

#if NRFX_CHECK(NRFX_SPIM3_ENABLED)
void nrfx_spim_3_irq_handler(void)
{
    50cc:	b570      	push	{r4, r5, r6, lr}
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    50ce:	4b0f      	ldr	r3, [pc, #60]	; (510c <nrfx_spim_3_irq_handler+0x40>)
    50d0:	f8d3 2118 	ldr.w	r2, [r3, #280]	; 0x118
    if (nrf_spim_event_check(p_spim, NRF_SPIM_EVENT_END))
    50d4:	b1c2      	cbz	r2, 5108 <nrfx_spim_3_irq_handler+0x3c>
    *((volatile uint32_t *)0x40000E00) = m_anomaly_198_preserved_value;
    50d6:	4a0e      	ldr	r2, [pc, #56]	; (5110 <nrfx_spim_3_irq_handler+0x44>)
    set_ss_pin_state(p_cb, false);
    50d8:	4c0e      	ldr	r4, [pc, #56]	; (5114 <nrfx_spim_3_irq_handler+0x48>)
    *((volatile uint32_t *)0x40000E00) = m_anomaly_198_preserved_value;
    50da:	6811      	ldr	r1, [r2, #0]
    50dc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    50e0:	2500      	movs	r5, #0
    50e2:	f8c2 1e00 	str.w	r1, [r2, #3584]	; 0xe00
    set_ss_pin_state(p_cb, false);
    50e6:	4620      	mov	r0, r4
    50e8:	f8c3 5118 	str.w	r5, [r3, #280]	; 0x118
    50ec:	4629      	mov	r1, r5
    50ee:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
    50f2:	f002 fdaf 	bl	7c54 <set_ss_pin_state>
    p_cb->transfer_in_progress = false;
    50f6:	7765      	strb	r5, [r4, #29]
    p_cb->evt.type = NRFX_SPIM_EVENT_DONE;
    50f8:	7225      	strb	r5, [r4, #8]
    p_cb->handler(&p_cb->evt, p_cb->p_context);
    50fa:	e9d4 3100 	ldrd	r3, r1, [r4]
    50fe:	f104 0008 	add.w	r0, r4, #8
    irq_handler(NRF_SPIM3, &m_cb[NRFX_SPIM3_INST_IDX]);
}
    5102:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    p_cb->handler(&p_cb->evt, p_cb->p_context);
    5106:	4718      	bx	r3
}
    5108:	bd70      	pop	{r4, r5, r6, pc}
    510a:	bf00      	nop
    510c:	4002f000 	.word	0x4002f000
    5110:	20000c2c 	.word	0x20000c2c
    5114:	20000c30 	.word	0x20000c30

00005118 <twi_tx_start_transfer>:
    return true;
}

static nrfx_err_t twi_tx_start_transfer(NRF_TWI_Type        * p_twi,
                                        twi_control_block_t * p_cb)
{
    5118:	b513      	push	{r0, r1, r4, lr}
    nrfx_err_t ret_code = NRFX_SUCCESS;
    volatile int32_t hw_timeout;

    hw_timeout = HW_TIMEOUT;
    511a:	4b3b      	ldr	r3, [pc, #236]	; (5208 <twi_tx_start_transfer+0xf0>)
    511c:	9301      	str	r3, [sp, #4]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    511e:	2300      	movs	r3, #0
    5120:	f8c0 3104 	str.w	r3, [r0, #260]	; 0x104
    5124:	f8d0 2104 	ldr.w	r2, [r0, #260]	; 0x104
    5128:	f8c0 3124 	str.w	r3, [r0, #292]	; 0x124
    512c:	f8d0 2124 	ldr.w	r2, [r0, #292]	; 0x124
    5130:	f8c0 311c 	str.w	r3, [r0, #284]	; 0x11c
    5134:	f8d0 211c 	ldr.w	r2, [r0, #284]	; 0x11c
    5138:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
    513c:	f8d0 2108 	ldr.w	r2, [r0, #264]	; 0x108
}

NRF_STATIC_INLINE void nrf_twi_shorts_set(NRF_TWI_Type * p_reg,
                                          uint32_t       mask)
{
    p_reg->SHORTS = mask;
    5140:	f8c0 3200 	str.w	r3, [r0, #512]	; 0x200
    nrf_twi_event_clear(p_twi, NRF_TWI_EVENT_ERROR);
    nrf_twi_event_clear(p_twi, NRF_TWI_EVENT_TXDSENT);
    nrf_twi_event_clear(p_twi, NRF_TWI_EVENT_RXDREADY);
    nrf_twi_shorts_set(p_twi, 0);

    p_cb->bytes_transferred = 0;
    5144:	634b      	str	r3, [r1, #52]	; 0x34
    p_cb->error             = false;
    5146:	f881 302f 	strb.w	r3, [r1, #47]	; 0x2f
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    514a:	2301      	movs	r3, #1
    514c:	6203      	str	r3, [r0, #32]

    // In case TWI is suspended resume its operation.
    nrf_twi_task_trigger(p_twi, NRF_TWI_TASK_RESUME);

    if (p_cb->prev_suspend != TWI_SUSPEND_TX)
    514e:	f891 202d 	ldrb.w	r2, [r1, #45]	; 0x2d
    5152:	429a      	cmp	r2, r3
    5154:	bf18      	it	ne
    5156:	6083      	strne	r3, [r0, #8]
    if (p_cb->bytes_transferred < p_cb->curr_length)
    5158:	6b4b      	ldr	r3, [r1, #52]	; 0x34
    515a:	6a8a      	ldr	r2, [r1, #40]	; 0x28
    515c:	4293      	cmp	r3, r2
{
    515e:	4604      	mov	r4, r0
    if (p_cb->bytes_transferred < p_cb->curr_length)
    5160:	d20e      	bcs.n	5180 <twi_tx_start_transfer+0x68>
        nrf_twi_txd_set(p_twi, p_cb->p_curr_buf[p_cb->bytes_transferred]);
    5162:	6a4a      	ldr	r2, [r1, #36]	; 0x24
    p_reg->TXD = data;
    5164:	5cd3      	ldrb	r3, [r2, r3]
    5166:	f8c0 351c 	str.w	r3, [r0, #1308]	; 0x51c
        nrf_twi_task_trigger(p_twi, NRF_TWI_TASK_STARTTX);
    }

    (void)twi_send_byte(p_twi, p_cb);

    if (p_cb->handler)
    516a:	680b      	ldr	r3, [r1, #0]
    516c:	b303      	cbz	r3, 51b0 <twi_tx_start_transfer+0x98>
    {
        p_cb->int_mask = NRF_TWI_INT_STOPPED_MASK   |
    516e:	f240 2386 	movw	r3, #646	; 0x286
    5172:	608b      	str	r3, [r1, #8]
                         NRF_TWI_INT_ERROR_MASK     |
                         NRF_TWI_INT_TXDSENT_MASK   |
                         NRF_TWI_INT_RXDREADY_MASK;

        nrf_twi_int_enable(p_twi, p_cb->int_mask);
    5174:	688b      	ldr	r3, [r1, #8]
    nrfx_err_t ret_code = NRFX_SUCCESS;
    5176:	4825      	ldr	r0, [pc, #148]	; (520c <twi_tx_start_transfer+0xf4>)
    p_reg->INTENSET = mask;
    5178:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
            ret_code = NRFX_ERROR_INTERNAL;
        }

    }
    return ret_code;
}
    517c:	b002      	add	sp, #8
    517e:	bd10      	pop	{r4, pc}
        if (p_cb->curr_tx_no_stop)
    5180:	f891 302c 	ldrb.w	r3, [r1, #44]	; 0x2c
    5184:	b113      	cbz	r3, 518c <twi_tx_start_transfer+0x74>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    5186:	2301      	movs	r3, #1
    5188:	61c3      	str	r3, [r0, #28]
            return false;
    518a:	e7ee      	b.n	516a <twi_tx_start_transfer+0x52>
        else if(TWI_FLAG_SUSPEND(p_cb->flags))
    518c:	6a0b      	ldr	r3, [r1, #32]
    518e:	f013 0f40 	tst.w	r3, #64	; 0x40
    5192:	f04f 0301 	mov.w	r3, #1
    5196:	bf16      	itet	ne
    5198:	61c3      	strne	r3, [r0, #28]
    519a:	6143      	streq	r3, [r0, #20]
            p_cb->prev_suspend = TWI_SUSPEND_TX;
    519c:	f881 302d 	strbne.w	r3, [r1, #45]	; 0x2d
}
    51a0:	e7e3      	b.n	516a <twi_tx_start_transfer+0x52>
               twi_transfer(p_twi, p_cb))
    51a2:	4620      	mov	r0, r4
    51a4:	f002 fd66 	bl	7c74 <twi_transfer>
        while ((hw_timeout > 0) &&
    51a8:	b128      	cbz	r0, 51b6 <twi_tx_start_transfer+0x9e>
            hw_timeout--;
    51aa:	9b01      	ldr	r3, [sp, #4]
    51ac:	3b01      	subs	r3, #1
    51ae:	9301      	str	r3, [sp, #4]
        while ((hw_timeout > 0) &&
    51b0:	9b01      	ldr	r3, [sp, #4]
    51b2:	2b00      	cmp	r3, #0
    51b4:	dcf5      	bgt.n	51a2 <twi_tx_start_transfer+0x8a>
        if (p_cb->error)
    51b6:	f891 302f 	ldrb.w	r3, [r1, #47]	; 0x2f
    51ba:	b95b      	cbnz	r3, 51d4 <twi_tx_start_transfer+0xbc>
    nrfx_err_t ret_code = NRFX_SUCCESS;
    51bc:	4813      	ldr	r0, [pc, #76]	; (520c <twi_tx_start_transfer+0xf4>)
        if (hw_timeout <= 0)
    51be:	9b01      	ldr	r3, [sp, #4]
    51c0:	2b00      	cmp	r3, #0
    51c2:	dcdb      	bgt.n	517c <twi_tx_start_transfer+0x64>
    p_reg->ENABLE = (TWI_ENABLE_ENABLE_Disabled << TWI_ENABLE_ENABLE_Pos);
    51c4:	2300      	movs	r3, #0
    51c6:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    p_reg->ENABLE = (TWI_ENABLE_ENABLE_Enabled << TWI_ENABLE_ENABLE_Pos);
    51ca:	2305      	movs	r3, #5
            ret_code = NRFX_ERROR_INTERNAL;
    51cc:	4810      	ldr	r0, [pc, #64]	; (5210 <twi_tx_start_transfer+0xf8>)
    51ce:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    return ret_code;
    51d2:	e7d3      	b.n	517c <twi_tx_start_transfer+0x64>
    uint32_t error_source = p_reg->ERRORSRC;
    51d4:	f8d4 34c4 	ldr.w	r3, [r4, #1220]	; 0x4c4
    p_reg->ERRORSRC = error_source;
    51d8:	f8c4 34c4 	str.w	r3, [r4, #1220]	; 0x4c4
            if (errorsrc)
    51dc:	b18b      	cbz	r3, 5202 <twi_tx_start_transfer+0xea>
        ret = NRFX_ERROR_DRV_TWI_ERR_OVERRUN;
    51de:	4a0d      	ldr	r2, [pc, #52]	; (5214 <twi_tx_start_transfer+0xfc>)
    51e0:	480b      	ldr	r0, [pc, #44]	; (5210 <twi_tx_start_transfer+0xf8>)
    51e2:	f013 0f01 	tst.w	r3, #1
    51e6:	bf18      	it	ne
    51e8:	4610      	movne	r0, r2
        ret = NRFX_ERROR_DRV_TWI_ERR_ANACK;
    51ea:	f013 0f02 	tst.w	r3, #2
    51ee:	f102 0201 	add.w	r2, r2, #1
    51f2:	bf18      	it	ne
    51f4:	4610      	movne	r0, r2
        ret = NRFX_ERROR_DRV_TWI_ERR_DNACK;
    51f6:	f013 0f04 	tst.w	r3, #4
    51fa:	4b07      	ldr	r3, [pc, #28]	; (5218 <twi_tx_start_transfer+0x100>)
    51fc:	bf18      	it	ne
    51fe:	4618      	movne	r0, r3
    5200:	e7dd      	b.n	51be <twi_tx_start_transfer+0xa6>
                ret_code = NRFX_ERROR_INTERNAL;
    5202:	4803      	ldr	r0, [pc, #12]	; (5210 <twi_tx_start_transfer+0xf8>)
    5204:	e7db      	b.n	51be <twi_tx_start_transfer+0xa6>
    5206:	bf00      	nop
    5208:	000186a0 	.word	0x000186a0
    520c:	0bad0000 	.word	0x0bad0000
    5210:	0bad0001 	.word	0x0bad0001
    5214:	0bae0000 	.word	0x0bae0000
    5218:	0bae0002 	.word	0x0bae0002

0000521c <twi_rx_start_transfer>:

static nrfx_err_t twi_rx_start_transfer(NRF_TWI_Type        * p_twi,
                                        twi_control_block_t * p_cb)
{
    521c:	b513      	push	{r0, r1, r4, lr}
    nrfx_err_t ret_code = NRFX_SUCCESS;
    volatile int32_t hw_timeout;

    hw_timeout = HW_TIMEOUT;
    521e:	4b33      	ldr	r3, [pc, #204]	; (52ec <twi_rx_start_transfer+0xd0>)
    5220:	9301      	str	r3, [sp, #4]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    5222:	2300      	movs	r3, #0
    5224:	f8c0 3104 	str.w	r3, [r0, #260]	; 0x104
    5228:	f8d0 2104 	ldr.w	r2, [r0, #260]	; 0x104
    522c:	f8c0 3124 	str.w	r3, [r0, #292]	; 0x124
    5230:	f8d0 2124 	ldr.w	r2, [r0, #292]	; 0x124
    5234:	f8c0 311c 	str.w	r3, [r0, #284]	; 0x11c
    5238:	f8d0 211c 	ldr.w	r2, [r0, #284]	; 0x11c
    523c:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
    5240:	f8d0 2108 	ldr.w	r2, [r0, #264]	; 0x108
    nrf_twi_event_clear(p_twi, NRF_TWI_EVENT_STOPPED);
    nrf_twi_event_clear(p_twi, NRF_TWI_EVENT_ERROR);
    nrf_twi_event_clear(p_twi, NRF_TWI_EVENT_TXDSENT);
    nrf_twi_event_clear(p_twi, NRF_TWI_EVENT_RXDREADY);

    p_cb->bytes_transferred = 0;
    5244:	634b      	str	r3, [r1, #52]	; 0x34
    p_cb->error             = false;
    5246:	f881 302f 	strb.w	r3, [r1, #47]	; 0x2f

    if ((p_cb->curr_length == 1) && (!TWI_FLAG_SUSPEND(p_cb->flags)))
    524a:	6a8b      	ldr	r3, [r1, #40]	; 0x28
    524c:	2b01      	cmp	r3, #1
{
    524e:	4604      	mov	r4, r0
    if ((p_cb->curr_length == 1) && (!TWI_FLAG_SUSPEND(p_cb->flags)))
    5250:	d117      	bne.n	5282 <twi_rx_start_transfer+0x66>
    5252:	6a0b      	ldr	r3, [r1, #32]
    5254:	065b      	lsls	r3, r3, #25
    5256:	d414      	bmi.n	5282 <twi_rx_start_transfer+0x66>
    p_reg->SHORTS = mask;
    5258:	2302      	movs	r3, #2
    525a:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    525e:	2301      	movs	r3, #1
    5260:	6223      	str	r3, [r4, #32]
        nrf_twi_shorts_set(p_twi, NRF_TWI_SHORT_BB_SUSPEND_MASK);
    }
    // In case TWI is suspended resume its operation.
    nrf_twi_task_trigger(p_twi, NRF_TWI_TASK_RESUME);

    if (p_cb->prev_suspend != TWI_SUSPEND_RX)
    5262:	f891 202d 	ldrb.w	r2, [r1, #45]	; 0x2d
    5266:	2a02      	cmp	r2, #2
    5268:	bf18      	it	ne
    526a:	6023      	strne	r3, [r4, #0]
    {
        nrf_twi_task_trigger(p_twi, NRF_TWI_TASK_STARTRX);
    }

    if (p_cb->handler)
    526c:	680b      	ldr	r3, [r1, #0]
    526e:	b18b      	cbz	r3, 5294 <twi_rx_start_transfer+0x78>
    {
        p_cb->int_mask = NRF_TWI_INT_STOPPED_MASK   |
    5270:	f240 2386 	movw	r3, #646	; 0x286
    5274:	608b      	str	r3, [r1, #8]
                        NRF_TWI_INT_ERROR_MASK     |
                        NRF_TWI_INT_TXDSENT_MASK   |
                        NRF_TWI_INT_RXDREADY_MASK;
        nrf_twi_int_enable(p_twi, p_cb->int_mask);
    5276:	688b      	ldr	r3, [r1, #8]
    nrfx_err_t ret_code = NRFX_SUCCESS;
    5278:	481d      	ldr	r0, [pc, #116]	; (52f0 <twi_rx_start_transfer+0xd4>)
    p_reg->INTENSET = mask;
    527a:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
            nrf_twi_enable(p_twi);
            ret_code = NRFX_ERROR_INTERNAL;
        }
    }
    return ret_code;
}
    527e:	b002      	add	sp, #8
    5280:	bd10      	pop	{r4, pc}
    p_reg->SHORTS = mask;
    5282:	2301      	movs	r3, #1
    5284:	e7e9      	b.n	525a <twi_rx_start_transfer+0x3e>
               twi_transfer(p_twi, p_cb))
    5286:	4620      	mov	r0, r4
    5288:	f002 fcf4 	bl	7c74 <twi_transfer>
        while ((hw_timeout > 0) &&
    528c:	b128      	cbz	r0, 529a <twi_rx_start_transfer+0x7e>
               hw_timeout--;
    528e:	9b01      	ldr	r3, [sp, #4]
    5290:	3b01      	subs	r3, #1
    5292:	9301      	str	r3, [sp, #4]
        while ((hw_timeout > 0) &&
    5294:	9b01      	ldr	r3, [sp, #4]
    5296:	2b00      	cmp	r3, #0
    5298:	dcf5      	bgt.n	5286 <twi_rx_start_transfer+0x6a>
        if (p_cb->error)
    529a:	f891 302f 	ldrb.w	r3, [r1, #47]	; 0x2f
    529e:	b95b      	cbnz	r3, 52b8 <twi_rx_start_transfer+0x9c>
    nrfx_err_t ret_code = NRFX_SUCCESS;
    52a0:	4813      	ldr	r0, [pc, #76]	; (52f0 <twi_rx_start_transfer+0xd4>)
        if (hw_timeout <= 0)
    52a2:	9b01      	ldr	r3, [sp, #4]
    52a4:	2b00      	cmp	r3, #0
    52a6:	dcea      	bgt.n	527e <twi_rx_start_transfer+0x62>
    p_reg->ENABLE = (TWI_ENABLE_ENABLE_Disabled << TWI_ENABLE_ENABLE_Pos);
    52a8:	2300      	movs	r3, #0
    52aa:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    p_reg->ENABLE = (TWI_ENABLE_ENABLE_Enabled << TWI_ENABLE_ENABLE_Pos);
    52ae:	2305      	movs	r3, #5
            ret_code = NRFX_ERROR_INTERNAL;
    52b0:	4810      	ldr	r0, [pc, #64]	; (52f4 <twi_rx_start_transfer+0xd8>)
    52b2:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    return ret_code;
    52b6:	e7e2      	b.n	527e <twi_rx_start_transfer+0x62>
    uint32_t error_source = p_reg->ERRORSRC;
    52b8:	f8d4 34c4 	ldr.w	r3, [r4, #1220]	; 0x4c4
    p_reg->ERRORSRC = error_source;
    52bc:	f8c4 34c4 	str.w	r3, [r4, #1220]	; 0x4c4
            if (errorsrc)
    52c0:	b18b      	cbz	r3, 52e6 <twi_rx_start_transfer+0xca>
        ret = NRFX_ERROR_DRV_TWI_ERR_OVERRUN;
    52c2:	4a0d      	ldr	r2, [pc, #52]	; (52f8 <twi_rx_start_transfer+0xdc>)
    52c4:	480b      	ldr	r0, [pc, #44]	; (52f4 <twi_rx_start_transfer+0xd8>)
    52c6:	f013 0f01 	tst.w	r3, #1
    52ca:	bf18      	it	ne
    52cc:	4610      	movne	r0, r2
        ret = NRFX_ERROR_DRV_TWI_ERR_ANACK;
    52ce:	f013 0f02 	tst.w	r3, #2
    52d2:	f102 0201 	add.w	r2, r2, #1
    52d6:	bf18      	it	ne
    52d8:	4610      	movne	r0, r2
        ret = NRFX_ERROR_DRV_TWI_ERR_DNACK;
    52da:	f013 0f04 	tst.w	r3, #4
    52de:	4b07      	ldr	r3, [pc, #28]	; (52fc <twi_rx_start_transfer+0xe0>)
    52e0:	bf18      	it	ne
    52e2:	4618      	movne	r0, r3
    52e4:	e7dd      	b.n	52a2 <twi_rx_start_transfer+0x86>
                ret_code = NRFX_ERROR_INTERNAL;
    52e6:	4803      	ldr	r0, [pc, #12]	; (52f4 <twi_rx_start_transfer+0xd8>)
    52e8:	e7db      	b.n	52a2 <twi_rx_start_transfer+0x86>
    52ea:	bf00      	nop
    52ec:	000186a0 	.word	0x000186a0
    52f0:	0bad0000 	.word	0x0bad0000
    52f4:	0bad0001 	.word	0x0bad0001
    52f8:	0bae0000 	.word	0x0bae0000
    52fc:	0bae0002 	.word	0x0bae0002

00005300 <nrfx_twi_init>:
{
    5300:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    twi_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
    5304:	7907      	ldrb	r7, [r0, #4]
    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
    5306:	4d2b      	ldr	r5, [pc, #172]	; (53b4 <nrfx_twi_init+0xb4>)
    5308:	f04f 0e3c 	mov.w	lr, #60	; 0x3c
    530c:	fb0e fe07 	mul.w	lr, lr, r7
    5310:	eb05 040e 	add.w	r4, r5, lr
    5314:	f894 602e 	ldrb.w	r6, [r4, #46]	; 0x2e
    5318:	2e00      	cmp	r6, #0
    531a:	d149      	bne.n	53b0 <nrfx_twi_init+0xb0>
    NRF_TWI_Type * p_twi = p_instance->p_twi;
    531c:	f8d0 c000 	ldr.w	ip, [r0]
    p_cb->handler         = event_handler;
    5320:	f845 200e 	str.w	r2, [r5, lr]
    p_cb->int_mask        = 0;
    5324:	60a6      	str	r6, [r4, #8]
    p_cb->p_context       = p_context;
    5326:	6063      	str	r3, [r4, #4]
    p_cb->prev_suspend    = TWI_NO_SUSPEND;
    5328:	f884 602d 	strb.w	r6, [r4, #45]	; 0x2d
    p_cb->repeated        = false;
    532c:	f884 6031 	strb.w	r6, [r4, #49]	; 0x31
    p_cb->busy            = false;
    5330:	f884 6030 	strb.w	r6, [r4, #48]	; 0x30
    p_cb->hold_bus_uninit = p_config->hold_bus_uninit;
    5334:	7b4b      	ldrb	r3, [r1, #13]
    5336:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
    p_cb->skip_gpio_cfg   = p_config->skip_gpio_cfg;
    533a:	7b8b      	ldrb	r3, [r1, #14]
    533c:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    if (!p_config->skip_gpio_cfg)
    5340:	b9e3      	cbnz	r3, 537c <nrfx_twi_init+0x7c>
        TWI_PIN_INIT(p_config->scl);
    5342:	680c      	ldr	r4, [r1, #0]
        case 0: return NRF_P0;
    5344:	4b1c      	ldr	r3, [pc, #112]	; (53b8 <nrfx_twi_init+0xb8>)
    *p_pin = pin_number & 0x1F;
    5346:	f004 061f 	and.w	r6, r4, #31
    return pin_number >> 5;
    534a:	0964      	lsrs	r4, r4, #5
        case 0: return NRF_P0;
    534c:	2c01      	cmp	r4, #1
    534e:	bf08      	it	eq
    5350:	4698      	moveq	r8, r3
    reg->PIN_CNF[pin_number] = cnf;
    5352:	f506 74e0 	add.w	r4, r6, #448	; 0x1c0
        case 0: return NRF_P0;
    5356:	bf18      	it	ne
    5358:	f04f 48a0 	movne.w	r8, #1342177280	; 0x50000000
    reg->PIN_CNF[pin_number] = cnf;
    535c:	f240 6e0c 	movw	lr, #1548	; 0x60c
    5360:	f848 e024 	str.w	lr, [r8, r4, lsl #2]
        TWI_PIN_INIT(p_config->sda);
    5364:	684c      	ldr	r4, [r1, #4]
    *p_pin = pin_number & 0x1F;
    5366:	f004 061f 	and.w	r6, r4, #31
    return pin_number >> 5;
    536a:	0964      	lsrs	r4, r4, #5
        case 0: return NRF_P0;
    536c:	2c01      	cmp	r4, #1
    536e:	bf18      	it	ne
    5370:	f04f 43a0 	movne.w	r3, #1342177280	; 0x50000000
    reg->PIN_CNF[pin_number] = cnf;
    5374:	f506 74e0 	add.w	r4, r6, #448	; 0x1c0
    5378:	f843 e024 	str.w	lr, [r3, r4, lsl #2]
    if (!p_config->skip_psel_cfg)
    537c:	7bcb      	ldrb	r3, [r1, #15]
    537e:	b92b      	cbnz	r3, 538c <nrfx_twi_init+0x8c>
        nrf_twi_pins_set(p_twi, p_config->scl, p_config->sda);
    5380:	e9d1 4300 	ldrd	r4, r3, [r1]
    p_reg->PSEL.SCL = scl_pin;
    5384:	f8cc 4508 	str.w	r4, [ip, #1288]	; 0x508
    p_reg->PSEL.SDA = sda_pin;
    5388:	f8cc 350c 	str.w	r3, [ip, #1292]	; 0x50c
        (nrf_twi_frequency_t)p_config->frequency);
    538c:	688b      	ldr	r3, [r1, #8]
    p_reg->FREQUENCY = frequency;
    538e:	f8cc 3524 	str.w	r3, [ip, #1316]	; 0x524
    if (p_cb->handler)
    5392:	b122      	cbz	r2, 539e <nrfx_twi_init+0x9e>
    return (IRQn_Type)NRFX_IRQ_NUMBER_GET(p_reg);
    5394:	6800      	ldr	r0, [r0, #0]
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(p_instance->p_twi));
    5396:	f340 3007 	sbfx	r0, r0, #12, #8
    539a:	f7fc fad5 	bl	1948 <arch_irq_enable>
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
    539e:	233c      	movs	r3, #60	; 0x3c
    53a0:	fb03 5507 	mla	r5, r3, r7, r5
    return err_code;
    53a4:	4805      	ldr	r0, [pc, #20]	; (53bc <nrfx_twi_init+0xbc>)
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
    53a6:	2301      	movs	r3, #1
    53a8:	f885 302e 	strb.w	r3, [r5, #46]	; 0x2e
}
    53ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return err_code;
    53b0:	4803      	ldr	r0, [pc, #12]	; (53c0 <nrfx_twi_init+0xc0>)
    53b2:	e7fb      	b.n	53ac <nrfx_twi_init+0xac>
    53b4:	20000c50 	.word	0x20000c50
    53b8:	50000300 	.word	0x50000300
    53bc:	0bad0000 	.word	0x0bad0000
    53c0:	0bad0005 	.word	0x0bad0005

000053c4 <nrfx_twi_enable>:
    NRF_TWI_Type * p_twi = p_instance->p_twi;
    53c4:	6803      	ldr	r3, [r0, #0]
    twi_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    53c6:	7902      	ldrb	r2, [r0, #4]
    p_reg->ENABLE = (TWI_ENABLE_ENABLE_Enabled << TWI_ENABLE_ENABLE_Pos);
    53c8:	2105      	movs	r1, #5
    53ca:	f8c3 1500 	str.w	r1, [r3, #1280]	; 0x500
    p_cb->state = NRFX_DRV_STATE_POWERED_ON;
    53ce:	4b04      	ldr	r3, [pc, #16]	; (53e0 <nrfx_twi_enable+0x1c>)
    53d0:	213c      	movs	r1, #60	; 0x3c
    53d2:	fb01 3302 	mla	r3, r1, r2, r3
    53d6:	2202      	movs	r2, #2
    53d8:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
}
    53dc:	4770      	bx	lr
    53de:	bf00      	nop
    53e0:	20000c50 	.word	0x20000c50

000053e4 <nrfx_twi_disable>:
    NRF_TWI_Type * p_twi = p_instance->p_twi;
    53e4:	6803      	ldr	r3, [r0, #0]
    p_reg->INTENCLR = mask;
    53e6:	4a0b      	ldr	r2, [pc, #44]	; (5414 <nrfx_twi_disable+0x30>)
    twi_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    53e8:	7901      	ldrb	r1, [r0, #4]
    53ea:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    p_reg->SHORTS &= ~(mask);
    53ee:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    53f2:	f022 0203 	bic.w	r2, r2, #3
    53f6:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    p_reg->ENABLE = (TWI_ENABLE_ENABLE_Disabled << TWI_ENABLE_ENABLE_Pos);
    53fa:	2200      	movs	r2, #0
    53fc:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
    5400:	4b05      	ldr	r3, [pc, #20]	; (5418 <nrfx_twi_disable+0x34>)
    5402:	203c      	movs	r0, #60	; 0x3c
    5404:	fb00 3301 	mla	r3, r0, r1, r3
    5408:	2101      	movs	r1, #1
    540a:	f883 102e 	strb.w	r1, [r3, #46]	; 0x2e
    p_cb->busy = false;
    540e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
}
    5412:	4770      	bx	lr
    5414:	00044286 	.word	0x00044286
    5418:	20000c50 	.word	0x20000c50

0000541c <nrfx_twi_xfer>:
}

nrfx_err_t nrfx_twi_xfer(nrfx_twi_t const *           p_instance,
                         nrfx_twi_xfer_desc_t const * p_xfer_desc,
                         uint32_t                     flags)
{
    541c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    if ((p_cb->prev_suspend == TWI_SUSPEND_TX) && (p_xfer_desc->type == NRFX_TWI_XFER_RX))
    5420:	4f31      	ldr	r7, [pc, #196]	; (54e8 <nrfx_twi_xfer+0xcc>)

    nrfx_err_t err_code = NRFX_SUCCESS;
    twi_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    5422:	7904      	ldrb	r4, [r0, #4]
                           p_xfer_desc->primary_length * sizeof(p_xfer_desc->p_primary_buf[0]));
    NRFX_LOG_DEBUG("Secondary buffer data:");
    NRFX_LOG_HEXDUMP_DEBUG(p_xfer_desc->p_secondary_buf,
                           p_xfer_desc->secondary_length * sizeof(p_xfer_desc->p_secondary_buf[0]));

    err_code = twi_xfer((NRF_TWI_Type  *)p_instance->p_twi, p_cb, p_xfer_desc, flags);
    5424:	f8d0 9000 	ldr.w	r9, [r0]
    if ((p_cb->prev_suspend == TWI_SUSPEND_TX) && (p_xfer_desc->type == NRFX_TWI_XFER_RX))
    5428:	233c      	movs	r3, #60	; 0x3c
    542a:	fb03 7304 	mla	r3, r3, r4, r7
{
    542e:	460d      	mov	r5, r1
    if ((p_cb->prev_suspend == TWI_SUSPEND_TX) && (p_xfer_desc->type == NRFX_TWI_XFER_RX))
    5430:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
    5434:	2b01      	cmp	r3, #1
{
    5436:	4694      	mov	ip, r2
    if ((p_cb->prev_suspend == TWI_SUSPEND_TX) && (p_xfer_desc->type == NRFX_TWI_XFER_RX))
    5438:	d104      	bne.n	5444 <nrfx_twi_xfer+0x28>
    543a:	780b      	ldrb	r3, [r1, #0]
    543c:	2b01      	cmp	r3, #1
    543e:	d106      	bne.n	544e <nrfx_twi_xfer+0x32>
        return NRFX_ERROR_INVALID_STATE;
    5440:	482a      	ldr	r0, [pc, #168]	; (54ec <nrfx_twi_xfer+0xd0>)
    NRFX_LOG_WARNING("Function: %s, error code: %s.",
                     __func__,
                     NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
    5442:	e011      	b.n	5468 <nrfx_twi_xfer+0x4c>
    else if ((p_cb->prev_suspend == TWI_SUSPEND_RX) && (p_xfer_desc->type != NRFX_TWI_XFER_RX))
    5444:	2b02      	cmp	r3, #2
    5446:	d102      	bne.n	544e <nrfx_twi_xfer+0x32>
    5448:	780b      	ldrb	r3, [r1, #0]
    544a:	2b01      	cmp	r3, #1
    544c:	d1f8      	bne.n	5440 <nrfx_twi_xfer+0x24>
    if (p_cb->busy)
    544e:	263c      	movs	r6, #60	; 0x3c
    p_reg->INTENCLR = mask;
    5450:	4b27      	ldr	r3, [pc, #156]	; (54f0 <nrfx_twi_xfer+0xd4>)
    5452:	f8c9 3308 	str.w	r3, [r9, #776]	; 0x308
    5456:	fb06 7604 	mla	r6, r6, r4, r7
    545a:	f896 3030 	ldrb.w	r3, [r6, #48]	; 0x30
    545e:	b12b      	cbz	r3, 546c <nrfx_twi_xfer+0x50>
        nrf_twi_int_enable(p_twi, p_cb->int_mask);
    5460:	68b3      	ldr	r3, [r6, #8]
        return err_code;
    5462:	4824      	ldr	r0, [pc, #144]	; (54f4 <nrfx_twi_xfer+0xd8>)
    p_reg->INTENSET = mask;
    5464:	f8c9 3304 	str.w	r3, [r9, #772]	; 0x304
}
    5468:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        p_cb->busy = (TWI_FLAG_NO_HANDLER_IN_USE(flags)) ? false : true;
    546c:	f08c 0304 	eor.w	r3, ip, #4
    5470:	f3c3 0380 	ubfx	r3, r3, #2, #1
    5474:	f886 3030 	strb.w	r3, [r6, #48]	; 0x30
    p_cb->flags       = flags;
    5478:	f8c6 c020 	str.w	ip, [r6, #32]
    p_cb->xfer_desc   = *p_xfer_desc;
    547c:	46a8      	mov	r8, r5
    547e:	e8b8 000f 	ldmia.w	r8!, {r0, r1, r2, r3}
    5482:	f106 0e0c 	add.w	lr, r6, #12
    5486:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
    548a:	f8d8 3000 	ldr.w	r3, [r8]
    548e:	f8ce 3000 	str.w	r3, [lr]
    p_cb->curr_length = p_xfer_desc->primary_length;
    5492:	686b      	ldr	r3, [r5, #4]
    5494:	62b3      	str	r3, [r6, #40]	; 0x28
    p_cb->p_curr_buf  = p_xfer_desc->p_primary_buf;
    5496:	68eb      	ldr	r3, [r5, #12]
    5498:	6273      	str	r3, [r6, #36]	; 0x24
    p_reg->ADDRESS = address;
    549a:	786b      	ldrb	r3, [r5, #1]
    549c:	f8c9 3588 	str.w	r3, [r9, #1416]	; 0x588
    if (p_xfer_desc->type != NRFX_TWI_XFER_RX)
    54a0:	782b      	ldrb	r3, [r5, #0]
    twi_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    54a2:	ebc4 1a04 	rsb	sl, r4, r4, lsl #4
    if (p_xfer_desc->type != NRFX_TWI_XFER_RX)
    54a6:	2b01      	cmp	r3, #1
    twi_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    54a8:	eb07 0a8a 	add.w	sl, r7, sl, lsl #2
    if (p_xfer_desc->type != NRFX_TWI_XFER_RX)
    54ac:	d017      	beq.n	54de <nrfx_twi_xfer+0xc2>
                                 !(flags & NRFX_TWI_FLAG_TX_NO_STOP)) ? false : true;
    54ae:	b99b      	cbnz	r3, 54d8 <nrfx_twi_xfer+0xbc>
    54b0:	f3cc 1c40 	ubfx	ip, ip, #5, #1
        p_cb->curr_tx_no_stop = ((p_xfer_desc->type == NRFX_TWI_XFER_TX) &&
    54b4:	233c      	movs	r3, #60	; 0x3c
    54b6:	fb03 7304 	mla	r3, r3, r4, r7
        err_code = twi_tx_start_transfer(p_twi, p_cb);
    54ba:	4651      	mov	r1, sl
    54bc:	4648      	mov	r0, r9
                                 !(flags & NRFX_TWI_FLAG_TX_NO_STOP)) ? false : true;
    54be:	f883 c02c 	strb.w	ip, [r3, #44]	; 0x2c
        err_code = twi_tx_start_transfer(p_twi, p_cb);
    54c2:	f7ff fe29 	bl	5118 <twi_tx_start_transfer>
    if (p_cb->handler == NULL)
    54c6:	233c      	movs	r3, #60	; 0x3c
    54c8:	435c      	muls	r4, r3
    54ca:	193a      	adds	r2, r7, r4
    54cc:	593b      	ldr	r3, [r7, r4]
    54ce:	2b00      	cmp	r3, #0
    54d0:	d1ca      	bne.n	5468 <nrfx_twi_xfer+0x4c>
        p_cb->busy = false;
    54d2:	f882 3030 	strb.w	r3, [r2, #48]	; 0x30
    54d6:	e7c7      	b.n	5468 <nrfx_twi_xfer+0x4c>
                                 !(flags & NRFX_TWI_FLAG_TX_NO_STOP)) ? false : true;
    54d8:	f04f 0c01 	mov.w	ip, #1
    54dc:	e7ea      	b.n	54b4 <nrfx_twi_xfer+0x98>
        err_code = twi_rx_start_transfer(p_twi, p_cb);
    54de:	4651      	mov	r1, sl
    54e0:	4648      	mov	r0, r9
    54e2:	f7ff fe9b 	bl	521c <twi_rx_start_transfer>
    54e6:	e7ee      	b.n	54c6 <nrfx_twi_xfer+0xaa>
    54e8:	20000c50 	.word	0x20000c50
    54ec:	0bad0005 	.word	0x0bad0005
    54f0:	00044286 	.word	0x00044286
    54f4:	0bad000b 	.word	0x0bad000b

000054f8 <nrfx_twi_0_irq_handler>:
}

#if NRFX_CHECK(NRFX_TWI0_ENABLED)
void nrfx_twi_0_irq_handler(void)
{
    twi_irq_handler(NRF_TWI0, &m_cb[NRFX_TWI0_INST_IDX]);
    54f8:	4901      	ldr	r1, [pc, #4]	; (5500 <nrfx_twi_0_irq_handler+0x8>)
    54fa:	4802      	ldr	r0, [pc, #8]	; (5504 <nrfx_twi_0_irq_handler+0xc>)
    54fc:	f002 bc52 	b.w	7da4 <twi_irq_handler>
    5500:	20000c50 	.word	0x20000c50
    5504:	40003000 	.word	0x40003000

00005508 <nrf_gpio_pin_port_decode>:
    uint32_t pin_number = *p_pin;
    5508:	6803      	ldr	r3, [r0, #0]
    *p_pin = pin_number & 0x1F;
    550a:	f003 021f 	and.w	r2, r3, #31
    return pin_number >> 5;
    550e:	095b      	lsrs	r3, r3, #5
        case 0: return NRF_P0;
    5510:	2b01      	cmp	r3, #1
    *p_pin = pin_number & 0x1F;
    5512:	6002      	str	r2, [r0, #0]
}
    5514:	4802      	ldr	r0, [pc, #8]	; (5520 <nrf_gpio_pin_port_decode+0x18>)
    5516:	bf18      	it	ne
    5518:	f04f 40a0 	movne.w	r0, #1342177280	; 0x50000000
    551c:	4770      	bx	lr
    551e:	bf00      	nop
    5520:	50000300 	.word	0x50000300

00005524 <nrfx_twi_twim_bus_recover>:
                                                  NRF_GPIO_PIN_PULLUP,        \
                                                  NRF_GPIO_PIN_S0D1,          \
                                                  NRF_GPIO_PIN_NOSENSE)

nrfx_err_t nrfx_twi_twim_bus_recover(uint32_t scl_pin, uint32_t sda_pin)
{
    5524:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    5526:	4606      	mov	r6, r0
    nrf_gpio_pin_set(scl_pin);
    5528:	f002 fc93 	bl	7e52 <nrf_gpio_pin_set>
    nrf_gpio_pin_set(sda_pin);
    552c:	4608      	mov	r0, r1
    552e:	f002 fc90 	bl	7e52 <nrf_gpio_pin_set>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    5532:	a801      	add	r0, sp, #4
    5534:	9601      	str	r6, [sp, #4]
    5536:	f7ff ffe7 	bl	5508 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
    553a:	9b01      	ldr	r3, [sp, #4]
    553c:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
{
    5540:	460c      	mov	r4, r1
    5542:	f240 610d 	movw	r1, #1549	; 0x60d
    5546:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    554a:	a801      	add	r0, sp, #4
    554c:	9401      	str	r4, [sp, #4]
    554e:	f7ff ffdb 	bl	5508 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
    5552:	9b01      	ldr	r3, [sp, #4]
    5554:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0

    TWI_TWIM_PIN_CONFIGURE(scl_pin);
    TWI_TWIM_PIN_CONFIGURE(sda_pin);
    NRFX_DELAY_US(4);
    5558:	2509      	movs	r5, #9
    555a:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
    555e:	2004      	movs	r0, #4
    5560:	f002 fa34 	bl	79cc <nrfx_busy_wait>
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    5564:	2701      	movs	r7, #1
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    5566:	a801      	add	r0, sp, #4
    5568:	9401      	str	r4, [sp, #4]
    556a:	f7ff ffcd 	bl	5508 <nrf_gpio_pin_port_decode>
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
    556e:	9a01      	ldr	r2, [sp, #4]
    return p_reg->IN;
    5570:	f8d0 3510 	ldr.w	r3, [r0, #1296]	; 0x510
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
    5574:	40d3      	lsrs	r3, r2

    for (uint8_t i = 0; i < 9; i++)
    {
        if (nrf_gpio_pin_read(sda_pin))
    5576:	07db      	lsls	r3, r3, #31
    5578:	d415      	bmi.n	55a6 <nrfx_twi_twim_bus_recover+0x82>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    557a:	a801      	add	r0, sp, #4
    557c:	9601      	str	r6, [sp, #4]
    557e:	f7ff ffc3 	bl	5508 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    5582:	9b01      	ldr	r3, [sp, #4]
    5584:	fa07 f303 	lsl.w	r3, r7, r3
    p_reg->OUTCLR = clr_mask;
    5588:	f8c0 350c 	str.w	r3, [r0, #1292]	; 0x50c
        }
        else
        {
            // Pulse CLOCK signal
            nrf_gpio_pin_clear(scl_pin);
            NRFX_DELAY_US(4);
    558c:	2004      	movs	r0, #4
    558e:	f002 fa1d 	bl	79cc <nrfx_busy_wait>
            nrf_gpio_pin_set(scl_pin);
    5592:	4630      	mov	r0, r6
    5594:	f002 fc5d 	bl	7e52 <nrf_gpio_pin_set>
    for (uint8_t i = 0; i < 9; i++)
    5598:	3d01      	subs	r5, #1
            NRFX_DELAY_US(4);
    559a:	2004      	movs	r0, #4
    559c:	f002 fa16 	bl	79cc <nrfx_busy_wait>
    for (uint8_t i = 0; i < 9; i++)
    55a0:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
    55a4:	d1df      	bne.n	5566 <nrfx_twi_twim_bus_recover+0x42>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    55a6:	a801      	add	r0, sp, #4
    55a8:	9401      	str	r4, [sp, #4]
    55aa:	f7ff ffad 	bl	5508 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    55ae:	9a01      	ldr	r2, [sp, #4]
    55b0:	2301      	movs	r3, #1
    55b2:	4093      	lsls	r3, r2
    p_reg->OUTCLR = clr_mask;
    55b4:	f8c0 350c 	str.w	r3, [r0, #1292]	; 0x50c
        }
    }

    // Generate a STOP condition on the bus
    nrf_gpio_pin_clear(sda_pin);
    NRFX_DELAY_US(4);
    55b8:	2004      	movs	r0, #4
    55ba:	f002 fa07 	bl	79cc <nrfx_busy_wait>
    nrf_gpio_pin_set(sda_pin);
    55be:	4620      	mov	r0, r4
    55c0:	f002 fc47 	bl	7e52 <nrf_gpio_pin_set>
    NRFX_DELAY_US(4);
    55c4:	2004      	movs	r0, #4
    55c6:	f002 fa01 	bl	79cc <nrfx_busy_wait>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    55ca:	a801      	add	r0, sp, #4
    55cc:	9401      	str	r4, [sp, #4]
    55ce:	f7ff ff9b 	bl	5508 <nrf_gpio_pin_port_decode>
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
    55d2:	9a01      	ldr	r2, [sp, #4]
    return p_reg->IN;
    55d4:	f8d0 3510 	ldr.w	r3, [r0, #1296]	; 0x510
    }
    else
    {
        return NRFX_ERROR_INTERNAL;
    }
}
    55d8:	4803      	ldr	r0, [pc, #12]	; (55e8 <nrfx_twi_twim_bus_recover+0xc4>)
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
    55da:	40d3      	lsrs	r3, r2
    55dc:	f003 0301 	and.w	r3, r3, #1
    55e0:	1ac0      	subs	r0, r0, r3
    55e2:	b003      	add	sp, #12
    55e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    55e6:	bf00      	nop
    55e8:	0bad0001 	.word	0x0bad0001

000055ec <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
    55ec:	b510      	push	{r4, lr}
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
    55ee:	4c14      	ldr	r4, [pc, #80]	; (5640 <_DoInit+0x54>)
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
    55f0:	4a14      	ldr	r2, [pc, #80]	; (5644 <_DoInit+0x58>)
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
    55f2:	4915      	ldr	r1, [pc, #84]	; (5648 <_DoInit+0x5c>)
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
    55f4:	2303      	movs	r3, #3
    55f6:	6123      	str	r3, [r4, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
    55f8:	6163      	str	r3, [r4, #20]
  p->aUp[0].pBuffer       = _acUpBuffer;
    55fa:	4b14      	ldr	r3, [pc, #80]	; (564c <_DoInit+0x60>)
  p->aUp[0].sName         = "Terminal";
    55fc:	61a2      	str	r2, [r4, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
    55fe:	61e3      	str	r3, [r4, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
    5600:	f44f 6380 	mov.w	r3, #1024	; 0x400
    5604:	6223      	str	r3, [r4, #32]
  p->aUp[0].RdOff         = 0u;
    5606:	2300      	movs	r3, #0
    5608:	62a3      	str	r3, [r4, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
    560a:	6263      	str	r3, [r4, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
    560c:	62e3      	str	r3, [r4, #44]	; 0x2c
  p->aDown[0].sName         = "Terminal";
    560e:	6622      	str	r2, [r4, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
    5610:	4a0f      	ldr	r2, [pc, #60]	; (5650 <_DoInit+0x64>)
    5612:	6662      	str	r2, [r4, #100]	; 0x64
  STRCPY((char*)&p->acID[7], "RTT");
    5614:	1de0      	adds	r0, r4, #7
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
    5616:	2210      	movs	r2, #16
    5618:	66a2      	str	r2, [r4, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
    561a:	6723      	str	r3, [r4, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
    561c:	66e3      	str	r3, [r4, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
    561e:	6763      	str	r3, [r4, #116]	; 0x74
  STRCPY((char*)&p->acID[7], "RTT");
    5620:	f001 fd34 	bl	708c <strcpy>
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
    5624:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
    5628:	490a      	ldr	r1, [pc, #40]	; (5654 <_DoInit+0x68>)
    562a:	4620      	mov	r0, r4
    562c:	f001 fd2e 	bl	708c <strcpy>
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
    5630:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
    5634:	2320      	movs	r3, #32
    5636:	71a3      	strb	r3, [r4, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
    5638:	f3bf 8f5f 	dmb	sy
}
    563c:	bd10      	pop	{r4, pc}
    563e:	bf00      	nop
    5640:	20000cc8 	.word	0x20000cc8
    5644:	00008c7d 	.word	0x00008c7d
    5648:	00008c86 	.word	0x00008c86
    564c:	20000fa8 	.word	0x20000fa8
    5650:	20000f98 	.word	0x20000f98
    5654:	00008c8a 	.word	0x00008c8a

00005658 <SEGGER_RTT_WriteNoLock>:
*    (1) Data is stored according to buffer flags.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    5658:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  SEGGER_RTT_BUFFER_UP* pRing;
  //
  // Get "to-host" ring buffer.
  //
  pData = (const char *)pBuffer;
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
    565a:	4b14      	ldr	r3, [pc, #80]	; (56ac <SEGGER_RTT_WriteNoLock+0x54>)
    565c:	2718      	movs	r7, #24
    565e:	fb00 7507 	mla	r5, r0, r7, r7
    5662:	441d      	add	r5, r3
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
    5664:	fb07 3300 	mla	r3, r7, r0, r3
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    5668:	460e      	mov	r6, r1
  switch (pRing->Flags) {
    566a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    566c:	2b01      	cmp	r3, #1
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    566e:	4614      	mov	r4, r2
  switch (pRing->Flags) {
    5670:	d00a      	beq.n	5688 <SEGGER_RTT_WriteNoLock+0x30>
    5672:	2b02      	cmp	r3, #2
    5674:	d014      	beq.n	56a0 <SEGGER_RTT_WriteNoLock+0x48>
    5676:	b923      	cbnz	r3, 5682 <SEGGER_RTT_WriteNoLock+0x2a>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
    5678:	4628      	mov	r0, r5
    567a:	f002 fbf7 	bl	7e6c <_GetAvailWriteSpace>
    if (Avail < NumBytes) {
    567e:	4284      	cmp	r4, r0
    5680:	d908      	bls.n	5694 <SEGGER_RTT_WriteNoLock+0x3c>
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
    break;
  default:
    Status = 0u;
    5682:	2400      	movs	r4, #0
  }
  //
  // Finish up.
  //
  return Status;
}
    5684:	4620      	mov	r0, r4
    5686:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    Avail = _GetAvailWriteSpace(pRing);
    5688:	4628      	mov	r0, r5
    568a:	f002 fbef 	bl	7e6c <_GetAvailWriteSpace>
    Status = Avail < NumBytes ? Avail : NumBytes;
    568e:	4284      	cmp	r4, r0
    5690:	bf28      	it	cs
    5692:	4604      	movcs	r4, r0
    _WriteNoCheck(pRing, pData, Status);
    5694:	4622      	mov	r2, r4
    5696:	4631      	mov	r1, r6
    5698:	4628      	mov	r0, r5
    569a:	f002 fbf0 	bl	7e7e <_WriteNoCheck>
    break;
    569e:	e7f1      	b.n	5684 <SEGGER_RTT_WriteNoLock+0x2c>
    Status = _WriteBlocking(pRing, pData, NumBytes);
    56a0:	4628      	mov	r0, r5
}
    56a2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    Status = _WriteBlocking(pRing, pData, NumBytes);
    56a6:	f002 bc07 	b.w	7eb8 <_WriteBlocking>
    56aa:	bf00      	nop
    56ac:	20000cc8 	.word	0x20000cc8

000056b0 <z_sys_init_run_level>:
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    56b0:	4b10      	ldr	r3, [pc, #64]	; (56f4 <z_sys_init_run_level+0x44>)
{
    56b2:	b570      	push	{r4, r5, r6, lr}
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    56b4:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
    56b8:	3001      	adds	r0, #1
    56ba:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
    56be:	42a6      	cmp	r6, r4
    56c0:	d800      	bhi.n	56c4 <z_sys_init_run_level+0x14>
			}
		} else {
			(void)entry->init_fn.sys();
		}
	}
}
    56c2:	bd70      	pop	{r4, r5, r6, pc}
			int rc = entry->init_fn.dev(dev);
    56c4:	e9d4 3500 	ldrd	r3, r5, [r4]
		if (dev != NULL) {
    56c8:	b18d      	cbz	r5, 56ee <z_sys_init_run_level+0x3e>
			int rc = entry->init_fn.dev(dev);
    56ca:	4628      	mov	r0, r5
    56cc:	4798      	blx	r3
			if (rc != 0) {
    56ce:	b138      	cbz	r0, 56e0 <z_sys_init_run_level+0x30>
				if (rc < 0) {
    56d0:	2800      	cmp	r0, #0
    56d2:	bfb8      	it	lt
    56d4:	4240      	neglt	r0, r0
				dev->state->init_res = rc;
    56d6:	68eb      	ldr	r3, [r5, #12]
				if (rc > UINT8_MAX) {
    56d8:	28ff      	cmp	r0, #255	; 0xff
    56da:	bfa8      	it	ge
    56dc:	20ff      	movge	r0, #255	; 0xff
				dev->state->init_res = rc;
    56de:	7018      	strb	r0, [r3, #0]
			dev->state->initialized = true;
    56e0:	68ea      	ldr	r2, [r5, #12]
    56e2:	7853      	ldrb	r3, [r2, #1]
    56e4:	f043 0301 	orr.w	r3, r3, #1
    56e8:	7053      	strb	r3, [r2, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    56ea:	3408      	adds	r4, #8
    56ec:	e7e7      	b.n	56be <z_sys_init_run_level+0xe>
			(void)entry->init_fn.sys();
    56ee:	4798      	blx	r3
    56f0:	e7fb      	b.n	56ea <z_sys_init_run_level+0x3a>
    56f2:	bf00      	nop
    56f4:	000089c0 	.word	0x000089c0

000056f8 <bg_thread_main>:
 * This routine completes kernel initialization by invoking the remaining
 * init functions, then invokes application's main() routine.
 */
__boot_func
static void bg_thread_main(void *unused1, void *unused2, void *unused3)
{
    56f8:	b508      	push	{r3, lr}
	 * may perform memory management tasks (except for z_phys_map() which
	 * is allowed at any time)
	 */
	z_mem_manage_init();
#endif /* CONFIG_MMU */
	z_sys_post_kernel = true;
    56fa:	4b0a      	ldr	r3, [pc, #40]	; (5724 <bg_thread_main+0x2c>)
    56fc:	2201      	movs	r2, #1

	z_sys_init_run_level(INIT_LEVEL_POST_KERNEL);
    56fe:	2003      	movs	r0, #3
	z_sys_post_kernel = true;
    5700:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(INIT_LEVEL_POST_KERNEL);
    5702:	f7ff ffd5 	bl	56b0 <z_sys_init_run_level>
#if CONFIG_STACK_POINTER_RANDOM
	z_stack_adjust_initialized = 1;
#endif
	boot_banner();
    5706:	f001 f883 	bl	6810 <boot_banner>
	void z_cpp_init_static(void);
	z_cpp_init_static();
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(INIT_LEVEL_APPLICATION);
    570a:	2004      	movs	r0, #4
    570c:	f7ff ffd0 	bl	56b0 <z_sys_init_run_level>

	z_init_static_threads();
    5710:	f000 f95e 	bl	59d0 <z_init_static_threads>
	z_mem_manage_boot_finish();
#endif /* CONFIG_MMU */

	extern int main(void);

	(void)main();
    5714:	f7fb fd6c 	bl	11f0 <main>

	/* Mark nonessential since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
    5718:	4a03      	ldr	r2, [pc, #12]	; (5728 <bg_thread_main+0x30>)
    571a:	7b13      	ldrb	r3, [r2, #12]
    571c:	f023 0301 	bic.w	r3, r3, #1
    5720:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
    5722:	bd08      	pop	{r3, pc}
    5724:	200013a8 	.word	0x200013a8
    5728:	20000410 	.word	0x20000410

0000572c <z_bss_zero>:
{
    572c:	b508      	push	{r3, lr}
	z_early_memset(__bss_start, 0, __bss_end - __bss_start);
    572e:	4803      	ldr	r0, [pc, #12]	; (573c <z_bss_zero+0x10>)
    5730:	4a03      	ldr	r2, [pc, #12]	; (5740 <z_bss_zero+0x14>)
    5732:	2100      	movs	r1, #0
    5734:	1a12      	subs	r2, r2, r0
    5736:	f002 fc1a 	bl	7f6e <z_early_memset>
}
    573a:	bd08      	pop	{r3, pc}
    573c:	20000330 	.word	0x20000330
    5740:	200013ac 	.word	0x200013ac

00005744 <z_init_cpu>:
	thread->base.is_idle = 1U;
#endif
}

void z_init_cpu(int id)
{
    5744:	b570      	push	{r4, r5, r6, lr}
	struct k_thread *thread = &z_idle_threads[i];
    5746:	4e16      	ldr	r6, [pc, #88]	; (57a0 <z_init_cpu+0x5c>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    5748:	4d16      	ldr	r5, [pc, #88]	; (57a4 <z_init_cpu+0x60>)
	z_setup_new_thread(thread, stack,
    574a:	4917      	ldr	r1, [pc, #92]	; (57a8 <z_init_cpu+0x64>)
	struct k_thread *thread = &z_idle_threads[i];
    574c:	23c0      	movs	r3, #192	; 0xc0
{
    574e:	b086      	sub	sp, #24
	struct k_thread *thread = &z_idle_threads[i];
    5750:	fb03 6600 	mla	r6, r3, r0, r6
	z_setup_new_thread(thread, stack,
    5754:	2201      	movs	r2, #1
    5756:	2300      	movs	r3, #0
    5758:	e9cd 2304 	strd	r2, r3, [sp, #16]
    575c:	220f      	movs	r2, #15
    575e:	e9cd 3202 	strd	r3, r2, [sp, #8]
    5762:	9301      	str	r3, [sp, #4]
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    5764:	2318      	movs	r3, #24
    5766:	fb03 5500 	mla	r5, r3, r0, r5
{
    576a:	4604      	mov	r4, r0
	z_setup_new_thread(thread, stack,
    576c:	f44f 70c0 	mov.w	r0, #384	; 0x180
    5770:	fb00 1104 	mla	r1, r0, r4, r1
    5774:	4b0d      	ldr	r3, [pc, #52]	; (57ac <z_init_cpu+0x68>)
    5776:	9500      	str	r5, [sp, #0]
    5778:	f44f 72a0 	mov.w	r2, #320	; 0x140
    577c:	4630      	mov	r0, r6
    577e:	f000 f8c9 	bl	5914 <z_setup_new_thread>
	thread->base.thread_state &= ~_THREAD_PRESTART;
    5782:	7b73      	ldrb	r3, [r6, #13]
	init_idle_thread(id);
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
	_kernel.cpus[id].id = id;
	_kernel.cpus[id].irq_stack =
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
    5784:	4a0a      	ldr	r2, [pc, #40]	; (57b0 <z_init_cpu+0x6c>)
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
    5786:	60ee      	str	r6, [r5, #12]
    5788:	f023 0304 	bic.w	r3, r3, #4
    578c:	7373      	strb	r3, [r6, #13]
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
    578e:	f44f 6308 	mov.w	r3, #2176	; 0x880
    5792:	fb04 3303 	mla	r3, r4, r3, r3
    5796:	4413      	add	r3, r2
	_kernel.cpus[id].id = id;
    5798:	742c      	strb	r4, [r5, #16]
	_kernel.cpus[id].irq_stack =
    579a:	606b      	str	r3, [r5, #4]
		 K_KERNEL_STACK_SIZEOF(z_interrupt_stacks[id]));
#ifdef CONFIG_SCHED_THREAD_USAGE_ALL
	_kernel.cpus[id].usage.track_usage =
		CONFIG_SCHED_THREAD_USAGE_AUTO_ENABLE;
#endif
}
    579c:	b006      	add	sp, #24
    579e:	bd70      	pop	{r4, r5, r6, pc}
    57a0:	20000350 	.word	0x20000350
    57a4:	20000d70 	.word	0x20000d70
    57a8:	20001c80 	.word	0x20001c80
    57ac:	00005a89 	.word	0x00005a89
    57b0:	20001400 	.word	0x20001400

000057b4 <z_cstart>:
 * @return Does not return
 */
__boot_func
FUNC_NO_STACK_PROTECTOR
FUNC_NORETURN void z_cstart(void)
{
    57b4:	b580      	push	{r7, lr}
	/* gcov hook needed to get the coverage report.*/
	gcov_static_init();

	/* initialize early init calls */
	z_sys_init_run_level(INIT_LEVEL_EARLY);
    57b6:	2000      	movs	r0, #0
{
    57b8:	b0b6      	sub	sp, #216	; 0xd8
	z_sys_init_run_level(INIT_LEVEL_EARLY);
    57ba:	f7ff ff79 	bl	56b0 <z_sys_init_run_level>
 * pointer) register, and switched to automatically when taking an exception.
 *
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
    57be:	4b2e      	ldr	r3, [pc, #184]	; (5878 <z_cstart+0xc4>)
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
    57c0:	f383 8808 	msr	MSP, r3
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
    57c4:	4d2d      	ldr	r5, [pc, #180]	; (587c <z_cstart+0xc8>)

#ifdef CONFIG_TIMESLICE_PER_THREAD
	dummy_thread->base.slice_ticks = 0;
#endif

	_current_cpu->current = dummy_thread;
    57c6:	4e2e      	ldr	r6, [pc, #184]	; (5880 <z_cstart+0xcc>)
    57c8:	696b      	ldr	r3, [r5, #20]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    57ca:	4f2e      	ldr	r7, [pc, #184]	; (5884 <z_cstart+0xd0>)
    57cc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    57d0:	616b      	str	r3, [r5, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    57d2:	2400      	movs	r4, #0
    57d4:	23e0      	movs	r3, #224	; 0xe0
    57d6:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
    57da:	77ec      	strb	r4, [r5, #31]
    57dc:	762c      	strb	r4, [r5, #24]
    57de:	766c      	strb	r4, [r5, #25]
    57e0:	76ac      	strb	r4, [r5, #26]
    57e2:	f885 4020 	strb.w	r4, [r5, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
    57e6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    57e8:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
    57ec:	626b      	str	r3, [r5, #36]	; 0x24
    57ee:	f885 4023 	strb.w	r4, [r5, #35]	; 0x23

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
    57f2:	f7fc fba9 	bl	1f48 <z_arm_fault_init>
	z_arm_cpu_idle_init();
    57f6:	f7fc f887 	bl	1908 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
    57fa:	f04f 33ff 	mov.w	r3, #4294967295
    57fe:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
    5800:	62eb      	str	r3, [r5, #44]	; 0x2c
	k_thread_system_pool_assign(dummy_thread);
    5802:	ad06      	add	r5, sp, #24
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
    5804:	f7fc fce0 	bl	21c8 <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
    5808:	f7fc fc40 	bl	208c <z_arm_configure_static_mpu_regions>
	dummy_thread->base.user_options = K_ESSENTIAL;
    580c:	f240 1301 	movw	r3, #257	; 0x101
	k_thread_system_pool_assign(dummy_thread);
    5810:	4628      	mov	r0, r5
	dummy_thread->base.user_options = K_ESSENTIAL;
    5812:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	dummy_thread->stack_info.size = 0U;
    5816:	e9cd 441f 	strd	r4, r4, [sp, #124]	; 0x7c
	k_thread_system_pool_assign(dummy_thread);
    581a:	f000 fff3 	bl	6804 <k_thread_system_pool_assign>
	_current_cpu->current = dummy_thread;
    581e:	60b5      	str	r5, [r6, #8]
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
    5820:	f002 fb7e 	bl	7f20 <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_1);
    5824:	2001      	movs	r0, #1
    5826:	f7ff ff43 	bl	56b0 <z_sys_init_run_level>
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_2);
    582a:	2002      	movs	r0, #2
	_kernel.ready_q.cache = &z_main_thread;
    582c:	4d16      	ldr	r5, [pc, #88]	; (5888 <z_cstart+0xd4>)
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_2);
    582e:	f7ff ff3f 	bl	56b0 <z_sys_init_run_level>
	z_sched_init();
    5832:	f000 fcd1 	bl	61d8 <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    5836:	4b15      	ldr	r3, [pc, #84]	; (588c <z_cstart+0xd8>)
	_kernel.ready_q.cache = &z_main_thread;
    5838:	61f5      	str	r5, [r6, #28]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    583a:	9305      	str	r3, [sp, #20]
    583c:	2301      	movs	r3, #1
    583e:	4914      	ldr	r1, [pc, #80]	; (5890 <z_cstart+0xdc>)
    5840:	9400      	str	r4, [sp, #0]
    5842:	e9cd 4303 	strd	r4, r3, [sp, #12]
    5846:	f44f 6280 	mov.w	r2, #1024	; 0x400
    584a:	463b      	mov	r3, r7
    584c:	e9cd 4401 	strd	r4, r4, [sp, #4]
    5850:	4628      	mov	r0, r5
    5852:	f000 f85f 	bl	5914 <z_setup_new_thread>
    5856:	7b6a      	ldrb	r2, [r5, #13]
    5858:	4606      	mov	r6, r0
    585a:	f022 0204 	bic.w	r2, r2, #4
	z_ready_thread(&z_main_thread);
    585e:	4628      	mov	r0, r5
    5860:	736a      	strb	r2, [r5, #13]
    5862:	f002 fc47 	bl	80f4 <z_ready_thread>
	z_init_cpu(0);
    5866:	4620      	mov	r0, r4
    5868:	f7ff ff6c 	bl	5744 <z_init_cpu>
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
    586c:	463a      	mov	r2, r7
    586e:	4631      	mov	r1, r6
    5870:	4628      	mov	r0, r5
    5872:	f7fc f9d9 	bl	1c28 <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
    5876:	bf00      	nop
    5878:	20001c80 	.word	0x20001c80
    587c:	e000ed00 	.word	0xe000ed00
    5880:	20000d70 	.word	0x20000d70
    5884:	000056f9 	.word	0x000056f9
    5888:	20000410 	.word	0x20000410
    588c:	00008c91 	.word	0x00008c91
    5890:	20001e00 	.word	0x20001e00

00005894 <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return 0 on success, fails otherwise.
 */
static int init_mem_slab_module(void)
{
    5894:	b538      	push	{r3, r4, r5, lr}
	int rc = 0;

	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    5896:	4c06      	ldr	r4, [pc, #24]	; (58b0 <init_mem_slab_module+0x1c>)
    5898:	4d06      	ldr	r5, [pc, #24]	; (58b4 <init_mem_slab_module+0x20>)
	int rc = 0;
    589a:	2000      	movs	r0, #0
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    589c:	42ac      	cmp	r4, r5
    589e:	d300      	bcc.n	58a2 <init_mem_slab_module+0xe>
		z_object_init(slab);
	}

out:
	return rc;
}
    58a0:	bd38      	pop	{r3, r4, r5, pc}
		rc = create_free_list(slab);
    58a2:	4620      	mov	r0, r4
    58a4:	f002 fb67 	bl	7f76 <create_free_list>
		if (rc < 0) {
    58a8:	2800      	cmp	r0, #0
    58aa:	dbf9      	blt.n	58a0 <init_mem_slab_module+0xc>
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    58ac:	341c      	adds	r4, #28
    58ae:	e7f5      	b.n	589c <init_mem_slab_module+0x8>
    58b0:	200002c8 	.word	0x200002c8
    58b4:	200002c8 	.word	0x200002c8

000058b8 <k_mem_slab_alloc>:

	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
    58b8:	b573      	push	{r0, r1, r4, r5, r6, lr}
    58ba:	460c      	mov	r4, r1
	__asm__ volatile(
    58bc:	f04f 0520 	mov.w	r5, #32
    58c0:	f3ef 8111 	mrs	r1, BASEPRI
    58c4:	f385 8812 	msr	BASEPRI_MAX, r5
    58c8:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
	int result;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, alloc, slab, timeout);

	if (slab->free_list != NULL) {
    58cc:	6945      	ldr	r5, [r0, #20]
    58ce:	b15d      	cbz	r5, 58e8 <k_mem_slab_alloc+0x30>
		/* take a free block */
		*mem = slab->free_list;
    58d0:	6025      	str	r5, [r4, #0]
		slab->free_list = *(char **)(slab->free_list);
    58d2:	682b      	ldr	r3, [r5, #0]
    58d4:	6143      	str	r3, [r0, #20]
		slab->num_used++;
    58d6:	6983      	ldr	r3, [r0, #24]
    58d8:	3301      	adds	r3, #1
    58da:	6183      	str	r3, [r0, #24]

#ifdef CONFIG_MEM_SLAB_TRACE_MAX_UTILIZATION
		slab->max_used = MAX(slab->num_used, slab->max_used);
#endif

		result = 0;
    58dc:	2000      	movs	r0, #0
	__asm__ volatile(
    58de:	f381 8811 	msr	BASEPRI, r1
    58e2:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, alloc, slab, timeout, result);

	k_spin_unlock(&slab->lock, key);

	return result;
    58e6:	e011      	b.n	590c <k_mem_slab_alloc+0x54>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT) ||
    58e8:	ea52 0603 	orrs.w	r6, r2, r3
    58ec:	d103      	bne.n	58f6 <k_mem_slab_alloc+0x3e>
		*mem = NULL;
    58ee:	6025      	str	r5, [r4, #0]
		result = -ENOMEM;
    58f0:	f06f 000b 	mvn.w	r0, #11
    58f4:	e7f3      	b.n	58de <k_mem_slab_alloc+0x26>
		result = z_pend_curr(&slab->lock, key, &slab->wait_q, timeout);
    58f6:	e9cd 2300 	strd	r2, r3, [sp]
    58fa:	4602      	mov	r2, r0
    58fc:	3008      	adds	r0, #8
    58fe:	f000 fb75 	bl	5fec <z_pend_curr>
		if (result == 0) {
    5902:	b918      	cbnz	r0, 590c <k_mem_slab_alloc+0x54>
			*mem = _current->base.swap_data;
    5904:	4b02      	ldr	r3, [pc, #8]	; (5910 <k_mem_slab_alloc+0x58>)
    5906:	689b      	ldr	r3, [r3, #8]
    5908:	695b      	ldr	r3, [r3, #20]
    590a:	6023      	str	r3, [r4, #0]
}
    590c:	b002      	add	sp, #8
    590e:	bd70      	pop	{r4, r5, r6, pc}
    5910:	20000d70 	.word	0x20000d70

00005914 <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
    5914:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
	thread_base->user_options = (uint8_t)options;
    5918:	9e0e      	ldr	r6, [sp, #56]	; 0x38
    591a:	7306      	strb	r6, [r0, #12]
	thread_base->thread_state = (uint8_t)initial_state;
    591c:	2604      	movs	r6, #4
    591e:	7346      	strb	r6, [r0, #13]

	thread_base->prio = priority;
    5920:	9e0d      	ldr	r6, [sp, #52]	; 0x34
    5922:	7386      	strb	r6, [r0, #14]
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
    5924:	f100 0558 	add.w	r5, r0, #88	; 0x58
{
    5928:	460f      	mov	r7, r1
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    592a:	1dd6      	adds	r6, r2, #7
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
	list->tail = (sys_dnode_t *)list;
    592c:	e9c0 5516 	strd	r5, r5, [r0, #88]	; 0x58
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    5930:	9a0c      	ldr	r2, [sp, #48]	; 0x30
	thread_base->pended_on = NULL;
    5932:	2500      	movs	r5, #0
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    5934:	f026 0607 	bic.w	r6, r6, #7

/** @} */

static inline char *Z_KERNEL_STACK_BUFFER(k_thread_stack_t *sym)
{
	return (char *)sym + K_KERNEL_STACK_RESERVED;
    5938:	3740      	adds	r7, #64	; 0x40
 */

static inline void sys_dnode_init(sys_dnode_t *node)
{
	node->next = NULL;
	node->prev = NULL;
    593a:	e9c0 5506 	strd	r5, r5, [r0, #24]
	new_thread->stack_info.size = stack_buf_size;
    593e:	e9c0 7619 	strd	r7, r6, [r0, #100]	; 0x64
	thread_base->pended_on = NULL;
    5942:	6085      	str	r5, [r0, #8]

	thread_base->sched_locked = 0U;
    5944:	73c5      	strb	r5, [r0, #15]
	new_thread->stack_info.delta = delta;
    5946:	66c5      	str	r5, [r0, #108]	; 0x6c
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    5948:	f106 0840 	add.w	r8, r6, #64	; 0x40
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    594c:	9202      	str	r2, [sp, #8]
    594e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    5950:	9201      	str	r2, [sp, #4]
	stack_ptr = (char *)stack + stack_obj_size;
    5952:	4488      	add	r8, r1
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    5954:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    5956:	9200      	str	r2, [sp, #0]
    5958:	4642      	mov	r2, r8
{
    595a:	4604      	mov	r4, r0
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    595c:	f7fc f8e0 	bl	1b20 <arch_new_thread>
	if (!_current) {
    5960:	4b04      	ldr	r3, [pc, #16]	; (5974 <z_setup_new_thread+0x60>)
	new_thread->init_data = NULL;
    5962:	6565      	str	r5, [r4, #84]	; 0x54
	if (!_current) {
    5964:	689b      	ldr	r3, [r3, #8]
    5966:	b103      	cbz	r3, 596a <z_setup_new_thread+0x56>
	new_thread->resource_pool = _current->resource_pool;
    5968:	6f1b      	ldr	r3, [r3, #112]	; 0x70
	return stack_ptr;
    596a:	6723      	str	r3, [r4, #112]	; 0x70
}
    596c:	4640      	mov	r0, r8
    596e:	b004      	add	sp, #16
    5970:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5974:	20000d70 	.word	0x20000d70

00005978 <z_impl_k_thread_create>:
{
    5978:	b5f0      	push	{r4, r5, r6, r7, lr}
    597a:	b087      	sub	sp, #28
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    597c:	2500      	movs	r5, #0
    597e:	9505      	str	r5, [sp, #20]
    5980:	9d10      	ldr	r5, [sp, #64]	; 0x40
    5982:	9504      	str	r5, [sp, #16]
    5984:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
    5986:	9503      	str	r5, [sp, #12]
    5988:	9d0e      	ldr	r5, [sp, #56]	; 0x38
    598a:	9502      	str	r5, [sp, #8]
{
    598c:	e9dd 7612 	ldrd	r7, r6, [sp, #72]	; 0x48
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    5990:	9d0d      	ldr	r5, [sp, #52]	; 0x34
    5992:	9501      	str	r5, [sp, #4]
    5994:	9d0c      	ldr	r5, [sp, #48]	; 0x30
    5996:	9500      	str	r5, [sp, #0]
{
    5998:	4604      	mov	r4, r0
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    599a:	f7ff ffbb 	bl	5914 <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
    599e:	f1b6 3fff 	cmp.w	r6, #4294967295
    59a2:	bf08      	it	eq
    59a4:	f1b7 3fff 	cmpeq.w	r7, #4294967295
    59a8:	d005      	beq.n	59b6 <z_impl_k_thread_create+0x3e>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    59aa:	ea56 0307 	orrs.w	r3, r6, r7
    59ae:	d105      	bne.n	59bc <z_impl_k_thread_create+0x44>
	z_sched_start(thread);
    59b0:	4620      	mov	r0, r4
    59b2:	f000 fb91 	bl	60d8 <z_sched_start>
}
    59b6:	4620      	mov	r0, r4
    59b8:	b007      	add	sp, #28
    59ba:	bdf0      	pop	{r4, r5, r6, r7, pc}

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    59bc:	4903      	ldr	r1, [pc, #12]	; (59cc <z_impl_k_thread_create+0x54>)
    59be:	463a      	mov	r2, r7
    59c0:	4633      	mov	r3, r6
    59c2:	f104 0018 	add.w	r0, r4, #24
    59c6:	f000 fd83 	bl	64d0 <z_add_timeout>
    59ca:	e7f4      	b.n	59b6 <z_impl_k_thread_create+0x3e>
    59cc:	0000817d 	.word	0x0000817d

000059d0 <z_init_static_threads>:
{
    59d0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    59d4:	4c29      	ldr	r4, [pc, #164]	; (5a7c <z_init_static_threads+0xac>)
	_FOREACH_STATIC_THREAD(thread_data) {
    59d6:	4d2a      	ldr	r5, [pc, #168]	; (5a80 <z_init_static_threads+0xb0>)
{
    59d8:	b087      	sub	sp, #28
    59da:	4626      	mov	r6, r4
	_FOREACH_STATIC_THREAD(thread_data) {
    59dc:	42ae      	cmp	r6, r5
    59de:	f104 042c 	add.w	r4, r4, #44	; 0x2c
    59e2:	d30f      	bcc.n	5a04 <z_init_static_threads+0x34>
	k_sched_lock();
    59e4:	f000 fbc8 	bl	6178 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
    59e8:	4c24      	ldr	r4, [pc, #144]	; (5a7c <z_init_static_threads+0xac>)
    59ea:	f8df 9098 	ldr.w	r9, [pc, #152]	; 5a84 <z_init_static_threads+0xb4>
    59ee:	f44f 4600 	mov.w	r6, #32768	; 0x8000
    59f2:	f240 37e7 	movw	r7, #999	; 0x3e7
    59f6:	42ac      	cmp	r4, r5
    59f8:	d320      	bcc.n	5a3c <z_init_static_threads+0x6c>
}
    59fa:	b007      	add	sp, #28
    59fc:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	k_sched_unlock();
    5a00:	f000 bbce 	b.w	61a0 <k_sched_unlock>
		z_setup_new_thread(
    5a04:	f854 3c04 	ldr.w	r3, [r4, #-4]
    5a08:	9305      	str	r3, [sp, #20]
    5a0a:	f854 3c0c 	ldr.w	r3, [r4, #-12]
    5a0e:	9304      	str	r3, [sp, #16]
    5a10:	f854 3c10 	ldr.w	r3, [r4, #-16]
    5a14:	9303      	str	r3, [sp, #12]
    5a16:	f854 3c14 	ldr.w	r3, [r4, #-20]
    5a1a:	9302      	str	r3, [sp, #8]
    5a1c:	f854 3c18 	ldr.w	r3, [r4, #-24]
    5a20:	9301      	str	r3, [sp, #4]
    5a22:	f854 3c1c 	ldr.w	r3, [r4, #-28]
    5a26:	9300      	str	r3, [sp, #0]
    5a28:	e954 2309 	ldrd	r2, r3, [r4, #-36]	; 0x24
    5a2c:	e954 010b 	ldrd	r0, r1, [r4, #-44]	; 0x2c
    5a30:	f7ff ff70 	bl	5914 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
    5a34:	f854 3c2c 	ldr.w	r3, [r4, #-44]
    5a38:	655e      	str	r6, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
    5a3a:	e7ce      	b.n	59da <z_init_static_threads+0xa>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
    5a3c:	6a63      	ldr	r3, [r4, #36]	; 0x24
    5a3e:	1c5a      	adds	r2, r3, #1
    5a40:	d00d      	beq.n	5a5e <z_init_static_threads+0x8e>
					    K_MSEC(thread_data->init_delay));
    5a42:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    5a46:	2100      	movs	r1, #0
    5a48:	4638      	mov	r0, r7
    5a4a:	fbc3 0106 	smlal	r0, r1, r3, r6
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    5a4e:	ea51 33c3 	orrs.w	r3, r1, r3, lsl #15
			schedule_new_thread(thread_data->init_thread,
    5a52:	f8d4 8000 	ldr.w	r8, [r4]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    5a56:	d104      	bne.n	5a62 <z_init_static_threads+0x92>
	z_sched_start(thread);
    5a58:	4640      	mov	r0, r8
    5a5a:	f000 fb3d 	bl	60d8 <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
    5a5e:	342c      	adds	r4, #44	; 0x2c
    5a60:	e7c9      	b.n	59f6 <z_init_static_threads+0x26>
    5a62:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    5a66:	2300      	movs	r3, #0
    5a68:	f7fa fb4a 	bl	100 <__aeabi_uldivmod>
    5a6c:	4602      	mov	r2, r0
    5a6e:	460b      	mov	r3, r1
    5a70:	f108 0018 	add.w	r0, r8, #24
    5a74:	4649      	mov	r1, r9
    5a76:	f000 fd2b 	bl	64d0 <z_add_timeout>
    5a7a:	e7f0      	b.n	5a5e <z_init_static_threads+0x8e>
    5a7c:	0000861c 	.word	0x0000861c
    5a80:	0000861c 	.word	0x0000861c
    5a84:	0000817d 	.word	0x0000817d

00005a88 <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
    5a88:	b508      	push	{r3, lr}
		 * higher level construct.
		 */
		(void) arch_irq_lock();

#ifdef CONFIG_PM
		_kernel.idle = z_get_next_timeout_expiry();
    5a8a:	4c0b      	ldr	r4, [pc, #44]	; (5ab8 <idle+0x30>)
	return !z_sys_post_kernel;
    5a8c:	4d0b      	ldr	r5, [pc, #44]	; (5abc <idle+0x34>)
	__asm__ volatile(
    5a8e:	f04f 0220 	mov.w	r2, #32
    5a92:	f3ef 8311 	mrs	r3, BASEPRI
    5a96:	f382 8812 	msr	BASEPRI_MAX, r2
    5a9a:	f3bf 8f6f 	isb	sy
    5a9e:	f002 fbf3 	bl	8288 <z_get_next_timeout_expiry>
		 * processing in those cases i.e. skips k_cpu_idle().
		 * The kernel's idle processing re-enables interrupts
		 * which is essential for the kernel's scheduling
		 * logic.
		 */
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
    5aa2:	782b      	ldrb	r3, [r5, #0]
		_kernel.idle = z_get_next_timeout_expiry();
    5aa4:	61a0      	str	r0, [r4, #24]
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
    5aa6:	b913      	cbnz	r3, 5aae <idle+0x26>
	arch_cpu_idle();
    5aa8:	f7fb ff34 	bl	1914 <arch_cpu_idle>
}
    5aac:	e7ef      	b.n	5a8e <idle+0x6>
    5aae:	f7fb fd71 	bl	1594 <pm_system_suspend>
    5ab2:	2800      	cmp	r0, #0
    5ab4:	d1eb      	bne.n	5a8e <idle+0x6>
    5ab6:	e7f7      	b.n	5aa8 <idle+0x20>
    5ab8:	20000d70 	.word	0x20000d70
    5abc:	200013a8 	.word	0x200013a8

00005ac0 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
    5ac0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    5ac4:	4604      	mov	r4, r0
    5ac6:	4617      	mov	r7, r2
    5ac8:	461e      	mov	r6, r3
    5aca:	f04f 0320 	mov.w	r3, #32
    5ace:	f3ef 8811 	mrs	r8, BASEPRI
    5ad2:	f383 8812 	msr	BASEPRI_MAX, r3
    5ad6:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
    5ada:	68c3      	ldr	r3, [r0, #12]
    5adc:	4a33      	ldr	r2, [pc, #204]	; (5bac <z_impl_k_mutex_lock+0xec>)
    5ade:	b17b      	cbz	r3, 5b00 <z_impl_k_mutex_lock+0x40>
    5ae0:	6880      	ldr	r0, [r0, #8]
    5ae2:	6891      	ldr	r1, [r2, #8]
    5ae4:	4288      	cmp	r0, r1
    5ae6:	d019      	beq.n	5b1c <z_impl_k_mutex_lock+0x5c>
		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
    5ae8:	ea57 0306 	orrs.w	r3, r7, r6
    5aec:	d118      	bne.n	5b20 <z_impl_k_mutex_lock+0x60>
	__asm__ volatile(
    5aee:	f388 8811 	msr	BASEPRI, r8
    5af2:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EBUSY);

		return -EBUSY;
    5af6:	f06f 000f 	mvn.w	r0, #15
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
    5afa:	b002      	add	sp, #8
    5afc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					_current->base.prio :
    5b00:	6891      	ldr	r1, [r2, #8]
    5b02:	f991 100e 	ldrsb.w	r1, [r1, #14]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
    5b06:	6121      	str	r1, [r4, #16]
		mutex->lock_count++;
    5b08:	3301      	adds	r3, #1
    5b0a:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
    5b0c:	6893      	ldr	r3, [r2, #8]
    5b0e:	60a3      	str	r3, [r4, #8]
    5b10:	f388 8811 	msr	BASEPRI, r8
    5b14:	f3bf 8f6f 	isb	sy
		return 0;
    5b18:	2000      	movs	r0, #0
    5b1a:	e7ee      	b.n	5afa <z_impl_k_mutex_lock+0x3a>
					_current->base.prio :
    5b1c:	6921      	ldr	r1, [r4, #16]
    5b1e:	e7f2      	b.n	5b06 <z_impl_k_mutex_lock+0x46>
	new_prio = new_prio_for_inheritance(_current->base.prio,
    5b20:	f991 100e 	ldrsb.w	r1, [r1, #14]
    5b24:	f990 300e 	ldrsb.w	r3, [r0, #14]
	return z_is_under_prio_ceiling(prio) ? prio : CONFIG_PRIORITY_CEILING;
    5b28:	4299      	cmp	r1, r3
    5b2a:	bfa8      	it	ge
    5b2c:	4619      	movge	r1, r3
    5b2e:	f06f 027e 	mvn.w	r2, #126	; 0x7e
    5b32:	4291      	cmp	r1, r2
    5b34:	bfb8      	it	lt
    5b36:	4611      	movlt	r1, r2
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
    5b38:	428b      	cmp	r3, r1
    5b3a:	dd2e      	ble.n	5b9a <z_impl_k_mutex_lock+0xda>
		resched = adjust_owner_prio(mutex, new_prio);
    5b3c:	f002 fa7a 	bl	8034 <adjust_owner_prio.isra.0>
    5b40:	4605      	mov	r5, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
    5b42:	e9cd 7600 	strd	r7, r6, [sp]
    5b46:	481a      	ldr	r0, [pc, #104]	; (5bb0 <z_impl_k_mutex_lock+0xf0>)
    5b48:	4622      	mov	r2, r4
    5b4a:	4641      	mov	r1, r8
    5b4c:	f000 fa4e 	bl	5fec <z_pend_curr>
	if (got_mutex == 0) {
    5b50:	2800      	cmp	r0, #0
    5b52:	d0e1      	beq.n	5b18 <z_impl_k_mutex_lock+0x58>
	__asm__ volatile(
    5b54:	f04f 0320 	mov.w	r3, #32
    5b58:	f3ef 8611 	mrs	r6, BASEPRI
    5b5c:	f383 8812 	msr	BASEPRI_MAX, r3
    5b60:	f3bf 8f6f 	isb	sy
	if (likely(mutex->owner != NULL)) {
    5b64:	68a0      	ldr	r0, [r4, #8]
    5b66:	b1d0      	cbz	r0, 5b9e <z_impl_k_mutex_lock+0xde>
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
    5b68:	6823      	ldr	r3, [r4, #0]
			new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
    5b6a:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
    5b6c:	429c      	cmp	r4, r3
    5b6e:	d00a      	beq.n	5b86 <z_impl_k_mutex_lock+0xc6>
    5b70:	b14b      	cbz	r3, 5b86 <z_impl_k_mutex_lock+0xc6>
    5b72:	f993 300e 	ldrsb.w	r3, [r3, #14]
    5b76:	4299      	cmp	r1, r3
    5b78:	bfa8      	it	ge
    5b7a:	4619      	movge	r1, r3
    5b7c:	f06f 037e 	mvn.w	r3, #126	; 0x7e
    5b80:	4299      	cmp	r1, r3
    5b82:	bfb8      	it	lt
    5b84:	4619      	movlt	r1, r3
		resched = adjust_owner_prio(mutex, new_prio) || resched;
    5b86:	f002 fa55 	bl	8034 <adjust_owner_prio.isra.0>
    5b8a:	b140      	cbz	r0, 5b9e <z_impl_k_mutex_lock+0xde>
		z_reschedule(&lock, key);
    5b8c:	4808      	ldr	r0, [pc, #32]	; (5bb0 <z_impl_k_mutex_lock+0xf0>)
    5b8e:	4631      	mov	r1, r6
    5b90:	f000 fa90 	bl	60b4 <z_reschedule>
	return -EAGAIN;
    5b94:	f06f 000a 	mvn.w	r0, #10
    5b98:	e7af      	b.n	5afa <z_impl_k_mutex_lock+0x3a>
	bool resched = false;
    5b9a:	2500      	movs	r5, #0
    5b9c:	e7d1      	b.n	5b42 <z_impl_k_mutex_lock+0x82>
	if (resched) {
    5b9e:	2d00      	cmp	r5, #0
    5ba0:	d1f4      	bne.n	5b8c <z_impl_k_mutex_lock+0xcc>
	__asm__ volatile(
    5ba2:	f386 8811 	msr	BASEPRI, r6
    5ba6:	f3bf 8f6f 	isb	sy
    5baa:	e7f3      	b.n	5b94 <z_impl_k_mutex_lock+0xd4>
    5bac:	20000d70 	.word	0x20000d70
    5bb0:	200013a9 	.word	0x200013a9

00005bb4 <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
    5bb4:	b538      	push	{r3, r4, r5, lr}

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, unlock, mutex);

	CHECKIF(mutex->owner == NULL) {
    5bb6:	6883      	ldr	r3, [r0, #8]
{
    5bb8:	4604      	mov	r4, r0
	CHECKIF(mutex->owner == NULL) {
    5bba:	b36b      	cbz	r3, 5c18 <z_impl_k_mutex_unlock+0x64>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
    5bbc:	4a19      	ldr	r2, [pc, #100]	; (5c24 <z_impl_k_mutex_unlock+0x70>)
    5bbe:	6892      	ldr	r2, [r2, #8]
    5bc0:	4293      	cmp	r3, r2
    5bc2:	d12c      	bne.n	5c1e <z_impl_k_mutex_unlock+0x6a>

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
    5bc4:	68c3      	ldr	r3, [r0, #12]
    5bc6:	2b01      	cmp	r3, #1
    5bc8:	d903      	bls.n	5bd2 <z_impl_k_mutex_unlock+0x1e>
		mutex->lock_count--;
    5bca:	3b01      	subs	r3, #1
    5bcc:	60c3      	str	r3, [r0, #12]


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	return 0;
    5bce:	2000      	movs	r0, #0
}
    5bd0:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
    5bd2:	f04f 0320 	mov.w	r3, #32
    5bd6:	f3ef 8511 	mrs	r5, BASEPRI
    5bda:	f383 8812 	msr	BASEPRI_MAX, r3
    5bde:	f3bf 8f6f 	isb	sy
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
    5be2:	6901      	ldr	r1, [r0, #16]
    5be4:	6880      	ldr	r0, [r0, #8]
    5be6:	f002 fa25 	bl	8034 <adjust_owner_prio.isra.0>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
    5bea:	4620      	mov	r0, r4
    5bec:	f002 fae1 	bl	81b2 <z_unpend_first_thread>
	mutex->owner = new_owner;
    5bf0:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
    5bf2:	b158      	cbz	r0, 5c0c <z_impl_k_mutex_unlock+0x58>
		mutex->owner_orig_prio = new_owner->base.prio;
    5bf4:	f990 200e 	ldrsb.w	r2, [r0, #14]
    5bf8:	6122      	str	r2, [r4, #16]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
    5bfa:	2200      	movs	r2, #0
    5bfc:	6782      	str	r2, [r0, #120]	; 0x78
		z_ready_thread(new_owner);
    5bfe:	f002 fa79 	bl	80f4 <z_ready_thread>
		z_reschedule(&lock, key);
    5c02:	4809      	ldr	r0, [pc, #36]	; (5c28 <z_impl_k_mutex_unlock+0x74>)
    5c04:	4629      	mov	r1, r5
    5c06:	f000 fa55 	bl	60b4 <z_reschedule>
    5c0a:	e7e0      	b.n	5bce <z_impl_k_mutex_unlock+0x1a>
		mutex->lock_count = 0U;
    5c0c:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
    5c0e:	f385 8811 	msr	BASEPRI, r5
    5c12:	f3bf 8f6f 	isb	sy
    5c16:	e7da      	b.n	5bce <z_impl_k_mutex_unlock+0x1a>
		return -EINVAL;
    5c18:	f06f 0015 	mvn.w	r0, #21
    5c1c:	e7d8      	b.n	5bd0 <z_impl_k_mutex_unlock+0x1c>
		return -EPERM;
    5c1e:	f04f 30ff 	mov.w	r0, #4294967295
    5c22:	e7d5      	b.n	5bd0 <z_impl_k_mutex_unlock+0x1c>
    5c24:	20000d70 	.word	0x20000d70
    5c28:	200013a9 	.word	0x200013a9

00005c2c <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
    5c2c:	b538      	push	{r3, r4, r5, lr}
    5c2e:	4604      	mov	r4, r0
	__asm__ volatile(
    5c30:	f04f 0320 	mov.w	r3, #32
    5c34:	f3ef 8511 	mrs	r5, BASEPRI
    5c38:	f383 8812 	msr	BASEPRI_MAX, r3
    5c3c:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
    5c40:	f002 fab7 	bl	81b2 <z_unpend_first_thread>

	if (thread != NULL) {
    5c44:	b148      	cbz	r0, 5c5a <z_impl_k_sem_give+0x2e>
    5c46:	2200      	movs	r2, #0
    5c48:	6782      	str	r2, [r0, #120]	; 0x78
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
    5c4a:	f002 fa53 	bl	80f4 <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
    5c4e:	4629      	mov	r1, r5
    5c50:	4805      	ldr	r0, [pc, #20]	; (5c68 <z_impl_k_sem_give+0x3c>)

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
    5c52:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
    5c56:	f000 ba2d 	b.w	60b4 <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
    5c5a:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
    5c5e:	429a      	cmp	r2, r3
    5c60:	bf18      	it	ne
    5c62:	3301      	addne	r3, #1
    5c64:	60a3      	str	r3, [r4, #8]
}
    5c66:	e7f2      	b.n	5c4e <z_impl_k_sem_give+0x22>
    5c68:	200013a9 	.word	0x200013a9

00005c6c <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
    5c6c:	b513      	push	{r0, r1, r4, lr}
    5c6e:	f04f 0420 	mov.w	r4, #32
    5c72:	f3ef 8111 	mrs	r1, BASEPRI
    5c76:	f384 8812 	msr	BASEPRI_MAX, r4
    5c7a:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
    5c7e:	6884      	ldr	r4, [r0, #8]
    5c80:	b144      	cbz	r4, 5c94 <z_impl_k_sem_take+0x28>
		sem->count--;
    5c82:	3c01      	subs	r4, #1
    5c84:	6084      	str	r4, [r0, #8]
	__asm__ volatile(
    5c86:	f381 8811 	msr	BASEPRI, r1
    5c8a:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
    5c8e:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
    5c90:	b002      	add	sp, #8
    5c92:	bd10      	pop	{r4, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    5c94:	ea52 0403 	orrs.w	r4, r2, r3
    5c98:	d106      	bne.n	5ca8 <z_impl_k_sem_take+0x3c>
    5c9a:	f381 8811 	msr	BASEPRI, r1
    5c9e:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
    5ca2:	f06f 000f 	mvn.w	r0, #15
    5ca6:	e7f3      	b.n	5c90 <z_impl_k_sem_take+0x24>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
    5ca8:	e9cd 2300 	strd	r2, r3, [sp]
    5cac:	4602      	mov	r2, r0
    5cae:	4802      	ldr	r0, [pc, #8]	; (5cb8 <z_impl_k_sem_take+0x4c>)
    5cb0:	f000 f99c 	bl	5fec <z_pend_curr>
	return ret;
    5cb4:	e7ec      	b.n	5c90 <z_impl_k_sem_take+0x24>
    5cb6:	bf00      	nop
    5cb8:	200013a9 	.word	0x200013a9

00005cbc <z_impl_k_sem_reset>:

void z_impl_k_sem_reset(struct k_sem *sem)
{
    5cbc:	b570      	push	{r4, r5, r6, lr}
    5cbe:	4604      	mov	r4, r0
	__asm__ volatile(
    5cc0:	f04f 0320 	mov.w	r3, #32
    5cc4:	f3ef 8511 	mrs	r5, BASEPRI
    5cc8:	f383 8812 	msr	BASEPRI_MAX, r3
    5ccc:	f3bf 8f6f 	isb	sy
    5cd0:	f06f 060a 	mvn.w	r6, #10
	struct k_thread *thread;
	k_spinlock_key_t key = k_spin_lock(&lock);

	while (true) {
		thread = z_unpend_first_thread(&sem->wait_q);
    5cd4:	4620      	mov	r0, r4
    5cd6:	f002 fa6c 	bl	81b2 <z_unpend_first_thread>
		if (thread == NULL) {
    5cda:	b118      	cbz	r0, 5ce4 <z_impl_k_sem_reset+0x28>
    5cdc:	6786      	str	r6, [r0, #120]	; 0x78
			break;
		}
		arch_thread_return_value_set(thread, -EAGAIN);
		z_ready_thread(thread);
    5cde:	f002 fa09 	bl	80f4 <z_ready_thread>
		thread = z_unpend_first_thread(&sem->wait_q);
    5ce2:	e7f7      	b.n	5cd4 <z_impl_k_sem_reset+0x18>
	}
	sem->count = 0;
    5ce4:	60a0      	str	r0, [r4, #8]

	SYS_PORT_TRACING_OBJ_FUNC(k_sem, reset, sem);

	handle_poll_events(sem);

	z_reschedule(&lock, key);
    5ce6:	4629      	mov	r1, r5
    5ce8:	4802      	ldr	r0, [pc, #8]	; (5cf4 <z_impl_k_sem_reset+0x38>)
}
    5cea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_reschedule(&lock, key);
    5cee:	f000 b9e1 	b.w	60b4 <z_reschedule>
    5cf2:	bf00      	nop
    5cf4:	200013a9 	.word	0x200013a9

00005cf8 <k_work_queue_start>:
void k_work_queue_start(struct k_work_q *queue,
			k_thread_stack_t *stack,
			size_t stack_size,
			int prio,
			const struct k_work_queue_config *cfg)
{
    5cf8:	b5f0      	push	{r4, r5, r6, r7, lr}
    5cfa:	b089      	sub	sp, #36	; 0x24
    5cfc:	4604      	mov	r4, r0
	list->head = NULL;
    5cfe:	2000      	movs	r0, #0
	list->tail = NULL;
    5d00:	e9c4 0030 	strd	r0, r0, [r4, #192]	; 0xc0
    5d04:	9d0e      	ldr	r5, [sp, #56]	; 0x38
    5d06:	f104 00c8 	add.w	r0, r4, #200	; 0xc8
	list->tail = (sys_dnode_t *)list;
    5d0a:	e9c4 0032 	strd	r0, r0, [r4, #200]	; 0xc8
    5d0e:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
    5d12:	e9c4 0034 	strd	r0, r0, [r4, #208]	; 0xd0

	sys_slist_init(&queue->pending);
	z_waitq_init(&queue->notifyq);
	z_waitq_init(&queue->drainq);

	if ((cfg != NULL) && cfg->no_yield) {
    5d16:	b31d      	cbz	r5, 5d60 <k_work_queue_start+0x68>
    5d18:	7928      	ldrb	r0, [r5, #4]
		flags |= K_WORK_QUEUE_NO_YIELD;
    5d1a:	2800      	cmp	r0, #0
    5d1c:	f240 1001 	movw	r0, #257	; 0x101
    5d20:	bf08      	it	eq
    5d22:	2001      	moveq	r0, #1
	*flagp = flags;
    5d24:	f8c4 00d8 	str.w	r0, [r4, #216]	; 0xd8
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    5d28:	2000      	movs	r0, #0
    5d2a:	f04f 36ff 	mov.w	r6, #4294967295
    5d2e:	f04f 37ff 	mov.w	r7, #4294967295
    5d32:	e9cd 3003 	strd	r3, r0, [sp, #12]
    5d36:	e9cd 0001 	strd	r0, r0, [sp, #4]
    5d3a:	e9cd 6706 	strd	r6, r7, [sp, #24]
    5d3e:	4b09      	ldr	r3, [pc, #36]	; (5d64 <k_work_queue_start+0x6c>)
    5d40:	9400      	str	r4, [sp, #0]
    5d42:	4620      	mov	r0, r4
    5d44:	f7ff fe18 	bl	5978 <z_impl_k_thread_create>

	(void)k_thread_create(&queue->thread, stack, stack_size,
			      work_queue_main, queue, NULL, NULL,
			      prio, 0, K_FOREVER);

	if ((cfg != NULL) && (cfg->name != NULL)) {
    5d48:	b125      	cbz	r5, 5d54 <k_work_queue_start+0x5c>
    5d4a:	6829      	ldr	r1, [r5, #0]
    5d4c:	b111      	cbz	r1, 5d54 <k_work_queue_start+0x5c>
	return z_impl_k_thread_name_set(thread, str);
    5d4e:	4620      	mov	r0, r4
    5d50:	f002 f964 	bl	801c <z_impl_k_thread_name_set>
	z_impl_k_thread_start(thread);
    5d54:	4620      	mov	r0, r4
	}

	k_thread_start(&queue->thread);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work_queue, start, queue);
}
    5d56:	b009      	add	sp, #36	; 0x24
    5d58:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    5d5c:	f002 b961 	b.w	8022 <z_impl_k_thread_start>
	uint32_t flags = K_WORK_QUEUE_STARTED;
    5d60:	2001      	movs	r0, #1
    5d62:	e7df      	b.n	5d24 <k_work_queue_start+0x2c>
    5d64:	000010b1 	.word	0x000010b1

00005d68 <sliceable>:
{
	bool ret = is_preempt(thread)
		&& slice_time(thread) != 0
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
		&& !z_is_thread_prevented_from_running(thread)
		&& !z_is_idle_thread_object(thread);
    5d68:	89c3      	ldrh	r3, [r0, #14]
    5d6a:	2b7f      	cmp	r3, #127	; 0x7f
    5d6c:	d812      	bhi.n	5d94 <sliceable+0x2c>
	int ret = slice_ticks;
    5d6e:	4b0a      	ldr	r3, [pc, #40]	; (5d98 <sliceable+0x30>)
    5d70:	681b      	ldr	r3, [r3, #0]
		&& slice_time(thread) != 0
    5d72:	b163      	cbz	r3, 5d8e <sliceable+0x26>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
    5d74:	4b09      	ldr	r3, [pc, #36]	; (5d9c <sliceable+0x34>)
    5d76:	f990 200e 	ldrsb.w	r2, [r0, #14]
    5d7a:	681b      	ldr	r3, [r3, #0]
    5d7c:	429a      	cmp	r2, r3
    5d7e:	db09      	blt.n	5d94 <sliceable+0x2c>
		&& !z_is_thread_prevented_from_running(thread)
    5d80:	7b43      	ldrb	r3, [r0, #13]
    5d82:	06db      	lsls	r3, r3, #27
    5d84:	d106      	bne.n	5d94 <sliceable+0x2c>
		&& !z_is_idle_thread_object(thread);
    5d86:	4b06      	ldr	r3, [pc, #24]	; (5da0 <sliceable+0x38>)
    5d88:	1ac3      	subs	r3, r0, r3
    5d8a:	bf18      	it	ne
    5d8c:	2301      	movne	r3, #1
#ifdef CONFIG_TIMESLICE_PER_THREAD
	ret |= thread->base.slice_ticks != 0;
#endif

	return ret;
}
    5d8e:	f003 0001 	and.w	r0, r3, #1
    5d92:	4770      	bx	lr
		&& !z_is_idle_thread_object(thread);
    5d94:	2300      	movs	r3, #0
    5d96:	e7fa      	b.n	5d8e <sliceable+0x26>
    5d98:	20000dac 	.word	0x20000dac
    5d9c:	20000da8 	.word	0x20000da8
    5da0:	20000350 	.word	0x20000350

00005da4 <slice_timeout>:

static void slice_timeout(struct _timeout *t)
{
	int cpu = ARRAY_INDEX(slice_timeouts, t);
    5da4:	4b04      	ldr	r3, [pc, #16]	; (5db8 <slice_timeout+0x14>)
    5da6:	1ac0      	subs	r0, r0, r3
    5da8:	4b04      	ldr	r3, [pc, #16]	; (5dbc <slice_timeout+0x18>)
    5daa:	10c0      	asrs	r0, r0, #3
    5dac:	4358      	muls	r0, r3

	slice_expired[cpu] = true;
    5dae:	4b04      	ldr	r3, [pc, #16]	; (5dc0 <slice_timeout+0x1c>)
    5db0:	2201      	movs	r2, #1
    5db2:	541a      	strb	r2, [r3, r0]
	 * the specific core, but that's not part of the API yet.
	 */
	if (IS_ENABLED(CONFIG_SMP) && cpu != _current_cpu->id) {
		flag_ipi();
	}
}
    5db4:	4770      	bx	lr
    5db6:	bf00      	nop
    5db8:	200004d0 	.word	0x200004d0
    5dbc:	aaaaaaab 	.word	0xaaaaaaab
    5dc0:	200013a9 	.word	0x200013a9

00005dc4 <z_reset_time_slice>:

void z_reset_time_slice(struct k_thread *curr)
{
    5dc4:	b570      	push	{r4, r5, r6, lr}
	int cpu = _current_cpu->id;
    5dc6:	4b0e      	ldr	r3, [pc, #56]	; (5e00 <z_reset_time_slice+0x3c>)

	z_abort_timeout(&slice_timeouts[cpu]);
    5dc8:	4c0e      	ldr	r4, [pc, #56]	; (5e04 <z_reset_time_slice+0x40>)
	int cpu = _current_cpu->id;
    5dca:	7c1e      	ldrb	r6, [r3, #16]
	z_abort_timeout(&slice_timeouts[cpu]);
    5dcc:	eb06 0346 	add.w	r3, r6, r6, lsl #1
    5dd0:	eb04 04c3 	add.w	r4, r4, r3, lsl #3
{
    5dd4:	4605      	mov	r5, r0
	z_abort_timeout(&slice_timeouts[cpu]);
    5dd6:	4620      	mov	r0, r4
    5dd8:	f002 fa40 	bl	825c <z_abort_timeout>
	slice_expired[cpu] = false;
    5ddc:	4b0a      	ldr	r3, [pc, #40]	; (5e08 <z_reset_time_slice+0x44>)
    5dde:	2200      	movs	r2, #0
	if (sliceable(curr)) {
    5de0:	4628      	mov	r0, r5
	slice_expired[cpu] = false;
    5de2:	559a      	strb	r2, [r3, r6]
	if (sliceable(curr)) {
    5de4:	f7ff ffc0 	bl	5d68 <sliceable>
    5de8:	b148      	cbz	r0, 5dfe <z_reset_time_slice+0x3a>
	int ret = slice_ticks;
    5dea:	4b08      	ldr	r3, [pc, #32]	; (5e0c <z_reset_time_slice+0x48>)
		z_add_timeout(&slice_timeouts[cpu], slice_timeout,
    5dec:	4908      	ldr	r1, [pc, #32]	; (5e10 <z_reset_time_slice+0x4c>)
			      K_TICKS(slice_time(curr) - 1));
    5dee:	681a      	ldr	r2, [r3, #0]
    5df0:	3a01      	subs	r2, #1
		z_add_timeout(&slice_timeouts[cpu], slice_timeout,
    5df2:	4620      	mov	r0, r4
    5df4:	17d3      	asrs	r3, r2, #31
	}
}
    5df6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_add_timeout(&slice_timeouts[cpu], slice_timeout,
    5dfa:	f000 bb69 	b.w	64d0 <z_add_timeout>
}
    5dfe:	bd70      	pop	{r4, r5, r6, pc}
    5e00:	20000d70 	.word	0x20000d70
    5e04:	200004d0 	.word	0x200004d0
    5e08:	200013a9 	.word	0x200013a9
    5e0c:	20000dac 	.word	0x20000dac
    5e10:	00005da5 	.word	0x00005da5

00005e14 <update_cache>:
	}
#endif
}

static void update_cache(int preempt_ok)
{
    5e14:	b538      	push	{r3, r4, r5, lr}
	return list->head == list;
    5e16:	4d0d      	ldr	r5, [pc, #52]	; (5e4c <update_cache+0x38>)
    5e18:	462b      	mov	r3, r5
    5e1a:	f853 4f20 	ldr.w	r4, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    5e1e:	429c      	cmp	r4, r3
    5e20:	d000      	beq.n	5e24 <update_cache+0x10>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
    5e22:	b904      	cbnz	r4, 5e26 <update_cache+0x12>
    5e24:	68ec      	ldr	r4, [r5, #12]
	if (z_is_thread_prevented_from_running(_current)) {
    5e26:	68ab      	ldr	r3, [r5, #8]
	if (preempt_ok != 0) {
    5e28:	b938      	cbnz	r0, 5e3a <update_cache+0x26>
	if (z_is_thread_prevented_from_running(_current)) {
    5e2a:	7b5a      	ldrb	r2, [r3, #13]
    5e2c:	06d2      	lsls	r2, r2, #27
    5e2e:	d104      	bne.n	5e3a <update_cache+0x26>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
    5e30:	69a2      	ldr	r2, [r4, #24]
    5e32:	b912      	cbnz	r2, 5e3a <update_cache+0x26>
	if (is_preempt(_current) || is_metairq(thread)) {
    5e34:	89da      	ldrh	r2, [r3, #14]
    5e36:	2a7f      	cmp	r2, #127	; 0x7f
    5e38:	d805      	bhi.n	5e46 <update_cache+0x32>
#ifndef CONFIG_SMP
	struct k_thread *thread = next_up();

	if (should_preempt(thread, preempt_ok)) {
#ifdef CONFIG_TIMESLICING
		if (thread != _current) {
    5e3a:	429c      	cmp	r4, r3
    5e3c:	d002      	beq.n	5e44 <update_cache+0x30>
			z_reset_time_slice(thread);
    5e3e:	4620      	mov	r0, r4
    5e40:	f7ff ffc0 	bl	5dc4 <z_reset_time_slice>
		}
#endif
		update_metairq_preempt(thread);
		_kernel.ready_q.cache = thread;
    5e44:	4623      	mov	r3, r4
    5e46:	61eb      	str	r3, [r5, #28]
	 * thread because if the thread gets preempted for whatever
	 * reason the scheduler will make the same decision anyway.
	 */
	_current_cpu->swap_ok = preempt_ok;
#endif
}
    5e48:	bd38      	pop	{r3, r4, r5, pc}
    5e4a:	bf00      	nop
    5e4c:	20000d70 	.word	0x20000d70

00005e50 <move_thread_to_end_of_prio_q>:
{
    5e50:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
    5e52:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return (thread->base.thread_state & state) != 0U;
    5e56:	7b43      	ldrb	r3, [r0, #13]
    5e58:	2a00      	cmp	r2, #0
{
    5e5a:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
    5e5c:	da04      	bge.n	5e68 <move_thread_to_end_of_prio_q+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    5e5e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    5e62:	7343      	strb	r3, [r0, #13]

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
    5e64:	f002 f90c 	bl	8080 <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
    5e68:	7b4b      	ldrb	r3, [r1, #13]
	return list->head == list;
    5e6a:	4a15      	ldr	r2, [pc, #84]	; (5ec0 <move_thread_to_end_of_prio_q+0x70>)
    5e6c:	f063 037f 	orn	r3, r3, #127	; 0x7f
    5e70:	4610      	mov	r0, r2
    5e72:	734b      	strb	r3, [r1, #13]
    5e74:	f850 3f20 	ldr.w	r3, [r0, #32]!
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
    5e78:	6a54      	ldr	r4, [r2, #36]	; 0x24
	return sys_dlist_is_empty(list) ? NULL : list->head;
    5e7a:	4283      	cmp	r3, r0
    5e7c:	bf08      	it	eq
    5e7e:	2300      	moveq	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    5e80:	b923      	cbnz	r3, 5e8c <move_thread_to_end_of_prio_q+0x3c>
static inline void sys_dlist_append(sys_dlist_t *list, sys_dnode_t *node)
{
	sys_dnode_t *const tail = list->tail;

	node->next = list;
	node->prev = tail;
    5e82:	e9c1 0400 	strd	r0, r4, [r1]

	tail->next = node;
    5e86:	6021      	str	r1, [r4, #0]
	list->tail = node;
    5e88:	6251      	str	r1, [r2, #36]	; 0x24
}
    5e8a:	e00c      	b.n	5ea6 <move_thread_to_end_of_prio_q+0x56>
	int32_t b1 = thread_1->base.prio;
    5e8c:	f991 500e 	ldrsb.w	r5, [r1, #14]
	int32_t b2 = thread_2->base.prio;
    5e90:	f993 600e 	ldrsb.w	r6, [r3, #14]
	if (b1 != b2) {
    5e94:	42b5      	cmp	r5, r6
    5e96:	d00e      	beq.n	5eb6 <move_thread_to_end_of_prio_q+0x66>
		if (z_sched_prio_cmp(thread, t) > 0) {
    5e98:	42ae      	cmp	r6, r5
    5e9a:	dd0c      	ble.n	5eb6 <move_thread_to_end_of_prio_q+0x66>
 * @param successor the position before which "node" will be inserted
 * @param node the element to insert
 */
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
	sys_dnode_t *const prev = successor->prev;
    5e9c:	6858      	ldr	r0, [r3, #4]

	node->prev = prev;
	node->next = successor;
    5e9e:	e9c1 3000 	strd	r3, r0, [r1]
	prev->next = node;
    5ea2:	6001      	str	r1, [r0, #0]
	successor->prev = node;
    5ea4:	6059      	str	r1, [r3, #4]
	update_cache(thread == _current);
    5ea6:	6890      	ldr	r0, [r2, #8]
    5ea8:	1a43      	subs	r3, r0, r1
    5eaa:	4258      	negs	r0, r3
}
    5eac:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
    5eb0:	4158      	adcs	r0, r3
    5eb2:	f7ff bfaf 	b.w	5e14 <update_cache>
	return (node == list->tail) ? NULL : node->next;
    5eb6:	429c      	cmp	r4, r3
    5eb8:	d0e3      	beq.n	5e82 <move_thread_to_end_of_prio_q+0x32>
    5eba:	681b      	ldr	r3, [r3, #0]
    5ebc:	e7e0      	b.n	5e80 <move_thread_to_end_of_prio_q+0x30>
    5ebe:	bf00      	nop
    5ec0:	20000d70 	.word	0x20000d70

00005ec4 <ready_thread>:
{
    5ec4:	b470      	push	{r4, r5, r6}
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
    5ec6:	f990 300d 	ldrsb.w	r3, [r0, #13]
    5eca:	7b42      	ldrb	r2, [r0, #13]
    5ecc:	2b00      	cmp	r3, #0
    5ece:	db29      	blt.n	5f24 <ready_thread+0x60>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    5ed0:	06d3      	lsls	r3, r2, #27
    5ed2:	d127      	bne.n	5f24 <ready_thread+0x60>
	return node->next != NULL;
    5ed4:	6983      	ldr	r3, [r0, #24]
    5ed6:	bb2b      	cbnz	r3, 5f24 <ready_thread+0x60>
	return list->head == list;
    5ed8:	4913      	ldr	r1, [pc, #76]	; (5f28 <ready_thread+0x64>)
	thread->base.thread_state |= _THREAD_QUEUED;
    5eda:	f062 027f 	orn	r2, r2, #127	; 0x7f
    5ede:	7342      	strb	r2, [r0, #13]
    5ee0:	460a      	mov	r2, r1
    5ee2:	f852 4f20 	ldr.w	r4, [r2, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    5ee6:	4294      	cmp	r4, r2
    5ee8:	bf18      	it	ne
    5eea:	4623      	movne	r3, r4
	return (node == list->tail) ? NULL : node->next;
    5eec:	6a4c      	ldr	r4, [r1, #36]	; 0x24
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    5eee:	b923      	cbnz	r3, 5efa <ready_thread+0x36>
	node->prev = tail;
    5ef0:	e9c0 2400 	strd	r2, r4, [r0]
	tail->next = node;
    5ef4:	6020      	str	r0, [r4, #0]
	list->tail = node;
    5ef6:	6248      	str	r0, [r1, #36]	; 0x24
}
    5ef8:	e00c      	b.n	5f14 <ready_thread+0x50>
	int32_t b1 = thread_1->base.prio;
    5efa:	f990 500e 	ldrsb.w	r5, [r0, #14]
	int32_t b2 = thread_2->base.prio;
    5efe:	f993 600e 	ldrsb.w	r6, [r3, #14]
	if (b1 != b2) {
    5f02:	42b5      	cmp	r5, r6
    5f04:	d00a      	beq.n	5f1c <ready_thread+0x58>
		if (z_sched_prio_cmp(thread, t) > 0) {
    5f06:	42ae      	cmp	r6, r5
    5f08:	dd08      	ble.n	5f1c <ready_thread+0x58>
	sys_dnode_t *const prev = successor->prev;
    5f0a:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    5f0c:	e9c0 3200 	strd	r3, r2, [r0]
	prev->next = node;
    5f10:	6010      	str	r0, [r2, #0]
	successor->prev = node;
    5f12:	6058      	str	r0, [r3, #4]
}
    5f14:	bc70      	pop	{r4, r5, r6}
		update_cache(0);
    5f16:	2000      	movs	r0, #0
    5f18:	f7ff bf7c 	b.w	5e14 <update_cache>
	return (node == list->tail) ? NULL : node->next;
    5f1c:	42a3      	cmp	r3, r4
    5f1e:	d0e7      	beq.n	5ef0 <ready_thread+0x2c>
    5f20:	681b      	ldr	r3, [r3, #0]
    5f22:	e7e4      	b.n	5eee <ready_thread+0x2a>
}
    5f24:	bc70      	pop	{r4, r5, r6}
    5f26:	4770      	bx	lr
    5f28:	20000d70 	.word	0x20000d70

00005f2c <unready_thread>:
{
    5f2c:	b508      	push	{r3, lr}
	if (z_is_thread_queued(thread)) {
    5f2e:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return (thread->base.thread_state & state) != 0U;
    5f32:	7b43      	ldrb	r3, [r0, #13]
    5f34:	2a00      	cmp	r2, #0
{
    5f36:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
    5f38:	da04      	bge.n	5f44 <unready_thread+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    5f3a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    5f3e:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    5f40:	f002 f89e 	bl	8080 <sys_dlist_remove>
	update_cache(thread == _current);
    5f44:	4b04      	ldr	r3, [pc, #16]	; (5f58 <unready_thread+0x2c>)
    5f46:	6898      	ldr	r0, [r3, #8]
    5f48:	1a43      	subs	r3, r0, r1
    5f4a:	4258      	negs	r0, r3
    5f4c:	4158      	adcs	r0, r3
}
    5f4e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	update_cache(thread == _current);
    5f52:	f7ff bf5f 	b.w	5e14 <update_cache>
    5f56:	bf00      	nop
    5f58:	20000d70 	.word	0x20000d70

00005f5c <pend_locked>:
{
    5f5c:	b570      	push	{r4, r5, r6, lr}
    5f5e:	4615      	mov	r5, r2
    5f60:	461c      	mov	r4, r3
    5f62:	4606      	mov	r6, r0
	add_to_waitq_locked(thread, wait_q);
    5f64:	f002 f89e 	bl	80a4 <add_to_waitq_locked>
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    5f68:	f1b4 3fff 	cmp.w	r4, #4294967295
    5f6c:	bf08      	it	eq
    5f6e:	f1b5 3fff 	cmpeq.w	r5, #4294967295
    5f72:	d008      	beq.n	5f86 <pend_locked+0x2a>
    5f74:	462a      	mov	r2, r5
    5f76:	4623      	mov	r3, r4
    5f78:	f106 0018 	add.w	r0, r6, #24
    5f7c:	4902      	ldr	r1, [pc, #8]	; (5f88 <pend_locked+0x2c>)
}
    5f7e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    5f82:	f000 baa5 	b.w	64d0 <z_add_timeout>
    5f86:	bd70      	pop	{r4, r5, r6, pc}
    5f88:	0000817d 	.word	0x0000817d

00005f8c <z_time_slice>:
{
    5f8c:	b538      	push	{r3, r4, r5, lr}
    5f8e:	f04f 0320 	mov.w	r3, #32
    5f92:	f3ef 8511 	mrs	r5, BASEPRI
    5f96:	f383 8812 	msr	BASEPRI_MAX, r3
    5f9a:	f3bf 8f6f 	isb	sy
	struct k_thread *curr = _current;
    5f9e:	4b10      	ldr	r3, [pc, #64]	; (5fe0 <z_time_slice+0x54>)
	if (pending_current == curr) {
    5fa0:	4a10      	ldr	r2, [pc, #64]	; (5fe4 <z_time_slice+0x58>)
	struct k_thread *curr = _current;
    5fa2:	689c      	ldr	r4, [r3, #8]
	if (pending_current == curr) {
    5fa4:	6810      	ldr	r0, [r2, #0]
    5fa6:	42a0      	cmp	r0, r4
    5fa8:	d106      	bne.n	5fb8 <z_time_slice+0x2c>
		z_reset_time_slice(curr);
    5faa:	f7ff ff0b 	bl	5dc4 <z_reset_time_slice>
	__asm__ volatile(
    5fae:	f385 8811 	msr	BASEPRI, r5
    5fb2:	f3bf 8f6f 	isb	sy
}
    5fb6:	bd38      	pop	{r3, r4, r5, pc}
	pending_current = NULL;
    5fb8:	2100      	movs	r1, #0
	if (slice_expired[_current_cpu->id] && sliceable(curr)) {
    5fba:	7c1b      	ldrb	r3, [r3, #16]
	pending_current = NULL;
    5fbc:	6011      	str	r1, [r2, #0]
	if (slice_expired[_current_cpu->id] && sliceable(curr)) {
    5fbe:	4a0a      	ldr	r2, [pc, #40]	; (5fe8 <z_time_slice+0x5c>)
    5fc0:	5cd3      	ldrb	r3, [r2, r3]
    5fc2:	2b00      	cmp	r3, #0
    5fc4:	d0f3      	beq.n	5fae <z_time_slice+0x22>
    5fc6:	4620      	mov	r0, r4
    5fc8:	f7ff fece 	bl	5d68 <sliceable>
    5fcc:	2800      	cmp	r0, #0
    5fce:	d0ee      	beq.n	5fae <z_time_slice+0x22>
		if (!z_is_thread_prevented_from_running(curr)) {
    5fd0:	7b63      	ldrb	r3, [r4, #13]
    5fd2:	06db      	lsls	r3, r3, #27
    5fd4:	d102      	bne.n	5fdc <z_time_slice+0x50>
			move_thread_to_end_of_prio_q(curr);
    5fd6:	4620      	mov	r0, r4
    5fd8:	f7ff ff3a 	bl	5e50 <move_thread_to_end_of_prio_q>
		z_reset_time_slice(curr);
    5fdc:	4620      	mov	r0, r4
    5fde:	e7e4      	b.n	5faa <z_time_slice+0x1e>
    5fe0:	20000d70 	.word	0x20000d70
    5fe4:	20000da4 	.word	0x20000da4
    5fe8:	200013a9 	.word	0x200013a9

00005fec <z_pend_curr>:
{
    5fec:	b570      	push	{r4, r5, r6, lr}
	pending_current = _current;
    5fee:	480c      	ldr	r0, [pc, #48]	; (6020 <CONFIG_PM_PARTITION_SIZE_NVS_STORAGE+0x20>)
    5ff0:	4d0c      	ldr	r5, [pc, #48]	; (6024 <CONFIG_PM_PARTITION_SIZE_NVS_STORAGE+0x24>)
    5ff2:	6886      	ldr	r6, [r0, #8]
    5ff4:	602e      	str	r6, [r5, #0]
{
    5ff6:	460c      	mov	r4, r1
    5ff8:	4611      	mov	r1, r2
    5ffa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
	__asm__ volatile(
    5ffe:	f04f 0620 	mov.w	r6, #32
    6002:	f3ef 8511 	mrs	r5, BASEPRI
    6006:	f386 8812 	msr	BASEPRI_MAX, r6
    600a:	f3bf 8f6f 	isb	sy
	pend_locked(_current, wait_q, timeout);
    600e:	6880      	ldr	r0, [r0, #8]
    6010:	f7ff ffa4 	bl	5f5c <pend_locked>
	ret = arch_swap(key);
    6014:	4620      	mov	r0, r4
}
    6016:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    601a:	f7fb bd0f 	b.w	1a3c <arch_swap>
    601e:	bf00      	nop
    6020:	20000d70 	.word	0x20000d70
    6024:	20000da4 	.word	0x20000da4

00006028 <z_set_prio>:
{
    6028:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    602a:	4604      	mov	r4, r0
    602c:	f04f 0320 	mov.w	r3, #32
    6030:	f3ef 8611 	mrs	r6, BASEPRI
    6034:	f383 8812 	msr	BASEPRI_MAX, r3
    6038:	f3bf 8f6f 	isb	sy
	uint8_t state = thread->base.thread_state;
    603c:	7b43      	ldrb	r3, [r0, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    603e:	06da      	lsls	r2, r3, #27
				thread->base.prio = prio;
    6040:	b249      	sxtb	r1, r1
    6042:	d119      	bne.n	6078 <z_set_prio+0x50>
	return node->next != NULL;
    6044:	6985      	ldr	r5, [r0, #24]
    6046:	b9bd      	cbnz	r5, 6078 <z_set_prio+0x50>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    6048:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    604c:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    604e:	f002 f817 	bl	8080 <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
    6052:	7b43      	ldrb	r3, [r0, #13]
	return list->head == list;
    6054:	4a16      	ldr	r2, [pc, #88]	; (60b0 <z_set_prio+0x88>)
				thread->base.prio = prio;
    6056:	7381      	strb	r1, [r0, #14]
	thread->base.thread_state |= _THREAD_QUEUED;
    6058:	f063 037f 	orn	r3, r3, #127	; 0x7f
    605c:	7343      	strb	r3, [r0, #13]
    605e:	4613      	mov	r3, r2
    6060:	f853 0f20 	ldr.w	r0, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    6064:	4298      	cmp	r0, r3
    6066:	bf18      	it	ne
    6068:	4605      	movne	r5, r0
	return (node == list->tail) ? NULL : node->next;
    606a:	6a50      	ldr	r0, [r2, #36]	; 0x24
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    606c:	b95d      	cbnz	r5, 6086 <z_set_prio+0x5e>
	node->prev = tail;
    606e:	e9c4 3000 	strd	r3, r0, [r4]
	tail->next = node;
    6072:	6004      	str	r4, [r0, #0]
	list->tail = node;
    6074:	6254      	str	r4, [r2, #36]	; 0x24
}
    6076:	e011      	b.n	609c <z_set_prio+0x74>
			thread->base.prio = prio;
    6078:	73a1      	strb	r1, [r4, #14]
    607a:	2000      	movs	r0, #0
	__asm__ volatile(
    607c:	f386 8811 	msr	BASEPRI, r6
    6080:	f3bf 8f6f 	isb	sy
}
    6084:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	int32_t b2 = thread_2->base.prio;
    6086:	f995 700e 	ldrsb.w	r7, [r5, #14]
	if (b1 != b2) {
    608a:	42b9      	cmp	r1, r7
    608c:	d00b      	beq.n	60a6 <z_set_prio+0x7e>
		if (z_sched_prio_cmp(thread, t) > 0) {
    608e:	428f      	cmp	r7, r1
    6090:	dd09      	ble.n	60a6 <z_set_prio+0x7e>
	sys_dnode_t *const prev = successor->prev;
    6092:	686b      	ldr	r3, [r5, #4]
	node->next = successor;
    6094:	e9c4 5300 	strd	r5, r3, [r4]
	prev->next = node;
    6098:	601c      	str	r4, [r3, #0]
	successor->prev = node;
    609a:	606c      	str	r4, [r5, #4]
			update_cache(1);
    609c:	2001      	movs	r0, #1
    609e:	f7ff feb9 	bl	5e14 <update_cache>
    60a2:	2001      	movs	r0, #1
    60a4:	e7ea      	b.n	607c <z_set_prio+0x54>
	return (node == list->tail) ? NULL : node->next;
    60a6:	42a8      	cmp	r0, r5
    60a8:	d0e1      	beq.n	606e <z_set_prio+0x46>
    60aa:	682d      	ldr	r5, [r5, #0]
    60ac:	e7de      	b.n	606c <z_set_prio+0x44>
    60ae:	bf00      	nop
    60b0:	20000d70 	.word	0x20000d70

000060b4 <z_reschedule>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    60b4:	b949      	cbnz	r1, 60ca <z_reschedule+0x16>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    60b6:	f3ef 8005 	mrs	r0, IPSR
    60ba:	b930      	cbnz	r0, 60ca <z_reschedule+0x16>
	new_thread = _kernel.ready_q.cache;
    60bc:	4b05      	ldr	r3, [pc, #20]	; (60d4 <z_reschedule+0x20>)
	if (resched(key.key) && need_swap()) {
    60be:	69da      	ldr	r2, [r3, #28]
    60c0:	689b      	ldr	r3, [r3, #8]
    60c2:	429a      	cmp	r2, r3
    60c4:	d001      	beq.n	60ca <z_reschedule+0x16>
    60c6:	f7fb bcb9 	b.w	1a3c <arch_swap>
    60ca:	f381 8811 	msr	BASEPRI, r1
    60ce:	f3bf 8f6f 	isb	sy
}
    60d2:	4770      	bx	lr
    60d4:	20000d70 	.word	0x20000d70

000060d8 <z_sched_start>:
{
    60d8:	b510      	push	{r4, lr}
	__asm__ volatile(
    60da:	f04f 0220 	mov.w	r2, #32
    60de:	f3ef 8411 	mrs	r4, BASEPRI
    60e2:	f382 8812 	msr	BASEPRI_MAX, r2
    60e6:	f3bf 8f6f 	isb	sy
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
    60ea:	7b42      	ldrb	r2, [r0, #13]
	if (z_has_thread_started(thread)) {
    60ec:	0751      	lsls	r1, r2, #29
    60ee:	d404      	bmi.n	60fa <z_sched_start+0x22>
	__asm__ volatile(
    60f0:	f384 8811 	msr	BASEPRI, r4
    60f4:	f3bf 8f6f 	isb	sy
}
    60f8:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
    60fa:	f022 0204 	bic.w	r2, r2, #4
    60fe:	7342      	strb	r2, [r0, #13]
	ready_thread(thread);
    6100:	f7ff fee0 	bl	5ec4 <ready_thread>
	z_reschedule(&sched_spinlock, key);
    6104:	4621      	mov	r1, r4
    6106:	4802      	ldr	r0, [pc, #8]	; (6110 <z_sched_start+0x38>)
}
    6108:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule(&sched_spinlock, key);
    610c:	f7ff bfd2 	b.w	60b4 <z_reschedule>
    6110:	200013aa 	.word	0x200013aa

00006114 <z_impl_k_thread_suspend>:
{
    6114:	b570      	push	{r4, r5, r6, lr}
    6116:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
    6118:	3018      	adds	r0, #24
    611a:	f002 f89f 	bl	825c <z_abort_timeout>
	__asm__ volatile(
    611e:	f04f 0320 	mov.w	r3, #32
    6122:	f3ef 8611 	mrs	r6, BASEPRI
    6126:	f383 8812 	msr	BASEPRI_MAX, r3
    612a:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
    612e:	f994 200d 	ldrsb.w	r2, [r4, #13]
	return (thread->base.thread_state & state) != 0U;
    6132:	7b63      	ldrb	r3, [r4, #13]
    6134:	2a00      	cmp	r2, #0
    6136:	da05      	bge.n	6144 <z_impl_k_thread_suspend+0x30>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    6138:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    613c:	7363      	strb	r3, [r4, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    613e:	4620      	mov	r0, r4
    6140:	f001 ff9e 	bl	8080 <sys_dlist_remove>
		update_cache(thread == _current);
    6144:	4d0b      	ldr	r5, [pc, #44]	; (6174 <z_impl_k_thread_suspend+0x60>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
    6146:	7b63      	ldrb	r3, [r4, #13]
    6148:	68a8      	ldr	r0, [r5, #8]
    614a:	f043 0310 	orr.w	r3, r3, #16
    614e:	7363      	strb	r3, [r4, #13]
    6150:	1b03      	subs	r3, r0, r4
    6152:	4258      	negs	r0, r3
    6154:	4158      	adcs	r0, r3
    6156:	f7ff fe5d 	bl	5e14 <update_cache>
	__asm__ volatile(
    615a:	f386 8811 	msr	BASEPRI, r6
    615e:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
    6162:	68ab      	ldr	r3, [r5, #8]
    6164:	42a3      	cmp	r3, r4
    6166:	d103      	bne.n	6170 <z_impl_k_thread_suspend+0x5c>
}
    6168:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
    616c:	f002 b849 	b.w	8202 <z_reschedule_unlocked>
}
    6170:	bd70      	pop	{r4, r5, r6, pc}
    6172:	bf00      	nop
    6174:	20000d70 	.word	0x20000d70

00006178 <k_sched_lock>:
	__asm__ volatile(
    6178:	f04f 0320 	mov.w	r3, #32
    617c:	f3ef 8111 	mrs	r1, BASEPRI
    6180:	f383 8812 	msr	BASEPRI_MAX, r3
    6184:	f3bf 8f6f 	isb	sy
	--_current->base.sched_locked;
    6188:	4b04      	ldr	r3, [pc, #16]	; (619c <k_sched_lock+0x24>)
    618a:	689a      	ldr	r2, [r3, #8]
    618c:	7bd3      	ldrb	r3, [r2, #15]
    618e:	3b01      	subs	r3, #1
    6190:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
    6192:	f381 8811 	msr	BASEPRI, r1
    6196:	f3bf 8f6f 	isb	sy
}
    619a:	4770      	bx	lr
    619c:	20000d70 	.word	0x20000d70

000061a0 <k_sched_unlock>:
{
    61a0:	b510      	push	{r4, lr}
	__asm__ volatile(
    61a2:	f04f 0320 	mov.w	r3, #32
    61a6:	f3ef 8411 	mrs	r4, BASEPRI
    61aa:	f383 8812 	msr	BASEPRI_MAX, r3
    61ae:	f3bf 8f6f 	isb	sy
		++_current->base.sched_locked;
    61b2:	4b08      	ldr	r3, [pc, #32]	; (61d4 <k_sched_unlock+0x34>)
    61b4:	689a      	ldr	r2, [r3, #8]
    61b6:	7bd3      	ldrb	r3, [r2, #15]
    61b8:	3301      	adds	r3, #1
    61ba:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
    61bc:	2000      	movs	r0, #0
    61be:	f7ff fe29 	bl	5e14 <update_cache>
	__asm__ volatile(
    61c2:	f384 8811 	msr	BASEPRI, r4
    61c6:	f3bf 8f6f 	isb	sy
}
    61ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule_unlocked();
    61ce:	f002 b818 	b.w	8202 <z_reschedule_unlocked>
    61d2:	bf00      	nop
    61d4:	20000d70 	.word	0x20000d70

000061d8 <z_sched_init>:
	list->head = (sys_dnode_t *)list;
    61d8:	4b02      	ldr	r3, [pc, #8]	; (61e4 <z_sched_init+0xc>)
    61da:	f103 0220 	add.w	r2, r3, #32
	list->tail = (sys_dnode_t *)list;
    61de:	e9c3 2208 	strd	r2, r2, [r3, #32]
		init_ready_q(&_kernel.cpus[i].ready_q);
	}
#else
	init_ready_q(&_kernel.ready_q);
#endif
}
    61e2:	4770      	bx	lr
    61e4:	20000d70 	.word	0x20000d70

000061e8 <z_impl_k_yield>:
	return !(k_is_pre_kernel() || k_is_in_isr() ||
		 z_is_idle_thread_object(_current));
}

void z_impl_k_yield(void)
{
    61e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
    61ea:	f04f 0320 	mov.w	r3, #32
    61ee:	f3ef 8511 	mrs	r5, BASEPRI
    61f2:	f383 8812 	msr	BASEPRI_MAX, r3
    61f6:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if (!IS_ENABLED(CONFIG_SMP) ||
	    z_is_thread_queued(_current)) {
		dequeue_thread(_current);
    61fa:	4919      	ldr	r1, [pc, #100]	; (6260 <z_impl_k_yield+0x78>)
    61fc:	6888      	ldr	r0, [r1, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
    61fe:	7b43      	ldrb	r3, [r0, #13]
    6200:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    6204:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    6206:	f001 ff3b 	bl	8080 <sys_dlist_remove>
	}
	queue_thread(_current);
    620a:	688b      	ldr	r3, [r1, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
    620c:	7b5a      	ldrb	r2, [r3, #13]
	return list->head == list;
    620e:	4608      	mov	r0, r1
    6210:	f062 027f 	orn	r2, r2, #127	; 0x7f
    6214:	735a      	strb	r2, [r3, #13]
    6216:	f850 2f20 	ldr.w	r2, [r0, #32]!
	return (node == list->tail) ? NULL : node->next;
    621a:	6a4c      	ldr	r4, [r1, #36]	; 0x24
	return sys_dlist_is_empty(list) ? NULL : list->head;
    621c:	4282      	cmp	r2, r0
    621e:	bf08      	it	eq
    6220:	2200      	moveq	r2, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    6222:	b922      	cbnz	r2, 622e <z_impl_k_yield+0x46>
	node->prev = tail;
    6224:	e9c3 0400 	strd	r0, r4, [r3]
	tail->next = node;
    6228:	6023      	str	r3, [r4, #0]
	list->tail = node;
    622a:	624b      	str	r3, [r1, #36]	; 0x24
}
    622c:	e00c      	b.n	6248 <z_impl_k_yield+0x60>
	int32_t b1 = thread_1->base.prio;
    622e:	f993 600e 	ldrsb.w	r6, [r3, #14]
	int32_t b2 = thread_2->base.prio;
    6232:	f992 700e 	ldrsb.w	r7, [r2, #14]
	if (b1 != b2) {
    6236:	42be      	cmp	r6, r7
    6238:	d00e      	beq.n	6258 <z_impl_k_yield+0x70>
		if (z_sched_prio_cmp(thread, t) > 0) {
    623a:	42b7      	cmp	r7, r6
    623c:	dd0c      	ble.n	6258 <z_impl_k_yield+0x70>
	sys_dnode_t *const prev = successor->prev;
    623e:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
    6240:	e9c3 2100 	strd	r2, r1, [r3]
	prev->next = node;
    6244:	600b      	str	r3, [r1, #0]
	successor->prev = node;
    6246:	6053      	str	r3, [r2, #4]
	update_cache(1);
    6248:	2001      	movs	r0, #1
    624a:	f7ff fde3 	bl	5e14 <update_cache>
    624e:	4628      	mov	r0, r5
	z_swap(&sched_spinlock, key);
}
    6250:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    6254:	f7fb bbf2 	b.w	1a3c <arch_swap>
	return (node == list->tail) ? NULL : node->next;
    6258:	42a2      	cmp	r2, r4
    625a:	d0e3      	beq.n	6224 <z_impl_k_yield+0x3c>
    625c:	6812      	ldr	r2, [r2, #0]
    625e:	e7e0      	b.n	6222 <z_impl_k_yield+0x3a>
    6260:	20000d70 	.word	0x20000d70

00006264 <z_tick_sleep>:
	__ASSERT(!arch_is_in_isr(), "");

	LOG_DBG("thread %p for %lu ticks", _current, (unsigned long)ticks);

	/* wait of 0 ms is treated as a 'yield' */
	if (ticks == 0) {
    6264:	ea50 0301 	orrs.w	r3, r0, r1
{
    6268:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    626c:	4605      	mov	r5, r0
    626e:	460e      	mov	r6, r1
	if (ticks == 0) {
    6270:	d103      	bne.n	627a <z_tick_sleep+0x16>
	z_impl_k_yield();
    6272:	f7ff ffb9 	bl	61e8 <z_impl_k_yield>
		k_yield();
		return 0;
    6276:	2000      	movs	r0, #0
    6278:	e02c      	b.n	62d4 <z_tick_sleep+0x70>
	}

	k_timeout_t timeout = Z_TIMEOUT_TICKS(ticks);
	if (Z_TICK_ABS(ticks) <= 0) {
    627a:	1c83      	adds	r3, r0, #2
    627c:	f171 33ff 	sbcs.w	r3, r1, #4294967295
    6280:	db2a      	blt.n	62d8 <z_tick_sleep+0x74>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
    6282:	f002 f811 	bl	82a8 <sys_clock_tick_get_32>
    6286:	182c      	adds	r4, r5, r0
    6288:	f04f 0320 	mov.w	r3, #32
    628c:	f3ef 8811 	mrs	r8, BASEPRI
    6290:	f383 8812 	msr	BASEPRI_MAX, r3
    6294:	f3bf 8f6f 	isb	sy
	}

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

#if defined(CONFIG_TIMESLICING) && defined(CONFIG_SWAP_NONATOMIC)
	pending_current = _current;
    6298:	4f11      	ldr	r7, [pc, #68]	; (62e0 <z_tick_sleep+0x7c>)
    629a:	4b12      	ldr	r3, [pc, #72]	; (62e4 <z_tick_sleep+0x80>)
    629c:	68b8      	ldr	r0, [r7, #8]
    629e:	6018      	str	r0, [r3, #0]
#endif
	unready_thread(_current);
    62a0:	f7ff fe44 	bl	5f2c <unready_thread>
	z_add_thread_timeout(_current, timeout);
    62a4:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    62a6:	4910      	ldr	r1, [pc, #64]	; (62e8 <z_tick_sleep+0x84>)
    62a8:	462a      	mov	r2, r5
    62aa:	4633      	mov	r3, r6
    62ac:	3018      	adds	r0, #24
    62ae:	f000 f90f 	bl	64d0 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
    62b2:	68ba      	ldr	r2, [r7, #8]
	thread->base.thread_state |= _THREAD_SUSPENDED;
    62b4:	7b53      	ldrb	r3, [r2, #13]
    62b6:	f043 0310 	orr.w	r3, r3, #16
    62ba:	7353      	strb	r3, [r2, #13]
    62bc:	4640      	mov	r0, r8
    62be:	f7fb fbbd 	bl	1a3c <arch_swap>

	(void)z_swap(&sched_spinlock, key);

	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");

	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
    62c2:	f001 fff1 	bl	82a8 <sys_clock_tick_get_32>
    62c6:	1a20      	subs	r0, r4, r0
    62c8:	eb63 0303 	sbc.w	r3, r3, r3
	if (ticks > 0) {
    62cc:	2801      	cmp	r0, #1
    62ce:	f173 0300 	sbcs.w	r3, r3, #0
    62d2:	dbd0      	blt.n	6276 <z_tick_sleep+0x12>
		return ticks;
	}
#endif

	return 0;
}
    62d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		expected_wakeup_ticks = Z_TICK_ABS(ticks);
    62d8:	f06f 0401 	mvn.w	r4, #1
    62dc:	1a24      	subs	r4, r4, r0
    62de:	e7d3      	b.n	6288 <z_tick_sleep+0x24>
    62e0:	20000d70 	.word	0x20000d70
    62e4:	20000da4 	.word	0x20000da4
    62e8:	0000817d 	.word	0x0000817d

000062ec <z_impl_k_sleep>:
	__ASSERT(!arch_is_in_isr(), "");

	SYS_PORT_TRACING_FUNC_ENTER(k_thread, sleep, timeout);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    62ec:	f1b1 3fff 	cmp.w	r1, #4294967295
    62f0:	bf08      	it	eq
    62f2:	f1b0 3fff 	cmpeq.w	r0, #4294967295
{
    62f6:	b508      	push	{r3, lr}
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    62f8:	d106      	bne.n	6308 <z_impl_k_sleep+0x1c>
		k_thread_suspend(_current);
    62fa:	4b08      	ldr	r3, [pc, #32]	; (631c <z_impl_k_sleep+0x30>)
    62fc:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
    62fe:	f7ff ff09 	bl	6114 <z_impl_k_thread_suspend>

		SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, (int32_t) K_TICKS_FOREVER);

		return (int32_t) K_TICKS_FOREVER;
    6302:	f04f 30ff 	mov.w	r0, #4294967295
	int32_t ret = k_ticks_to_ms_floor64(ticks);

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, ret);

	return ret;
}
    6306:	bd08      	pop	{r3, pc}
	ticks = z_tick_sleep(ticks);
    6308:	f7ff ffac 	bl	6264 <z_tick_sleep>
    630c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    6310:	fb80 0303 	smull	r0, r3, r0, r3
    6314:	0bc0      	lsrs	r0, r0, #15
    6316:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
	return ret;
    631a:	e7f4      	b.n	6306 <z_impl_k_sleep+0x1a>
    631c:	20000d70 	.word	0x20000d70

00006320 <z_impl_z_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
    6320:	4b01      	ldr	r3, [pc, #4]	; (6328 <z_impl_z_current_get+0x8>)
    6322:	6898      	ldr	r0, [r3, #8]
    6324:	4770      	bx	lr
    6326:	bf00      	nop
    6328:	20000d70 	.word	0x20000d70

0000632c <z_thread_abort>:
#endif
	}
}

void z_thread_abort(struct k_thread *thread)
{
    632c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6330:	4604      	mov	r4, r0
    6332:	f04f 0320 	mov.w	r3, #32
    6336:	f3ef 8611 	mrs	r6, BASEPRI
    633a:	f383 8812 	msr	BASEPRI_MAX, r3
    633e:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.user_options & K_ESSENTIAL) != 0) {
    6342:	7b03      	ldrb	r3, [r0, #12]
    6344:	07d9      	lsls	r1, r3, #31
    6346:	d50b      	bpl.n	6360 <z_thread_abort+0x34>
	__asm__ volatile(
    6348:	f386 8811 	msr	BASEPRI, r6
    634c:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&sched_spinlock, key);
		__ASSERT(false, "aborting essential thread %p", thread);
		k_panic();
    6350:	4040      	eors	r0, r0
    6352:	f380 8811 	msr	BASEPRI, r0
    6356:	f04f 0004 	mov.w	r0, #4
    635a:	df02      	svc	2
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
    635c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
    6360:	7b43      	ldrb	r3, [r0, #13]
    6362:	071a      	lsls	r2, r3, #28
    6364:	d504      	bpl.n	6370 <z_thread_abort+0x44>
    6366:	f386 8811 	msr	BASEPRI, r6
    636a:	f3bf 8f6f 	isb	sy
    636e:	e7f5      	b.n	635c <z_thread_abort+0x30>
		thread->base.thread_state &= ~_THREAD_ABORTING;
    6370:	f023 0220 	bic.w	r2, r3, #32
    6374:	f042 0108 	orr.w	r1, r2, #8
		if (z_is_thread_queued(thread)) {
    6378:	09d2      	lsrs	r2, r2, #7
    637a:	d120      	bne.n	63be <z_thread_abort+0x92>
		thread->base.thread_state &= ~_THREAD_ABORTING;
    637c:	7341      	strb	r1, [r0, #13]
		if (thread->base.pended_on != NULL) {
    637e:	68a3      	ldr	r3, [r4, #8]
    6380:	b113      	cbz	r3, 6388 <z_thread_abort+0x5c>
			unpend_thread_no_timeout(thread);
    6382:	4620      	mov	r0, r4
    6384:	f001 fe84 	bl	8090 <unpend_thread_no_timeout>
	return z_abort_timeout(&thread->base.timeout);
    6388:	f104 0018 	add.w	r0, r4, #24
    638c:	f001 ff66 	bl	825c <z_abort_timeout>
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
    6390:	f104 0758 	add.w	r7, r4, #88	; 0x58
    6394:	f04f 0800 	mov.w	r8, #0
	return list->head == list;
    6398:	6da5      	ldr	r5, [r4, #88]	; 0x58
	return sys_dlist_is_empty(list) ? NULL : list->head;
    639a:	42bd      	cmp	r5, r7
    639c:	d000      	beq.n	63a0 <z_thread_abort+0x74>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
    639e:	b9b5      	cbnz	r5, 63ce <z_thread_abort+0xa2>
		update_cache(1);
    63a0:	2001      	movs	r0, #1
    63a2:	f7ff fd37 	bl	5e14 <update_cache>
	if (thread == _current && !arch_is_in_isr()) {
    63a6:	4b10      	ldr	r3, [pc, #64]	; (63e8 <z_thread_abort+0xbc>)
    63a8:	689b      	ldr	r3, [r3, #8]
    63aa:	42a3      	cmp	r3, r4
    63ac:	d1db      	bne.n	6366 <z_thread_abort+0x3a>
    63ae:	f3ef 8305 	mrs	r3, IPSR
    63b2:	2b00      	cmp	r3, #0
    63b4:	d1d7      	bne.n	6366 <z_thread_abort+0x3a>
    63b6:	4630      	mov	r0, r6
    63b8:	f7fb fb40 	bl	1a3c <arch_swap>
	return ret;
    63bc:	e7d3      	b.n	6366 <z_thread_abort+0x3a>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    63be:	f003 035f 	and.w	r3, r3, #95	; 0x5f
    63c2:	f043 0308 	orr.w	r3, r3, #8
    63c6:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    63c8:	f001 fe5a 	bl	8080 <sys_dlist_remove>
}
    63cc:	e7d7      	b.n	637e <z_thread_abort+0x52>
		unpend_thread_no_timeout(thread);
    63ce:	4628      	mov	r0, r5
    63d0:	f001 fe5e 	bl	8090 <unpend_thread_no_timeout>
    63d4:	f105 0018 	add.w	r0, r5, #24
    63d8:	f001 ff40 	bl	825c <z_abort_timeout>
    63dc:	f8c5 8078 	str.w	r8, [r5, #120]	; 0x78
		ready_thread(thread);
    63e0:	4628      	mov	r0, r5
    63e2:	f7ff fd6f 	bl	5ec4 <ready_thread>
    63e6:	e7d7      	b.n	6398 <z_thread_abort+0x6c>
    63e8:	20000d70 	.word	0x20000d70

000063ec <z_sched_wait>:
	return ret;
}

int z_sched_wait(struct k_spinlock *lock, k_spinlock_key_t key,
		 _wait_q_t *wait_q, k_timeout_t timeout, void **data)
{
    63ec:	b5d3      	push	{r0, r1, r4, r6, r7, lr}
	int ret = z_pend_curr(lock, key, wait_q, timeout);
    63ee:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
{
    63f2:	9c08      	ldr	r4, [sp, #32]
	int ret = z_pend_curr(lock, key, wait_q, timeout);
    63f4:	e9cd 6700 	strd	r6, r7, [sp]
    63f8:	f7ff fdf8 	bl	5fec <z_pend_curr>

	if (data != NULL) {
    63fc:	b11c      	cbz	r4, 6406 <z_sched_wait+0x1a>
		*data = _current->base.swap_data;
    63fe:	4b03      	ldr	r3, [pc, #12]	; (640c <z_sched_wait+0x20>)
    6400:	689b      	ldr	r3, [r3, #8]
    6402:	695b      	ldr	r3, [r3, #20]
    6404:	6023      	str	r3, [r4, #0]
	}
	return ret;
}
    6406:	b002      	add	sp, #8
    6408:	bdd0      	pop	{r4, r6, r7, pc}
    640a:	bf00      	nop
    640c:	20000d70 	.word	0x20000d70

00006410 <z_data_copy>:
 * @brief Copy the data section from ROM to RAM
 *
 * This routine copies the data section from ROM to RAM.
 */
void z_data_copy(void)
{
    6410:	b508      	push	{r3, lr}
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
		       __data_region_end - __data_region_start);
    6412:	4806      	ldr	r0, [pc, #24]	; (642c <z_data_copy+0x1c>)
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
    6414:	4a06      	ldr	r2, [pc, #24]	; (6430 <z_data_copy+0x20>)
    6416:	4907      	ldr	r1, [pc, #28]	; (6434 <z_data_copy+0x24>)
    6418:	1a12      	subs	r2, r2, r0
    641a:	f001 fdaa 	bl	7f72 <z_early_memcpy>
#else
	z_early_memcpy(&_app_smem_start, &_app_smem_rom_start,
		       _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
    641e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_early_memcpy(&__ramfunc_start, &__ramfunc_load_start,
    6422:	4a05      	ldr	r2, [pc, #20]	; (6438 <z_data_copy+0x28>)
    6424:	4905      	ldr	r1, [pc, #20]	; (643c <z_data_copy+0x2c>)
    6426:	4806      	ldr	r0, [pc, #24]	; (6440 <z_data_copy+0x30>)
    6428:	f001 bda3 	b.w	7f72 <z_early_memcpy>
    642c:	20000000 	.word	0x20000000
    6430:	2000032c 	.word	0x2000032c
    6434:	00008cd0 	.word	0x00008cd0
    6438:	00000000 	.word	0x00000000
    643c:	00008cd0 	.word	0x00008cd0
    6440:	20000000 	.word	0x20000000

00006444 <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
    6444:	4b03      	ldr	r3, [pc, #12]	; (6454 <elapsed+0x10>)
    6446:	681b      	ldr	r3, [r3, #0]
    6448:	b90b      	cbnz	r3, 644e <elapsed+0xa>
    644a:	f7fd bd01 	b.w	3e50 <sys_clock_elapsed>
}
    644e:	2000      	movs	r0, #0
    6450:	4770      	bx	lr
    6452:	bf00      	nop
    6454:	20000db0 	.word	0x20000db0

00006458 <next_timeout>:

static int32_t next_timeout(void)
{
    6458:	b510      	push	{r4, lr}
	return list->head == list;
    645a:	4b0e      	ldr	r3, [pc, #56]	; (6494 <next_timeout+0x3c>)
    645c:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    645e:	429c      	cmp	r4, r3
    6460:	d104      	bne.n	646c <next_timeout+0x14>
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
    6462:	f7ff ffef 	bl	6444 <elapsed>
	int32_t ret;

	if ((to == NULL) ||
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
		ret = MAX_WAIT;
    6466:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
	} else {
		ret = MAX(0, to->dticks - ticks_elapsed);
	}

	return ret;
}
    646a:	bd10      	pop	{r4, pc}
	int32_t ticks_elapsed = elapsed();
    646c:	f7ff ffea 	bl	6444 <elapsed>
	if ((to == NULL) ||
    6470:	2c00      	cmp	r4, #0
    6472:	d0f8      	beq.n	6466 <next_timeout+0xe>
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
    6474:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
    6478:	1a1b      	subs	r3, r3, r0
    647a:	eb62 72e0 	sbc.w	r2, r2, r0, asr #31
	if ((to == NULL) ||
    647e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
    6482:	f172 0100 	sbcs.w	r1, r2, #0
    6486:	daee      	bge.n	6466 <next_timeout+0xe>
		ret = MAX(0, to->dticks - ticks_elapsed);
    6488:	2a00      	cmp	r2, #0
    648a:	bfac      	ite	ge
    648c:	4618      	movge	r0, r3
    648e:	2000      	movlt	r0, #0
	return ret;
    6490:	e7eb      	b.n	646a <next_timeout+0x12>
    6492:	bf00      	nop
    6494:	2000024c 	.word	0x2000024c

00006498 <remove_timeout>:
{
    6498:	b530      	push	{r4, r5, lr}
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    649a:	b170      	cbz	r0, 64ba <remove_timeout+0x22>
	return (node == list->tail) ? NULL : node->next;
    649c:	4b0b      	ldr	r3, [pc, #44]	; (64cc <remove_timeout+0x34>)
    649e:	685b      	ldr	r3, [r3, #4]
    64a0:	4298      	cmp	r0, r3
    64a2:	d00a      	beq.n	64ba <remove_timeout+0x22>
    64a4:	6803      	ldr	r3, [r0, #0]
	if (next(t) != NULL) {
    64a6:	b143      	cbz	r3, 64ba <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
    64a8:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
    64ac:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
    64b0:	1912      	adds	r2, r2, r4
    64b2:	eb41 0105 	adc.w	r1, r1, r5
    64b6:	e9c3 2104 	strd	r2, r1, [r3, #16]
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
	sys_dnode_t *const next = node->next;
    64ba:	e9d0 3200 	ldrd	r3, r2, [r0]

	prev->next = next;
    64be:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    64c0:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    64c2:	2300      	movs	r3, #0
	node->prev = NULL;
    64c4:	e9c0 3300 	strd	r3, r3, [r0]
}
    64c8:	bd30      	pop	{r4, r5, pc}
    64ca:	bf00      	nop
    64cc:	2000024c 	.word	0x2000024c

000064d0 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    64d0:	f1b3 3fff 	cmp.w	r3, #4294967295
    64d4:	bf08      	it	eq
    64d6:	f1b2 3fff 	cmpeq.w	r2, #4294967295
{
    64da:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    64dc:	4604      	mov	r4, r0
    64de:	461d      	mov	r5, r3
    64e0:	4616      	mov	r6, r2
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    64e2:	d05c      	beq.n	659e <z_add_timeout+0xce>
#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
    64e4:	6081      	str	r1, [r0, #8]
	__asm__ volatile(
    64e6:	f04f 0320 	mov.w	r3, #32
    64ea:	f3ef 8711 	mrs	r7, BASEPRI
    64ee:	f383 8812 	msr	BASEPRI_MAX, r3
    64f2:	f3bf 8f6f 	isb	sy

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
    64f6:	3201      	adds	r2, #1
    64f8:	f175 33ff 	sbcs.w	r3, r5, #4294967295
    64fc:	da24      	bge.n	6548 <z_add_timeout+0x78>
		    Z_TICK_ABS(timeout.ticks) >= 0) {
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
    64fe:	492d      	ldr	r1, [pc, #180]	; (65b4 <z_add_timeout+0xe4>)
    6500:	e9d1 2000 	ldrd	r2, r0, [r1]
    6504:	f06f 0301 	mvn.w	r3, #1
    6508:	1a9b      	subs	r3, r3, r2
    650a:	f04f 32ff 	mov.w	r2, #4294967295
    650e:	eb62 0000 	sbc.w	r0, r2, r0
    6512:	1b9e      	subs	r6, r3, r6
    6514:	eb60 0005 	sbc.w	r0, r0, r5

			to->dticks = MAX(1, ticks);
    6518:	2e01      	cmp	r6, #1
    651a:	f170 0300 	sbcs.w	r3, r0, #0
    651e:	da01      	bge.n	6524 <z_add_timeout+0x54>
    6520:	2601      	movs	r6, #1
    6522:	2000      	movs	r0, #0
    6524:	e9c4 6004 	strd	r6, r0, [r4, #16]
	return list->head == list;
    6528:	4e23      	ldr	r6, [pc, #140]	; (65b8 <z_add_timeout+0xe8>)
    652a:	f8d6 c000 	ldr.w	ip, [r6]
	return (node == list->tail) ? NULL : node->next;
    652e:	6875      	ldr	r5, [r6, #4]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    6530:	45b4      	cmp	ip, r6
    6532:	bf08      	it	eq
    6534:	f04f 0c00 	moveq.w	ip, #0
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
		}

		for (t = first(); t != NULL; t = next(t)) {
    6538:	f1bc 0f00 	cmp.w	ip, #0
    653c:	d10d      	bne.n	655a <z_add_timeout+0x8a>
	node->prev = tail;
    653e:	e9c4 6500 	strd	r6, r5, [r4]
	tail->next = node;
    6542:	602c      	str	r4, [r5, #0]
	list->tail = node;
    6544:	6074      	str	r4, [r6, #4]
}
    6546:	e01c      	b.n	6582 <z_add_timeout+0xb2>
			to->dticks = timeout.ticks + 1 + elapsed();
    6548:	f7ff ff7c 	bl	6444 <elapsed>
    654c:	3601      	adds	r6, #1
    654e:	f145 0500 	adc.w	r5, r5, #0
    6552:	1836      	adds	r6, r6, r0
    6554:	eb45 70e0 	adc.w	r0, r5, r0, asr #31
    6558:	e7e4      	b.n	6524 <z_add_timeout+0x54>
			if (t->dticks > to->dticks) {
    655a:	e9dc 2004 	ldrd	r2, r0, [ip, #16]
    655e:	e9d4 3104 	ldrd	r3, r1, [r4, #16]
    6562:	4293      	cmp	r3, r2
    6564:	eb71 0e00 	sbcs.w	lr, r1, r0
    6568:	da1a      	bge.n	65a0 <z_add_timeout+0xd0>
				t->dticks -= to->dticks;
    656a:	1ad2      	subs	r2, r2, r3
	sys_dnode_t *const prev = successor->prev;
    656c:	f8dc 3004 	ldr.w	r3, [ip, #4]
    6570:	eb60 0001 	sbc.w	r0, r0, r1
    6574:	e9cc 2004 	strd	r2, r0, [ip, #16]
	node->next = successor;
    6578:	e9c4 c300 	strd	ip, r3, [r4]
	prev->next = node;
    657c:	601c      	str	r4, [r3, #0]
	successor->prev = node;
    657e:	f8cc 4004 	str.w	r4, [ip, #4]
	return list->head == list;
    6582:	6833      	ldr	r3, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    6584:	42b3      	cmp	r3, r6
    6586:	d006      	beq.n	6596 <z_add_timeout+0xc6>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
    6588:	429c      	cmp	r4, r3
    658a:	d104      	bne.n	6596 <z_add_timeout+0xc6>
			sys_clock_set_timeout(next_timeout(), false);
    658c:	f7ff ff64 	bl	6458 <next_timeout>
    6590:	2100      	movs	r1, #0
    6592:	f7fd fc2b 	bl	3dec <sys_clock_set_timeout>
	__asm__ volatile(
    6596:	f387 8811 	msr	BASEPRI, r7
    659a:	f3bf 8f6f 	isb	sy
		}
	}
}
    659e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			to->dticks -= t->dticks;
    65a0:	1a9b      	subs	r3, r3, r2
    65a2:	eb61 0100 	sbc.w	r1, r1, r0
	return (node == list->tail) ? NULL : node->next;
    65a6:	45ac      	cmp	ip, r5
    65a8:	e9c4 3104 	strd	r3, r1, [r4, #16]
    65ac:	d0c7      	beq.n	653e <z_add_timeout+0x6e>
    65ae:	f8dc c000 	ldr.w	ip, [ip]
    65b2:	e7c1      	b.n	6538 <z_add_timeout+0x68>
    65b4:	200004e8 	.word	0x200004e8
    65b8:	2000024c 	.word	0x2000024c

000065bc <sys_clock_announce>:
	}
	return ret;
}

void sys_clock_announce(int32_t ticks)
{
    65bc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	__asm__ volatile(
    65c0:	f04f 0320 	mov.w	r3, #32
    65c4:	f3ef 8711 	mrs	r7, BASEPRI
    65c8:	f383 8812 	msr	BASEPRI_MAX, r3
    65cc:	f3bf 8f6f 	isb	sy
	return list->head == list;
    65d0:	f8df 90b8 	ldr.w	r9, [pc, #184]	; 668c <sys_clock_announce+0xd0>
		announce_remaining += ticks;
		k_spin_unlock(&timeout_lock, key);
		return;
	}

	announce_remaining = ticks;
    65d4:	4e2b      	ldr	r6, [pc, #172]	; (6684 <sys_clock_announce+0xc8>)
	for (t = first();
	     (t != NULL) && (t->dticks <= announce_remaining);
	     t = first()) {
		int dt = t->dticks;

		curr_tick += dt;
    65d6:	4c2c      	ldr	r4, [pc, #176]	; (6688 <sys_clock_announce+0xcc>)
	announce_remaining = ticks;
    65d8:	6030      	str	r0, [r6, #0]
    65da:	f8d9 0000 	ldr.w	r0, [r9]
		t->dticks = 0;
    65de:	f04f 0a00 	mov.w	sl, #0
	return sys_dlist_is_empty(list) ? NULL : list->head;
    65e2:	4548      	cmp	r0, r9
    65e4:	bf08      	it	eq
    65e6:	2000      	moveq	r0, #0
    65e8:	f04f 0b00 	mov.w	fp, #0
		curr_tick += dt;
    65ec:	e9d4 1e00 	ldrd	r1, lr, [r4]
	     (t != NULL) && (t->dticks <= announce_remaining);
    65f0:	6833      	ldr	r3, [r6, #0]
    65f2:	463d      	mov	r5, r7
    65f4:	b388      	cbz	r0, 665a <sys_clock_announce+0x9e>
    65f6:	e9d0 8704 	ldrd	r8, r7, [r0, #16]
    65fa:	ea4f 7ce3 	mov.w	ip, r3, asr #31
    65fe:	4543      	cmp	r3, r8
    6600:	eb7c 0207 	sbcs.w	r2, ip, r7
    6604:	da06      	bge.n	6614 <sys_clock_announce+0x58>
		key = k_spin_lock(&timeout_lock);
		announce_remaining -= dt;
	}

	if (t != NULL) {
		t->dticks -= announce_remaining;
    6606:	ebb8 0203 	subs.w	r2, r8, r3
    660a:	eb67 070c 	sbc.w	r7, r7, ip
    660e:	e9c0 2704 	strd	r2, r7, [r0, #16]
    6612:	e022      	b.n	665a <sys_clock_announce+0x9e>
		curr_tick += dt;
    6614:	eb18 0101 	adds.w	r1, r8, r1
    6618:	eb4e 73e8 	adc.w	r3, lr, r8, asr #31
		t->dticks = 0;
    661c:	e9c0 ab04 	strd	sl, fp, [r0, #16]
		curr_tick += dt;
    6620:	e9c4 1300 	strd	r1, r3, [r4]
		remove_timeout(t);
    6624:	f7ff ff38 	bl	6498 <remove_timeout>
	__asm__ volatile(
    6628:	f385 8811 	msr	BASEPRI, r5
    662c:	f3bf 8f6f 	isb	sy
		t->fn(t);
    6630:	6883      	ldr	r3, [r0, #8]
    6632:	4798      	blx	r3
	__asm__ volatile(
    6634:	f04f 0320 	mov.w	r3, #32
    6638:	f3ef 8511 	mrs	r5, BASEPRI
    663c:	f383 8812 	msr	BASEPRI_MAX, r3
    6640:	f3bf 8f6f 	isb	sy
		announce_remaining -= dt;
    6644:	6833      	ldr	r3, [r6, #0]
	return list->head == list;
    6646:	f8d9 0000 	ldr.w	r0, [r9]
    664a:	eba3 0308 	sub.w	r3, r3, r8
	return sys_dlist_is_empty(list) ? NULL : list->head;
    664e:	4548      	cmp	r0, r9
	k.key = arch_irq_lock();
    6650:	462f      	mov	r7, r5
    6652:	6033      	str	r3, [r6, #0]
    6654:	d1ca      	bne.n	65ec <sys_clock_announce+0x30>
		curr_tick += dt;
    6656:	e9d4 1e00 	ldrd	r1, lr, [r4]
	}

	curr_tick += announce_remaining;
    665a:	1859      	adds	r1, r3, r1
    665c:	eb4e 73e3 	adc.w	r3, lr, r3, asr #31
    6660:	e9c4 1300 	strd	r1, r3, [r4]
	announce_remaining = 0;
    6664:	2400      	movs	r4, #0
    6666:	6034      	str	r4, [r6, #0]

	sys_clock_set_timeout(next_timeout(), false);
    6668:	f7ff fef6 	bl	6458 <next_timeout>
    666c:	4621      	mov	r1, r4
    666e:	f7fd fbbd 	bl	3dec <sys_clock_set_timeout>
	__asm__ volatile(
    6672:	f385 8811 	msr	BASEPRI, r5
    6676:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&timeout_lock, key);

#ifdef CONFIG_TIMESLICING
	z_time_slice();
#endif
}
    667a:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	z_time_slice();
    667e:	f7ff bc85 	b.w	5f8c <z_time_slice>
    6682:	bf00      	nop
    6684:	20000db0 	.word	0x20000db0
    6688:	200004e8 	.word	0x200004e8
    668c:	2000024c 	.word	0x2000024c

00006690 <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
    6690:	b510      	push	{r4, lr}
	__asm__ volatile(
    6692:	f04f 0320 	mov.w	r3, #32
    6696:	f3ef 8411 	mrs	r4, BASEPRI
    669a:	f383 8812 	msr	BASEPRI_MAX, r3
    669e:	f3bf 8f6f 	isb	sy
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + elapsed();
    66a2:	f7ff fecf 	bl	6444 <elapsed>
    66a6:	4a06      	ldr	r2, [pc, #24]	; (66c0 <sys_clock_tick_get+0x30>)
    66a8:	4603      	mov	r3, r0
    66aa:	e9d2 0100 	ldrd	r0, r1, [r2]
    66ae:	1818      	adds	r0, r3, r0
    66b0:	eb41 71e3 	adc.w	r1, r1, r3, asr #31
	__asm__ volatile(
    66b4:	f384 8811 	msr	BASEPRI, r4
    66b8:	f3bf 8f6f 	isb	sy
	}
	return t;
}
    66bc:	bd10      	pop	{r4, pc}
    66be:	bf00      	nop
    66c0:	200004e8 	.word	0x200004e8

000066c4 <z_timer_expiration_handler>:
 * @brief Handle expiration of a kernel timer object.
 *
 * @param t  Timeout used by the timer.
 */
void z_timer_expiration_handler(struct _timeout *t)
{
    66c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    66c6:	4604      	mov	r4, r0
	__asm__ volatile(
    66c8:	f04f 0320 	mov.w	r3, #32
    66cc:	f3ef 8711 	mrs	r7, BASEPRI
    66d0:	f383 8812 	msr	BASEPRI_MAX, r3
    66d4:	f3bf 8f6f 	isb	sy
	 * interrupt. Then, the timeout structure for this timer will turn out
	 * to be linked to the timeout list. And in such case, since the timer
	 * was restarted, its expiration handler should not be executed then,
	 * so the function exits immediately.
	 */
	if (sys_dnode_is_linked(&t->node)) {
    66d8:	6802      	ldr	r2, [r0, #0]
    66da:	b122      	cbz	r2, 66e6 <z_timer_expiration_handler+0x22>
	__asm__ volatile(
    66dc:	f387 8811 	msr	BASEPRI, r7
    66e0:	f3bf 8f6f 	isb	sy
	arch_thread_return_value_set(thread, 0);

	k_spin_unlock(&lock, key);

	z_ready_thread(thread);
}
    66e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
    66e6:	e9d0 360a 	ldrd	r3, r6, [r0, #40]	; 0x28
    66ea:	1c58      	adds	r0, r3, #1
    66ec:	f146 0100 	adc.w	r1, r6, #0
    66f0:	2802      	cmp	r0, #2
    66f2:	f171 0100 	sbcs.w	r1, r1, #0
    66f6:	d327      	bcc.n	6748 <z_timer_expiration_handler+0x84>
		next.ticks = MAX(next.ticks - 1, 0);
    66f8:	2b01      	cmp	r3, #1
    66fa:	f176 0100 	sbcs.w	r1, r6, #0
    66fe:	bfbc      	itt	lt
    6700:	2301      	movlt	r3, #1
    6702:	4616      	movlt	r6, r2
    6704:	1e5d      	subs	r5, r3, #1
    6706:	f146 36ff 	adc.w	r6, r6, #4294967295
	return z_impl_k_uptime_ticks();
    670a:	f001 fdd1 	bl	82b0 <z_impl_k_uptime_ticks>
		next = K_TIMEOUT_ABS_TICKS(k_uptime_ticks() + 1 + next.ticks);
    670e:	3001      	adds	r0, #1
    6710:	f141 0100 	adc.w	r1, r1, #0
    6714:	1940      	adds	r0, r0, r5
    6716:	eb46 0101 	adc.w	r1, r6, r1
    671a:	2801      	cmp	r0, #1
    671c:	f171 0100 	sbcs.w	r1, r1, #0
    6720:	db3a      	blt.n	6798 <z_timer_expiration_handler+0xd4>
    6722:	f001 fdc5 	bl	82b0 <z_impl_k_uptime_ticks>
    6726:	3001      	adds	r0, #1
    6728:	f141 0100 	adc.w	r1, r1, #0
    672c:	f06f 0201 	mvn.w	r2, #1
    6730:	1940      	adds	r0, r0, r5
    6732:	eb46 0301 	adc.w	r3, r6, r1
    6736:	1a12      	subs	r2, r2, r0
    6738:	f04f 31ff 	mov.w	r1, #4294967295
    673c:	eb61 0303 	sbc.w	r3, r1, r3
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
    6740:	4918      	ldr	r1, [pc, #96]	; (67a4 <z_timer_expiration_handler+0xe0>)
    6742:	4620      	mov	r0, r4
    6744:	f7ff fec4 	bl	64d0 <z_add_timeout>
	timer->status += 1U;
    6748:	6b23      	ldr	r3, [r4, #48]	; 0x30
    674a:	3301      	adds	r3, #1
    674c:	6323      	str	r3, [r4, #48]	; 0x30
	if (timer->expiry_fn != NULL) {
    674e:	6a23      	ldr	r3, [r4, #32]
    6750:	b173      	cbz	r3, 6770 <z_timer_expiration_handler+0xac>
    6752:	f387 8811 	msr	BASEPRI, r7
    6756:	f3bf 8f6f 	isb	sy
		timer->expiry_fn(timer);
    675a:	6a23      	ldr	r3, [r4, #32]
    675c:	4620      	mov	r0, r4
    675e:	4798      	blx	r3
	__asm__ volatile(
    6760:	f04f 0320 	mov.w	r3, #32
    6764:	f3ef 8711 	mrs	r7, BASEPRI
    6768:	f383 8812 	msr	BASEPRI_MAX, r3
    676c:	f3bf 8f6f 	isb	sy
	return list->head == list;
    6770:	f854 5f18 	ldr.w	r5, [r4, #24]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    6774:	42a5      	cmp	r5, r4
    6776:	d0b1      	beq.n	66dc <z_timer_expiration_handler+0x18>
	if (thread == NULL) {
    6778:	2d00      	cmp	r5, #0
    677a:	d0af      	beq.n	66dc <z_timer_expiration_handler+0x18>
	z_unpend_thread_no_timeout(thread);
    677c:	4628      	mov	r0, r5
    677e:	f001 fcc9 	bl	8114 <z_unpend_thread_no_timeout>
    6782:	2300      	movs	r3, #0
    6784:	67ab      	str	r3, [r5, #120]	; 0x78
	__asm__ volatile(
    6786:	f387 8811 	msr	BASEPRI, r7
    678a:	f3bf 8f6f 	isb	sy
	z_ready_thread(thread);
    678e:	4628      	mov	r0, r5
}
    6790:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	z_ready_thread(thread);
    6794:	f001 bcae 	b.w	80f4 <z_ready_thread>
		next = K_TIMEOUT_ABS_TICKS(k_uptime_ticks() + 1 + next.ticks);
    6798:	f06f 0201 	mvn.w	r2, #1
    679c:	f04f 33ff 	mov.w	r3, #4294967295
    67a0:	e7ce      	b.n	6740 <z_timer_expiration_handler+0x7c>
    67a2:	bf00      	nop
    67a4:	000066c5 	.word	0x000066c5

000067a8 <z_impl_k_timer_start>:
}


void z_impl_k_timer_start(struct k_timer *timer, k_timeout_t duration,
			  k_timeout_t period)
{
    67a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, start, timer, duration, period);

	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
    67ac:	f1b3 3fff 	cmp.w	r3, #4294967295
    67b0:	bf08      	it	eq
    67b2:	f1b2 3fff 	cmpeq.w	r2, #4294967295
{
    67b6:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
    67ba:	4605      	mov	r5, r0
    67bc:	461c      	mov	r4, r3
    67be:	4617      	mov	r7, r2
    67c0:	461e      	mov	r6, r3
	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
    67c2:	d01b      	beq.n	67fc <z_impl_k_timer_start+0x54>
	 * for backwards compatibility.  This is unfortunate
	 * (i.e. k_timer_start() doesn't treat its initial sleep
	 * argument the same way k_sleep() does), but historical.  The
	 * timer_api test relies on this behavior.
	 */
	if (Z_TICK_ABS(duration.ticks) < 0) {
    67c4:	1c53      	adds	r3, r2, #1
    67c6:	f174 33ff 	sbcs.w	r3, r4, #4294967295
    67ca:	db08      	blt.n	67de <z_impl_k_timer_start+0x36>
		duration.ticks = MAX(duration.ticks - 1, 0);
    67cc:	2a01      	cmp	r2, #1
    67ce:	f174 0300 	sbcs.w	r3, r4, #0
    67d2:	bfbc      	itt	lt
    67d4:	2201      	movlt	r2, #1
    67d6:	2400      	movlt	r4, #0
    67d8:	1e57      	subs	r7, r2, #1
    67da:	f144 36ff 	adc.w	r6, r4, #4294967295
	}

	(void)z_abort_timeout(&timer->timeout);
    67de:	4628      	mov	r0, r5
    67e0:	f001 fd3c 	bl	825c <z_abort_timeout>
	timer->period = period;
    67e4:	e9c5 890a 	strd	r8, r9, [r5, #40]	; 0x28
	timer->status = 0U;
    67e8:	2300      	movs	r3, #0
    67ea:	632b      	str	r3, [r5, #48]	; 0x30

	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
    67ec:	463a      	mov	r2, r7
    67ee:	4633      	mov	r3, r6
    67f0:	4628      	mov	r0, r5
    67f2:	4903      	ldr	r1, [pc, #12]	; (6800 <z_impl_k_timer_start+0x58>)
		     duration);
}
    67f4:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
    67f8:	f7ff be6a 	b.w	64d0 <z_add_timeout>
}
    67fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    6800:	000066c5 	.word	0x000066c5

00006804 <k_thread_system_pool_assign>:
	return ret;
}

void k_thread_system_pool_assign(struct k_thread *thread)
{
	thread->resource_pool = _SYSTEM_HEAP;
    6804:	4b01      	ldr	r3, [pc, #4]	; (680c <k_thread_system_pool_assign+0x8>)
    6806:	6703      	str	r3, [r0, #112]	; 0x70
}
    6808:	4770      	bx	lr
    680a:	bf00      	nop
    680c:	200002c8 	.word	0x200002c8

00006810 <boot_banner>:
	printk("***** delaying boot " DELAY_STR "ms (per build configuration) *****\n");
	k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
#endif /* defined(CONFIG_BOOT_DELAY) && (CONFIG_BOOT_DELAY > 0) */

#if CONFIG_BOOT_BANNER
	printk("*** Booting Zephyr OS build " BANNER_VERSION BANNER_POSTFIX " ***\n");
    6810:	4801      	ldr	r0, [pc, #4]	; (6818 <boot_banner+0x8>)
    6812:	f000 ba1f 	b.w	6c54 <printk>
    6816:	bf00      	nop
    6818:	00008c99 	.word	0x00008c99

0000681c <statics_init>:

	SYS_PORT_TRACING_OBJ_INIT(k_heap, h);
}

static int statics_init(void)
{
    681c:	b538      	push	{r3, r4, r5, lr}
	STRUCT_SECTION_FOREACH(k_heap, h) {
    681e:	4c06      	ldr	r4, [pc, #24]	; (6838 <statics_init+0x1c>)
    6820:	4d06      	ldr	r5, [pc, #24]	; (683c <statics_init+0x20>)
    6822:	42ac      	cmp	r4, r5
    6824:	d301      	bcc.n	682a <statics_init+0xe>
		{
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
		}
	}
	return 0;
}
    6826:	2000      	movs	r0, #0
    6828:	bd38      	pop	{r3, r4, r5, pc}
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
    682a:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
    682e:	4620      	mov	r0, r4
    6830:	f001 fd61 	bl	82f6 <k_heap_init>
	STRUCT_SECTION_FOREACH(k_heap, h) {
    6834:	3414      	adds	r4, #20
    6836:	e7f4      	b.n	6822 <statics_init+0x6>
    6838:	200002c8 	.word	0x200002c8
    683c:	200002dc 	.word	0x200002dc

00006840 <k_sys_work_q_init>:
			     CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(void)
{
    6840:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	struct k_work_queue_config cfg = {
    6842:	4b09      	ldr	r3, [pc, #36]	; (6868 <k_sys_work_q_init+0x28>)
    6844:	9302      	str	r3, [sp, #8]
		.name = "sysworkq",
		.no_yield = IS_ENABLED(CONFIG_SYSTEM_WORKQUEUE_NO_YIELD),
	};

	k_work_queue_start(&k_sys_work_q,
    6846:	ab02      	add	r3, sp, #8
	struct k_work_queue_config cfg = {
    6848:	2400      	movs	r4, #0
	k_work_queue_start(&k_sys_work_q,
    684a:	9300      	str	r3, [sp, #0]
    684c:	4907      	ldr	r1, [pc, #28]	; (686c <k_sys_work_q_init+0x2c>)
    684e:	4808      	ldr	r0, [pc, #32]	; (6870 <k_sys_work_q_init+0x30>)
	struct k_work_queue_config cfg = {
    6850:	f88d 400c 	strb.w	r4, [sp, #12]
	k_work_queue_start(&k_sys_work_q,
    6854:	f04f 33ff 	mov.w	r3, #4294967295
    6858:	f44f 6280 	mov.w	r2, #1024	; 0x400
    685c:	f7ff fa4c 	bl	5cf8 <k_work_queue_start>
			    sys_work_q_stack,
			    K_KERNEL_STACK_SIZEOF(sys_work_q_stack),
			    CONFIG_SYSTEM_WORKQUEUE_PRIORITY, &cfg);
	return 0;
}
    6860:	4620      	mov	r0, r4
    6862:	b004      	add	sp, #16
    6864:	bd10      	pop	{r4, pc}
    6866:	bf00      	nop
    6868:	00008cc7 	.word	0x00008cc7
    686c:	20002280 	.word	0x20002280
    6870:	200004f0 	.word	0x200004f0

00006874 <nrf_cc3xx_platform_init_no_rng>:
    6874:	b510      	push	{r4, lr}
    6876:	4c0a      	ldr	r4, [pc, #40]	; (68a0 <nrf_cc3xx_platform_init_no_rng+0x2c>)
    6878:	6823      	ldr	r3, [r4, #0]
    687a:	b11b      	cbz	r3, 6884 <nrf_cc3xx_platform_init_no_rng+0x10>
    687c:	2301      	movs	r3, #1
    687e:	6023      	str	r3, [r4, #0]
    6880:	2000      	movs	r0, #0
    6882:	bd10      	pop	{r4, pc}
    6884:	f000 f8e8 	bl	6a58 <CC_LibInitNoRng>
    6888:	2800      	cmp	r0, #0
    688a:	d0f7      	beq.n	687c <nrf_cc3xx_platform_init_no_rng+0x8>
    688c:	3801      	subs	r0, #1
    688e:	2806      	cmp	r0, #6
    6890:	d803      	bhi.n	689a <nrf_cc3xx_platform_init_no_rng+0x26>
    6892:	4b04      	ldr	r3, [pc, #16]	; (68a4 <nrf_cc3xx_platform_init_no_rng+0x30>)
    6894:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    6898:	bd10      	pop	{r4, pc}
    689a:	4803      	ldr	r0, [pc, #12]	; (68a8 <nrf_cc3xx_platform_init_no_rng+0x34>)
    689c:	bd10      	pop	{r4, pc}
    689e:	bf00      	nop
    68a0:	20000db4 	.word	0x20000db4
    68a4:	000089d8 	.word	0x000089d8
    68a8:	ffff8ffe 	.word	0xffff8ffe

000068ac <nrf_cc3xx_platform_abort>:
    68ac:	f3bf 8f4f 	dsb	sy
    68b0:	4905      	ldr	r1, [pc, #20]	; (68c8 <nrf_cc3xx_platform_abort+0x1c>)
    68b2:	4b06      	ldr	r3, [pc, #24]	; (68cc <nrf_cc3xx_platform_abort+0x20>)
    68b4:	68ca      	ldr	r2, [r1, #12]
    68b6:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    68ba:	4313      	orrs	r3, r2
    68bc:	60cb      	str	r3, [r1, #12]
    68be:	f3bf 8f4f 	dsb	sy
    68c2:	bf00      	nop
    68c4:	e7fd      	b.n	68c2 <nrf_cc3xx_platform_abort+0x16>
    68c6:	bf00      	nop
    68c8:	e000ed00 	.word	0xe000ed00
    68cc:	05fa0004 	.word	0x05fa0004

000068d0 <CC_PalAbort>:
    68d0:	b410      	push	{r4}
    68d2:	4b0a      	ldr	r3, [pc, #40]	; (68fc <CC_PalAbort+0x2c>)
    68d4:	490a      	ldr	r1, [pc, #40]	; (6900 <CC_PalAbort+0x30>)
    68d6:	4c0b      	ldr	r4, [pc, #44]	; (6904 <CC_PalAbort+0x34>)
    68d8:	f04f 32fe 	mov.w	r2, #4278124286	; 0xfefefefe
    68dc:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
    68e0:	6849      	ldr	r1, [r1, #4]
    68e2:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
    68e6:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
    68ea:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
    68ee:	2300      	movs	r3, #0
    68f0:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    68f4:	f85d 4b04 	ldr.w	r4, [sp], #4
    68f8:	4708      	bx	r1
    68fa:	bf00      	nop
    68fc:	5002b000 	.word	0x5002b000
    6900:	20000254 	.word	0x20000254
    6904:	5002a000 	.word	0x5002a000

00006908 <nrf_cc3xx_platform_set_abort>:
    6908:	e9d0 1200 	ldrd	r1, r2, [r0]
    690c:	4b01      	ldr	r3, [pc, #4]	; (6914 <nrf_cc3xx_platform_set_abort+0xc>)
    690e:	e9c3 1200 	strd	r1, r2, [r3]
    6912:	4770      	bx	lr
    6914:	20000254 	.word	0x20000254

00006918 <mutex_free>:
    6918:	b510      	push	{r4, lr}
    691a:	4604      	mov	r4, r0
    691c:	b150      	cbz	r0, 6934 <mutex_free+0x1c>
    691e:	6863      	ldr	r3, [r4, #4]
    6920:	f013 5f68 	tst.w	r3, #973078528	; 0x3a000000
    6924:	d005      	beq.n	6932 <mutex_free+0x1a>
    6926:	4a06      	ldr	r2, [pc, #24]	; (6940 <mutex_free+0x28>)
    6928:	4293      	cmp	r3, r2
    692a:	d002      	beq.n	6932 <mutex_free+0x1a>
    692c:	2300      	movs	r3, #0
    692e:	6023      	str	r3, [r4, #0]
    6930:	6062      	str	r2, [r4, #4]
    6932:	bd10      	pop	{r4, pc}
    6934:	4b03      	ldr	r3, [pc, #12]	; (6944 <mutex_free+0x2c>)
    6936:	4804      	ldr	r0, [pc, #16]	; (6948 <mutex_free+0x30>)
    6938:	685b      	ldr	r3, [r3, #4]
    693a:	4798      	blx	r3
    693c:	e7ef      	b.n	691e <mutex_free+0x6>
    693e:	bf00      	nop
    6940:	a95c5f2c 	.word	0xa95c5f2c
    6944:	20000254 	.word	0x20000254
    6948:	000089f4 	.word	0x000089f4

0000694c <mutex_lock>:
    694c:	b1c8      	cbz	r0, 6982 <mutex_lock+0x36>
    694e:	6843      	ldr	r3, [r0, #4]
    6950:	4a0d      	ldr	r2, [pc, #52]	; (6988 <mutex_lock+0x3c>)
    6952:	4293      	cmp	r3, r2
    6954:	d013      	beq.n	697e <mutex_lock+0x32>
    6956:	f013 5f68 	tst.w	r3, #973078528	; 0x3a000000
    695a:	d00e      	beq.n	697a <mutex_lock+0x2e>
    695c:	2301      	movs	r3, #1
    695e:	e850 2f00 	ldrex	r2, [r0]
    6962:	4619      	mov	r1, r3
    6964:	e840 1c00 	strex	ip, r1, [r0]
    6968:	f09c 0f00 	teq	ip, #0
    696c:	d1f7      	bne.n	695e <mutex_lock+0x12>
    696e:	2a01      	cmp	r2, #1
    6970:	d0f5      	beq.n	695e <mutex_lock+0x12>
    6972:	f3bf 8f5f 	dmb	sy
    6976:	2000      	movs	r0, #0
    6978:	4770      	bx	lr
    697a:	4804      	ldr	r0, [pc, #16]	; (698c <mutex_lock+0x40>)
    697c:	4770      	bx	lr
    697e:	4804      	ldr	r0, [pc, #16]	; (6990 <mutex_lock+0x44>)
    6980:	4770      	bx	lr
    6982:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    6986:	4770      	bx	lr
    6988:	a95c5f2c 	.word	0xa95c5f2c
    698c:	ffff8fe9 	.word	0xffff8fe9
    6990:	ffff8fea 	.word	0xffff8fea

00006994 <mutex_unlock>:
    6994:	b180      	cbz	r0, 69b8 <mutex_unlock+0x24>
    6996:	6843      	ldr	r3, [r0, #4]
    6998:	4a09      	ldr	r2, [pc, #36]	; (69c0 <mutex_unlock+0x2c>)
    699a:	4293      	cmp	r3, r2
    699c:	d00a      	beq.n	69b4 <mutex_unlock+0x20>
    699e:	f013 5f68 	tst.w	r3, #973078528	; 0x3a000000
    69a2:	d005      	beq.n	69b0 <mutex_unlock+0x1c>
    69a4:	f3bf 8f5f 	dmb	sy
    69a8:	2300      	movs	r3, #0
    69aa:	6003      	str	r3, [r0, #0]
    69ac:	4618      	mov	r0, r3
    69ae:	4770      	bx	lr
    69b0:	4804      	ldr	r0, [pc, #16]	; (69c4 <mutex_unlock+0x30>)
    69b2:	4770      	bx	lr
    69b4:	4804      	ldr	r0, [pc, #16]	; (69c8 <mutex_unlock+0x34>)
    69b6:	4770      	bx	lr
    69b8:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    69bc:	4770      	bx	lr
    69be:	bf00      	nop
    69c0:	a95c5f2c 	.word	0xa95c5f2c
    69c4:	ffff8fe9 	.word	0xffff8fe9
    69c8:	ffff8fea 	.word	0xffff8fea

000069cc <mutex_init>:
    69cc:	b510      	push	{r4, lr}
    69ce:	4604      	mov	r4, r0
    69d0:	b120      	cbz	r0, 69dc <mutex_init+0x10>
    69d2:	4b04      	ldr	r3, [pc, #16]	; (69e4 <mutex_init+0x18>)
    69d4:	6063      	str	r3, [r4, #4]
    69d6:	2200      	movs	r2, #0
    69d8:	6022      	str	r2, [r4, #0]
    69da:	bd10      	pop	{r4, pc}
    69dc:	4802      	ldr	r0, [pc, #8]	; (69e8 <mutex_init+0x1c>)
    69de:	f7ff ff77 	bl	68d0 <CC_PalAbort>
    69e2:	e7f6      	b.n	69d2 <mutex_init+0x6>
    69e4:	3a00003a 	.word	0x3a00003a
    69e8:	00008a1c 	.word	0x00008a1c

000069ec <nrf_cc3xx_platform_set_mutexes>:
    69ec:	b570      	push	{r4, r5, r6, lr}
    69ee:	e9d0 2300 	ldrd	r2, r3, [r0]
    69f2:	4c15      	ldr	r4, [pc, #84]	; (6a48 <nrf_cc3xx_platform_set_mutexes+0x5c>)
    69f4:	4d15      	ldr	r5, [pc, #84]	; (6a4c <nrf_cc3xx_platform_set_mutexes+0x60>)
    69f6:	6063      	str	r3, [r4, #4]
    69f8:	e9d0 3002 	ldrd	r3, r0, [r0, #8]
    69fc:	e9c4 3002 	strd	r3, r0, [r4, #8]
    6a00:	6022      	str	r2, [r4, #0]
    6a02:	6848      	ldr	r0, [r1, #4]
    6a04:	680e      	ldr	r6, [r1, #0]
    6a06:	4b12      	ldr	r3, [pc, #72]	; (6a50 <nrf_cc3xx_platform_set_mutexes+0x64>)
    6a08:	e9c3 6000 	strd	r6, r0, [r3]
    6a0c:	f8d5 0118 	ldr.w	r0, [r5, #280]	; 0x118
    6a10:	688e      	ldr	r6, [r1, #8]
    6a12:	609e      	str	r6, [r3, #8]
    6a14:	f010 5f68 	tst.w	r0, #973078528	; 0x3a000000
    6a18:	68ce      	ldr	r6, [r1, #12]
    6a1a:	6909      	ldr	r1, [r1, #16]
    6a1c:	60de      	str	r6, [r3, #12]
    6a1e:	6119      	str	r1, [r3, #16]
    6a20:	d010      	beq.n	6a44 <nrf_cc3xx_platform_set_mutexes+0x58>
    6a22:	490c      	ldr	r1, [pc, #48]	; (6a54 <nrf_cc3xx_platform_set_mutexes+0x68>)
    6a24:	f8c5 11bc 	str.w	r1, [r5, #444]	; 0x1bc
    6a28:	2300      	movs	r3, #0
    6a2a:	e9c5 3145 	strd	r3, r1, [r5, #276]	; 0x114
    6a2e:	f505 708a 	add.w	r0, r5, #276	; 0x114
    6a32:	f8c5 31b8 	str.w	r3, [r5, #440]	; 0x1b8
    6a36:	4790      	blx	r2
    6a38:	6823      	ldr	r3, [r4, #0]
    6a3a:	f505 70dc 	add.w	r0, r5, #440	; 0x1b8
    6a3e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    6a42:	4718      	bx	r3
    6a44:	bd70      	pop	{r4, r5, r6, pc}
    6a46:	bf00      	nop
    6a48:	20000270 	.word	0x20000270
    6a4c:	20000dcc 	.word	0x20000dcc
    6a50:	2000025c 	.word	0x2000025c
    6a54:	a95c5f2c 	.word	0xa95c5f2c

00006a58 <CC_LibInitNoRng>:
    6a58:	b538      	push	{r3, r4, r5, lr}
    6a5a:	f000 f82f 	bl	6abc <CC_HalInit>
    6a5e:	b120      	cbz	r0, 6a6a <CC_LibInitNoRng+0x12>
    6a60:	2403      	movs	r4, #3
    6a62:	f000 f863 	bl	6b2c <CC_PalTerminate>
    6a66:	4620      	mov	r0, r4
    6a68:	bd38      	pop	{r3, r4, r5, pc}
    6a6a:	f000 f831 	bl	6ad0 <CC_PalInit>
    6a6e:	b998      	cbnz	r0, 6a98 <CC_LibInitNoRng+0x40>
    6a70:	f000 f8ac 	bl	6bcc <CC_PalPowerSaveModeSelect>
    6a74:	b998      	cbnz	r0, 6a9e <CC_LibInitNoRng+0x46>
    6a76:	4d0f      	ldr	r5, [pc, #60]	; (6ab4 <CC_LibInitNoRng+0x5c>)
    6a78:	f8d5 3928 	ldr.w	r3, [r5, #2344]	; 0x928
    6a7c:	0e1b      	lsrs	r3, r3, #24
    6a7e:	2bf0      	cmp	r3, #240	; 0xf0
    6a80:	d108      	bne.n	6a94 <CC_LibInitNoRng+0x3c>
    6a82:	f8d5 2a24 	ldr.w	r2, [r5, #2596]	; 0xa24
    6a86:	4b0c      	ldr	r3, [pc, #48]	; (6ab8 <CC_LibInitNoRng+0x60>)
    6a88:	429a      	cmp	r2, r3
    6a8a:	d00a      	beq.n	6aa2 <CC_LibInitNoRng+0x4a>
    6a8c:	2407      	movs	r4, #7
    6a8e:	f000 f817 	bl	6ac0 <CC_HalTerminate>
    6a92:	e7e6      	b.n	6a62 <CC_LibInitNoRng+0xa>
    6a94:	2406      	movs	r4, #6
    6a96:	e7fa      	b.n	6a8e <CC_LibInitNoRng+0x36>
    6a98:	2404      	movs	r4, #4
    6a9a:	4620      	mov	r0, r4
    6a9c:	bd38      	pop	{r3, r4, r5, pc}
    6a9e:	2400      	movs	r4, #0
    6aa0:	e7f5      	b.n	6a8e <CC_LibInitNoRng+0x36>
    6aa2:	2001      	movs	r0, #1
    6aa4:	f000 f892 	bl	6bcc <CC_PalPowerSaveModeSelect>
    6aa8:	4604      	mov	r4, r0
    6aaa:	2800      	cmp	r0, #0
    6aac:	d1f7      	bne.n	6a9e <CC_LibInitNoRng+0x46>
    6aae:	f8c5 0a0c 	str.w	r0, [r5, #2572]	; 0xa0c
    6ab2:	e7d8      	b.n	6a66 <CC_LibInitNoRng+0xe>
    6ab4:	5002b000 	.word	0x5002b000
    6ab8:	20e00000 	.word	0x20e00000

00006abc <CC_HalInit>:
    6abc:	2000      	movs	r0, #0
    6abe:	4770      	bx	lr

00006ac0 <CC_HalTerminate>:
    6ac0:	2000      	movs	r0, #0
    6ac2:	4770      	bx	lr

00006ac4 <CC_HalMaskInterrupt>:
    6ac4:	4b01      	ldr	r3, [pc, #4]	; (6acc <CC_HalMaskInterrupt+0x8>)
    6ac6:	f8c3 0a04 	str.w	r0, [r3, #2564]	; 0xa04
    6aca:	4770      	bx	lr
    6acc:	5002b000 	.word	0x5002b000

00006ad0 <CC_PalInit>:
    6ad0:	b510      	push	{r4, lr}
    6ad2:	4811      	ldr	r0, [pc, #68]	; (6b18 <CC_PalInit+0x48>)
    6ad4:	f000 f848 	bl	6b68 <CC_PalMutexCreate>
    6ad8:	b100      	cbz	r0, 6adc <CC_PalInit+0xc>
    6ada:	bd10      	pop	{r4, pc}
    6adc:	480f      	ldr	r0, [pc, #60]	; (6b1c <CC_PalInit+0x4c>)
    6ade:	f000 f843 	bl	6b68 <CC_PalMutexCreate>
    6ae2:	2800      	cmp	r0, #0
    6ae4:	d1f9      	bne.n	6ada <CC_PalInit+0xa>
    6ae6:	4c0e      	ldr	r4, [pc, #56]	; (6b20 <CC_PalInit+0x50>)
    6ae8:	4620      	mov	r0, r4
    6aea:	f000 f83d 	bl	6b68 <CC_PalMutexCreate>
    6aee:	2800      	cmp	r0, #0
    6af0:	d1f3      	bne.n	6ada <CC_PalInit+0xa>
    6af2:	4b0c      	ldr	r3, [pc, #48]	; (6b24 <CC_PalInit+0x54>)
    6af4:	480c      	ldr	r0, [pc, #48]	; (6b28 <CC_PalInit+0x58>)
    6af6:	601c      	str	r4, [r3, #0]
    6af8:	f000 f836 	bl	6b68 <CC_PalMutexCreate>
    6afc:	4601      	mov	r1, r0
    6afe:	2800      	cmp	r0, #0
    6b00:	d1eb      	bne.n	6ada <CC_PalInit+0xa>
    6b02:	f000 f82d 	bl	6b60 <CC_PalDmaInit>
    6b06:	4604      	mov	r4, r0
    6b08:	b108      	cbz	r0, 6b0e <CC_PalInit+0x3e>
    6b0a:	4620      	mov	r0, r4
    6b0c:	bd10      	pop	{r4, pc}
    6b0e:	f000 f83f 	bl	6b90 <CC_PalPowerSaveModeInit>
    6b12:	4620      	mov	r0, r4
    6b14:	e7fa      	b.n	6b0c <CC_PalInit+0x3c>
    6b16:	bf00      	nop
    6b18:	200002b0 	.word	0x200002b0
    6b1c:	200002ac 	.word	0x200002ac
    6b20:	200002a8 	.word	0x200002a8
    6b24:	200002a0 	.word	0x200002a0
    6b28:	200002a4 	.word	0x200002a4

00006b2c <CC_PalTerminate>:
    6b2c:	b508      	push	{r3, lr}
    6b2e:	4808      	ldr	r0, [pc, #32]	; (6b50 <CC_PalTerminate+0x24>)
    6b30:	f000 f824 	bl	6b7c <CC_PalMutexDestroy>
    6b34:	4807      	ldr	r0, [pc, #28]	; (6b54 <CC_PalTerminate+0x28>)
    6b36:	f000 f821 	bl	6b7c <CC_PalMutexDestroy>
    6b3a:	4807      	ldr	r0, [pc, #28]	; (6b58 <CC_PalTerminate+0x2c>)
    6b3c:	f000 f81e 	bl	6b7c <CC_PalMutexDestroy>
    6b40:	4806      	ldr	r0, [pc, #24]	; (6b5c <CC_PalTerminate+0x30>)
    6b42:	f000 f81b 	bl	6b7c <CC_PalMutexDestroy>
    6b46:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    6b4a:	f000 b80b 	b.w	6b64 <CC_PalDmaTerminate>
    6b4e:	bf00      	nop
    6b50:	200002b0 	.word	0x200002b0
    6b54:	200002ac 	.word	0x200002ac
    6b58:	200002a8 	.word	0x200002a8
    6b5c:	200002a4 	.word	0x200002a4

00006b60 <CC_PalDmaInit>:
    6b60:	2000      	movs	r0, #0
    6b62:	4770      	bx	lr

00006b64 <CC_PalDmaTerminate>:
    6b64:	4770      	bx	lr
    6b66:	bf00      	nop

00006b68 <CC_PalMutexCreate>:
    6b68:	b508      	push	{r3, lr}
    6b6a:	4b03      	ldr	r3, [pc, #12]	; (6b78 <CC_PalMutexCreate+0x10>)
    6b6c:	6802      	ldr	r2, [r0, #0]
    6b6e:	681b      	ldr	r3, [r3, #0]
    6b70:	6810      	ldr	r0, [r2, #0]
    6b72:	4798      	blx	r3
    6b74:	2000      	movs	r0, #0
    6b76:	bd08      	pop	{r3, pc}
    6b78:	20000270 	.word	0x20000270

00006b7c <CC_PalMutexDestroy>:
    6b7c:	b508      	push	{r3, lr}
    6b7e:	4b03      	ldr	r3, [pc, #12]	; (6b8c <CC_PalMutexDestroy+0x10>)
    6b80:	6802      	ldr	r2, [r0, #0]
    6b82:	685b      	ldr	r3, [r3, #4]
    6b84:	6810      	ldr	r0, [r2, #0]
    6b86:	4798      	blx	r3
    6b88:	2000      	movs	r0, #0
    6b8a:	bd08      	pop	{r3, pc}
    6b8c:	20000270 	.word	0x20000270

00006b90 <CC_PalPowerSaveModeInit>:
    6b90:	b570      	push	{r4, r5, r6, lr}
    6b92:	4c09      	ldr	r4, [pc, #36]	; (6bb8 <CC_PalPowerSaveModeInit+0x28>)
    6b94:	4d09      	ldr	r5, [pc, #36]	; (6bbc <CC_PalPowerSaveModeInit+0x2c>)
    6b96:	6920      	ldr	r0, [r4, #16]
    6b98:	68ab      	ldr	r3, [r5, #8]
    6b9a:	4798      	blx	r3
    6b9c:	b118      	cbz	r0, 6ba6 <CC_PalPowerSaveModeInit+0x16>
    6b9e:	4b08      	ldr	r3, [pc, #32]	; (6bc0 <CC_PalPowerSaveModeInit+0x30>)
    6ba0:	4808      	ldr	r0, [pc, #32]	; (6bc4 <CC_PalPowerSaveModeInit+0x34>)
    6ba2:	685b      	ldr	r3, [r3, #4]
    6ba4:	4798      	blx	r3
    6ba6:	4a08      	ldr	r2, [pc, #32]	; (6bc8 <CC_PalPowerSaveModeInit+0x38>)
    6ba8:	68eb      	ldr	r3, [r5, #12]
    6baa:	6920      	ldr	r0, [r4, #16]
    6bac:	2100      	movs	r1, #0
    6bae:	6011      	str	r1, [r2, #0]
    6bb0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    6bb4:	4718      	bx	r3
    6bb6:	bf00      	nop
    6bb8:	2000025c 	.word	0x2000025c
    6bbc:	20000270 	.word	0x20000270
    6bc0:	20000254 	.word	0x20000254
    6bc4:	00008a40 	.word	0x00008a40
    6bc8:	20000dc8 	.word	0x20000dc8

00006bcc <CC_PalPowerSaveModeSelect>:
    6bcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6bce:	4d1a      	ldr	r5, [pc, #104]	; (6c38 <CC_PalPowerSaveModeSelect+0x6c>)
    6bd0:	4e1a      	ldr	r6, [pc, #104]	; (6c3c <CC_PalPowerSaveModeSelect+0x70>)
    6bd2:	4604      	mov	r4, r0
    6bd4:	68b2      	ldr	r2, [r6, #8]
    6bd6:	6928      	ldr	r0, [r5, #16]
    6bd8:	4790      	blx	r2
    6bda:	b9e8      	cbnz	r0, 6c18 <CC_PalPowerSaveModeSelect+0x4c>
    6bdc:	4f18      	ldr	r7, [pc, #96]	; (6c40 <CC_PalPowerSaveModeSelect+0x74>)
    6bde:	683b      	ldr	r3, [r7, #0]
    6be0:	b14c      	cbz	r4, 6bf6 <CC_PalPowerSaveModeSelect+0x2a>
    6be2:	b1a3      	cbz	r3, 6c0e <CC_PalPowerSaveModeSelect+0x42>
    6be4:	2b01      	cmp	r3, #1
    6be6:	d019      	beq.n	6c1c <CC_PalPowerSaveModeSelect+0x50>
    6be8:	3b01      	subs	r3, #1
    6bea:	603b      	str	r3, [r7, #0]
    6bec:	6928      	ldr	r0, [r5, #16]
    6bee:	68f3      	ldr	r3, [r6, #12]
    6bf0:	4798      	blx	r3
    6bf2:	2000      	movs	r0, #0
    6bf4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    6bf6:	b943      	cbnz	r3, 6c0a <CC_PalPowerSaveModeSelect+0x3e>
    6bf8:	4a12      	ldr	r2, [pc, #72]	; (6c44 <CC_PalPowerSaveModeSelect+0x78>)
    6bfa:	2101      	movs	r1, #1
    6bfc:	f8c2 1500 	str.w	r1, [r2, #1280]	; 0x500
    6c00:	4911      	ldr	r1, [pc, #68]	; (6c48 <CC_PalPowerSaveModeSelect+0x7c>)
    6c02:	f8d1 2910 	ldr.w	r2, [r1, #2320]	; 0x910
    6c06:	2a00      	cmp	r2, #0
    6c08:	d1fb      	bne.n	6c02 <CC_PalPowerSaveModeSelect+0x36>
    6c0a:	3301      	adds	r3, #1
    6c0c:	603b      	str	r3, [r7, #0]
    6c0e:	68f3      	ldr	r3, [r6, #12]
    6c10:	6928      	ldr	r0, [r5, #16]
    6c12:	4798      	blx	r3
    6c14:	2000      	movs	r0, #0
    6c16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    6c18:	480c      	ldr	r0, [pc, #48]	; (6c4c <CC_PalPowerSaveModeSelect+0x80>)
    6c1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    6c1c:	4a0a      	ldr	r2, [pc, #40]	; (6c48 <CC_PalPowerSaveModeSelect+0x7c>)
    6c1e:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
    6c22:	2b00      	cmp	r3, #0
    6c24:	d1fb      	bne.n	6c1e <CC_PalPowerSaveModeSelect+0x52>
    6c26:	4a07      	ldr	r2, [pc, #28]	; (6c44 <CC_PalPowerSaveModeSelect+0x78>)
    6c28:	f06f 407e 	mvn.w	r0, #4261412864	; 0xfe000000
    6c2c:	f8c2 3500 	str.w	r3, [r2, #1280]	; 0x500
    6c30:	f7ff ff48 	bl	6ac4 <CC_HalMaskInterrupt>
    6c34:	683b      	ldr	r3, [r7, #0]
    6c36:	e7d7      	b.n	6be8 <CC_PalPowerSaveModeSelect+0x1c>
    6c38:	2000025c 	.word	0x2000025c
    6c3c:	20000270 	.word	0x20000270
    6c40:	20000dc8 	.word	0x20000dc8
    6c44:	5002a000 	.word	0x5002a000
    6c48:	5002b000 	.word	0x5002b000
    6c4c:	ffff8fe9 	.word	0xffff8fe9

00006c50 <arch_printk_char_out>:
}
    6c50:	2000      	movs	r0, #0
    6c52:	4770      	bx	lr

00006c54 <printk>:
 *
 * @param fmt formatted string to output
 */

void printk(const char *fmt, ...)
{
    6c54:	b40f      	push	{r0, r1, r2, r3}
    6c56:	b507      	push	{r0, r1, r2, lr}
    6c58:	a904      	add	r1, sp, #16
    6c5a:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
    6c5e:	9101      	str	r1, [sp, #4]

	vprintk(fmt, ap);
    6c60:	f7fa faf8 	bl	1254 <vprintk>

	va_end(ap);
}
    6c64:	b003      	add	sp, #12
    6c66:	f85d eb04 	ldr.w	lr, [sp], #4
    6c6a:	b004      	add	sp, #16
    6c6c:	4770      	bx	lr

00006c6e <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
    6c6e:	4604      	mov	r4, r0
    6c70:	b508      	push	{r3, lr}
    6c72:	4608      	mov	r0, r1
    6c74:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
    6c76:	461a      	mov	r2, r3
    6c78:	47a0      	blx	r4
	return z_impl_z_current_get();
    6c7a:	f7ff fb51 	bl	6320 <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
    6c7e:	f7fb f9ef 	bl	2060 <z_impl_k_thread_abort>

00006c82 <chunk_size>:
	void *cmem = &buf[c];

	if (big_heap(h)) {
		return ((uint32_t *)cmem)[f];
	} else {
		return ((uint16_t *)cmem)[f];
    6c82:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
    6c86:	8840      	ldrh	r0, [r0, #2]
}

static inline chunksz_t chunk_size(struct z_heap *h, chunkid_t c)
{
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
}
    6c88:	0840      	lsrs	r0, r0, #1
    6c8a:	4770      	bx	lr

00006c8c <free_list_add>:
	h->free_bytes += chunksz_to_bytes(h, chunk_size(h, c));
#endif
}

static void free_list_add(struct z_heap *h, chunkid_t c)
{
    6c8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6c8e:	4603      	mov	r3, r0
	if (!solo_free_header(h, c)) {
		int bidx = bucket_idx(h, chunk_size(h, c));
    6c90:	f7ff fff7 	bl	6c82 <chunk_size>
}

static inline int bucket_idx(struct z_heap *h, chunksz_t sz)
{
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
	return 31 - __builtin_clz(usable_sz);
    6c94:	fab0 f080 	clz	r0, r0
    6c98:	f1c0 001f 	rsb	r0, r0, #31
	if (b->next == 0U) {
    6c9c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
	void *cmem = &buf[c];
    6ca0:	00ca      	lsls	r2, r1, #3
    6ca2:	f8dc 6010 	ldr.w	r6, [ip, #16]
		((uint16_t *)cmem)[f] = val;
    6ca6:	1d17      	adds	r7, r2, #4
{
    6ca8:	460c      	mov	r4, r1
    6caa:	3206      	adds	r2, #6
    6cac:	b28d      	uxth	r5, r1
	if (b->next == 0U) {
    6cae:	b956      	cbnz	r6, 6cc6 <free_list_add+0x3a>
		h->avail_buckets |= BIT(bidx);
    6cb0:	2101      	movs	r1, #1
    6cb2:	fa01 f000 	lsl.w	r0, r1, r0
    6cb6:	68d9      	ldr	r1, [r3, #12]
    6cb8:	4301      	orrs	r1, r0
    6cba:	60d9      	str	r1, [r3, #12]
		b->next = c;
    6cbc:	f8cc 4010 	str.w	r4, [ip, #16]
    6cc0:	53dd      	strh	r5, [r3, r7]
    6cc2:	529d      	strh	r5, [r3, r2]
		free_list_add_bidx(h, c, bidx);
	}
}
    6cc4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	void *cmem = &buf[c];
    6cc6:	00f1      	lsls	r1, r6, #3
		return ((uint16_t *)cmem)[f];
    6cc8:	3104      	adds	r1, #4
    6cca:	5a58      	ldrh	r0, [r3, r1]
		((uint16_t *)cmem)[f] = val;
    6ccc:	53d8      	strh	r0, [r3, r7]
    6cce:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
    6cd2:	529e      	strh	r6, [r3, r2]
    6cd4:	80c5      	strh	r5, [r0, #6]
    6cd6:	525d      	strh	r5, [r3, r1]
    6cd8:	e7f4      	b.n	6cc4 <free_list_add+0x38>

00006cda <sys_heap_init>:
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffffffU, "heap size is too big");
	}

	/* Reserve the end marker chunk's header */
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
	bytes -= heap_footer_bytes(bytes);
    6cda:	3a04      	subs	r2, #4
{
    6cdc:	b4f0      	push	{r4, r5, r6, r7}
    6cde:	4604      	mov	r4, r0

	/* Round the start up, the end down */
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
    6ce0:	1dc8      	adds	r0, r1, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
    6ce2:	4411      	add	r1, r2
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
    6ce4:	f020 0007 	bic.w	r0, r0, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
    6ce8:	f021 0107 	bic.w	r1, r1, #7
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
    6cec:	1a0e      	subs	r6, r1, r0
    6cee:	08f3      	lsrs	r3, r6, #3

	CHECK(end > addr);
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");

	struct z_heap *h = (struct z_heap *)addr;
	heap->heap = h;
    6cf0:	6020      	str	r0, [r4, #0]
	return 31 - __builtin_clz(usable_sz);
    6cf2:	fab3 f283 	clz	r2, r3
	h->end_chunk = heap_sz;
	h->avail_buckets = 0;
    6cf6:	4604      	mov	r4, r0
	h->allocated_bytes = 0;
	h->max_allocated_bytes = 0;
#endif

	int nb_buckets = bucket_idx(h, heap_sz) + 1;
	chunksz_t chunk0_size = chunksz(sizeof(struct z_heap) +
    6cf8:	f1c2 0524 	rsb	r5, r2, #36	; 0x24
	h->avail_buckets = 0;
    6cfc:	2700      	movs	r7, #0
	h->end_chunk = heap_sz;
    6cfe:	6083      	str	r3, [r0, #8]
	chunksz_t chunk0_size = chunksz(sizeof(struct z_heap) +
    6d00:	00ad      	lsls	r5, r5, #2
	h->avail_buckets = 0;
    6d02:	f844 7f0c 	str.w	r7, [r4, #12]!
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
    6d06:	3507      	adds	r5, #7
	int nb_buckets = bucket_idx(h, heap_sz) + 1;
    6d08:	f1c2 0220 	rsb	r2, r2, #32
    6d0c:	08e9      	lsrs	r1, r5, #3
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");

	for (int i = 0; i < nb_buckets; i++) {
    6d0e:	eb04 0282 	add.w	r2, r4, r2, lsl #2
		h->buckets[i].next = 0;
    6d12:	f844 7f04 	str.w	r7, [r4, #4]!
	for (int i = 0; i < nb_buckets; i++) {
    6d16:	4294      	cmp	r4, r2
    6d18:	d1fb      	bne.n	6d12 <sys_heap_init+0x38>
	chunk_set(h, c, SIZE_AND_USED, size << 1);
    6d1a:	004a      	lsls	r2, r1, #1
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
    6d1c:	f042 0201 	orr.w	r2, r2, #1
    6d20:	8042      	strh	r2, [r0, #2]
		((uint16_t *)cmem)[f] = val;
    6d22:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
	set_chunk_size(h, 0, chunk0_size);
	set_left_chunk_size(h, 0, 0);
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, heap_sz - chunk0_size);
    6d26:	1a5a      	subs	r2, r3, r1
	chunk_set(h, c, SIZE_AND_USED, size << 1);
    6d28:	0055      	lsls	r5, r2, #1
		((uint16_t *)cmem)[f] = val;
    6d2a:	8007      	strh	r7, [r0, #0]
    6d2c:	8065      	strh	r5, [r4, #2]
    6d2e:	1984      	adds	r4, r0, r6
    6d30:	f820 1031 	strh.w	r1, [r0, r1, lsl #3]
	void *cmem = &buf[c];
    6d34:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
		((uint16_t *)cmem)[f] = val;
    6d38:	8067      	strh	r7, [r4, #2]
    6d3a:	5382      	strh	r2, [r0, r6]
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
    6d3c:	885a      	ldrh	r2, [r3, #2]
    6d3e:	f042 0201 	orr.w	r2, r2, #1
    6d42:	805a      	strh	r2, [r3, #2]
	set_chunk_size(h, heap_sz, 0);
	set_left_chunk_size(h, heap_sz, heap_sz - chunk0_size);
	set_chunk_used(h, heap_sz, true);

	free_list_add(h, chunk0_size);
}
    6d44:	bcf0      	pop	{r4, r5, r6, r7}
	free_list_add(h, chunk0_size);
    6d46:	f7ff bfa1 	b.w	6c8c <free_list_add>

00006d4a <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    6d4a:	8b03      	ldrh	r3, [r0, #24]
	if ((state == ONOFF_STATE_OFF)
    6d4c:	f013 0307 	ands.w	r3, r3, #7
    6d50:	d105      	bne.n	6d5e <process_recheck+0x14>
	    && !sys_slist_is_empty(&mgr->clients)) {
    6d52:	6803      	ldr	r3, [r0, #0]
		evt = EVT_START;
    6d54:	2b00      	cmp	r3, #0
    6d56:	bf0c      	ite	eq
    6d58:	2000      	moveq	r0, #0
    6d5a:	2003      	movne	r0, #3
    6d5c:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
    6d5e:	2b02      	cmp	r3, #2
    6d60:	d105      	bne.n	6d6e <process_recheck+0x24>
		   && (mgr->refs == 0U)) {
    6d62:	8b40      	ldrh	r0, [r0, #26]
    6d64:	fab0 f080 	clz	r0, r0
    6d68:	0940      	lsrs	r0, r0, #5
    6d6a:	0080      	lsls	r0, r0, #2
    6d6c:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ERROR)
    6d6e:	2b01      	cmp	r3, #1
    6d70:	d105      	bne.n	6d7e <process_recheck+0x34>
		   && !sys_slist_is_empty(&mgr->clients)) {
    6d72:	6803      	ldr	r3, [r0, #0]
		evt = EVT_RESET;
    6d74:	2b00      	cmp	r3, #0
    6d76:	bf0c      	ite	eq
    6d78:	2000      	moveq	r0, #0
    6d7a:	2005      	movne	r0, #5
    6d7c:	4770      	bx	lr
	int evt = EVT_NOP;
    6d7e:	2000      	movs	r0, #0
}
    6d80:	4770      	bx	lr

00006d82 <validate_args>:
{
    6d82:	b510      	push	{r4, lr}
    6d84:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
    6d86:	b100      	cbz	r0, 6d8a <validate_args+0x8>
    6d88:	b911      	cbnz	r1, 6d90 <validate_args+0xe>
		return -EINVAL;
    6d8a:	f06f 0015 	mvn.w	r0, #21
}
    6d8e:	bd10      	pop	{r4, pc}
	int rv = sys_notify_validate(&cli->notify);
    6d90:	1d08      	adds	r0, r1, #4
    6d92:	f000 f8bb 	bl	6f0c <sys_notify_validate>
	if ((rv == 0)
    6d96:	2800      	cmp	r0, #0
    6d98:	d1f9      	bne.n	6d8e <validate_args+0xc>
	    && ((cli->notify.flags
    6d9a:	68a3      	ldr	r3, [r4, #8]
    6d9c:	2b03      	cmp	r3, #3
    6d9e:	d9f6      	bls.n	6d8e <validate_args+0xc>
    6da0:	e7f3      	b.n	6d8a <validate_args+0x8>

00006da2 <notify_one>:
{
    6da2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6da6:	460d      	mov	r5, r1
    6da8:	4607      	mov	r7, r0
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
    6daa:	4619      	mov	r1, r3
    6dac:	1d28      	adds	r0, r5, #4
{
    6dae:	4690      	mov	r8, r2
    6db0:	461e      	mov	r6, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
    6db2:	f000 f8bc 	bl	6f2e <sys_notify_finalize>
	if (cb) {
    6db6:	4604      	mov	r4, r0
    6db8:	b138      	cbz	r0, 6dca <notify_one+0x28>
		cb(mgr, cli, state, res);
    6dba:	4633      	mov	r3, r6
    6dbc:	4642      	mov	r2, r8
    6dbe:	4629      	mov	r1, r5
    6dc0:	4638      	mov	r0, r7
    6dc2:	46a4      	mov	ip, r4
}
    6dc4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		cb(mgr, cli, state, res);
    6dc8:	4760      	bx	ip
}
    6dca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00006dce <transition_complete>:
{
    6dce:	b410      	push	{r4}
	__asm__ volatile(
    6dd0:	f04f 0420 	mov.w	r4, #32
    6dd4:	f3ef 8211 	mrs	r2, BASEPRI
    6dd8:	f384 8812 	msr	BASEPRI_MAX, r4
    6ddc:	f3bf 8f6f 	isb	sy
	mgr->last_res = res;
    6de0:	6141      	str	r1, [r0, #20]
}
    6de2:	f85d 4b04 	ldr.w	r4, [sp], #4
	process_event(mgr, EVT_COMPLETE, key);
    6de6:	2101      	movs	r1, #1
    6de8:	f7fa ba42 	b.w	1270 <process_event>

00006dec <onoff_manager_init>:
{
    6dec:	b538      	push	{r3, r4, r5, lr}
    6dee:	460c      	mov	r4, r1
	if ((mgr == NULL)
    6df0:	4605      	mov	r5, r0
    6df2:	b158      	cbz	r0, 6e0c <onoff_manager_init+0x20>
	    || (transitions == NULL)
    6df4:	b151      	cbz	r1, 6e0c <onoff_manager_init+0x20>
	    || (transitions->start == NULL)
    6df6:	680b      	ldr	r3, [r1, #0]
    6df8:	b143      	cbz	r3, 6e0c <onoff_manager_init+0x20>
	    || (transitions->stop == NULL)) {
    6dfa:	684b      	ldr	r3, [r1, #4]
    6dfc:	b133      	cbz	r3, 6e0c <onoff_manager_init+0x20>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
    6dfe:	221c      	movs	r2, #28
    6e00:	2100      	movs	r1, #0
    6e02:	f000 f968 	bl	70d6 <memset>
    6e06:	612c      	str	r4, [r5, #16]
	return 0;
    6e08:	2000      	movs	r0, #0
}
    6e0a:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
    6e0c:	f06f 0015 	mvn.w	r0, #21
    6e10:	e7fb      	b.n	6e0a <onoff_manager_init+0x1e>

00006e12 <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
    6e12:	b570      	push	{r4, r5, r6, lr}
    6e14:	4605      	mov	r5, r0
    6e16:	460e      	mov	r6, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
    6e18:	f7ff ffb3 	bl	6d82 <validate_args>

	if (rv < 0) {
    6e1c:	1e04      	subs	r4, r0, #0
    6e1e:	db15      	blt.n	6e4c <onoff_request+0x3a>
    6e20:	f04f 0320 	mov.w	r3, #32
    6e24:	f3ef 8211 	mrs	r2, BASEPRI
    6e28:	f383 8812 	msr	BASEPRI_MAX, r3
    6e2c:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
    6e30:	8b6b      	ldrh	r3, [r5, #26]
    6e32:	8b2c      	ldrh	r4, [r5, #24]
    6e34:	f64f 71ff 	movw	r1, #65535	; 0xffff
    6e38:	428b      	cmp	r3, r1
    6e3a:	f004 0407 	and.w	r4, r4, #7
    6e3e:	d107      	bne.n	6e50 <onoff_request+0x3e>
	__asm__ volatile(
    6e40:	f382 8811 	msr	BASEPRI, r2
    6e44:	f3bf 8f6f 	isb	sy
		rv = -EAGAIN;
    6e48:	f06f 040a 	mvn.w	r4, #10
			notify_one(mgr, cli, state, 0);
		}
	}

	return rv;
}
    6e4c:	4620      	mov	r0, r4
    6e4e:	bd70      	pop	{r4, r5, r6, pc}
	if (state == ONOFF_STATE_ON) {
    6e50:	2c02      	cmp	r4, #2
    6e52:	d10c      	bne.n	6e6e <onoff_request+0x5c>
		mgr->refs += 1U;
    6e54:	3301      	adds	r3, #1
    6e56:	836b      	strh	r3, [r5, #26]
    6e58:	f382 8811 	msr	BASEPRI, r2
    6e5c:	f3bf 8f6f 	isb	sy
			notify_one(mgr, cli, state, 0);
    6e60:	2300      	movs	r3, #0
    6e62:	4622      	mov	r2, r4
    6e64:	4631      	mov	r1, r6
    6e66:	4628      	mov	r0, r5
    6e68:	f7ff ff9b 	bl	6da2 <notify_one>
    6e6c:	e7ee      	b.n	6e4c <onoff_request+0x3a>
	} else if ((state == ONOFF_STATE_OFF)
    6e6e:	2c06      	cmp	r4, #6
    6e70:	d814      	bhi.n	6e9c <onoff_request+0x8a>
    6e72:	e8df f004 	tbb	[pc, r4]
    6e76:	1304      	.short	0x1304
    6e78:	1a041313 	.word	0x1a041313
    6e7c:	04          	.byte	0x04
    6e7d:	00          	.byte	0x00
	parent->next = child;
    6e7e:	2300      	movs	r3, #0
    6e80:	6033      	str	r3, [r6, #0]
	return list->tail;
    6e82:	686b      	ldr	r3, [r5, #4]
Z_GENLIST_APPEND(slist, snode)
    6e84:	b93b      	cbnz	r3, 6e96 <onoff_request+0x84>
	list->head = node;
    6e86:	e9c5 6600 	strd	r6, r6, [r5]
	if (start) {
    6e8a:	b9ac      	cbnz	r4, 6eb8 <onoff_request+0xa6>
		process_event(mgr, EVT_RECHECK, key);
    6e8c:	2102      	movs	r1, #2
    6e8e:	4628      	mov	r0, r5
    6e90:	f7fa f9ee 	bl	1270 <process_event>
    6e94:	e7da      	b.n	6e4c <onoff_request+0x3a>
	parent->next = child;
    6e96:	601e      	str	r6, [r3, #0]
	list->tail = node;
    6e98:	606e      	str	r6, [r5, #4]
}
    6e9a:	e7f6      	b.n	6e8a <onoff_request+0x78>
    6e9c:	f382 8811 	msr	BASEPRI, r2
    6ea0:	f3bf 8f6f 	isb	sy
		rv = -EIO;
    6ea4:	f06f 0404 	mvn.w	r4, #4
    6ea8:	e7d0      	b.n	6e4c <onoff_request+0x3a>
    6eaa:	f382 8811 	msr	BASEPRI, r2
    6eae:	f3bf 8f6f 	isb	sy
    6eb2:	f06f 0485 	mvn.w	r4, #133	; 0x85
    6eb6:	e7c9      	b.n	6e4c <onoff_request+0x3a>
    6eb8:	f382 8811 	msr	BASEPRI, r2
    6ebc:	f3bf 8f6f 	isb	sy
		if (notify) {
    6ec0:	e7c4      	b.n	6e4c <onoff_request+0x3a>

00006ec2 <onoff_release>:

int onoff_release(struct onoff_manager *mgr)
{
    6ec2:	b510      	push	{r4, lr}
	__asm__ volatile(
    6ec4:	f04f 0320 	mov.w	r3, #32
    6ec8:	f3ef 8211 	mrs	r2, BASEPRI
    6ecc:	f383 8812 	msr	BASEPRI_MAX, r3
    6ed0:	f3bf 8f6f 	isb	sy
	bool stop = false;      /* trigger a stop transition */

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    6ed4:	8b04      	ldrh	r4, [r0, #24]
    6ed6:	f004 0407 	and.w	r4, r4, #7
	int rv = state;

	if (state != ONOFF_STATE_ON) {
    6eda:	2c02      	cmp	r4, #2
    6edc:	d00a      	beq.n	6ef4 <onoff_release+0x32>
		if (state == ONOFF_STATE_ERROR) {
			rv = -EIO;
		} else {
			rv = -ENOTSUP;
    6ede:	2c01      	cmp	r4, #1
    6ee0:	bf0c      	ite	eq
    6ee2:	f06f 0004 	mvneq.w	r0, #4
    6ee6:	f06f 0085 	mvnne.w	r0, #133	; 0x85
	__asm__ volatile(
    6eea:	f382 8811 	msr	BASEPRI, r2
    6eee:	f3bf 8f6f 	isb	sy
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);
	}

	return rv;
    6ef2:	e008      	b.n	6f06 <onoff_release+0x44>
	mgr->refs -= 1U;
    6ef4:	8b43      	ldrh	r3, [r0, #26]
    6ef6:	3b01      	subs	r3, #1
    6ef8:	b29b      	uxth	r3, r3
    6efa:	8343      	strh	r3, [r0, #26]
	if (stop) {
    6efc:	b923      	cbnz	r3, 6f08 <onoff_release+0x46>
		process_event(mgr, EVT_RECHECK, key);
    6efe:	4621      	mov	r1, r4
    6f00:	f7fa f9b6 	bl	1270 <process_event>
	int rv = state;
    6f04:	4620      	mov	r0, r4
}
    6f06:	bd10      	pop	{r4, pc}
	int rv = state;
    6f08:	4620      	mov	r0, r4
    6f0a:	e7ee      	b.n	6eea <onoff_release+0x28>

00006f0c <sys_notify_validate>:

int sys_notify_validate(struct sys_notify *notify)
{
	int rv = 0;

	if (notify == NULL) {
    6f0c:	4603      	mov	r3, r0
    6f0e:	b158      	cbz	r0, 6f28 <sys_notify_validate+0x1c>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    6f10:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
    6f12:	f002 0203 	and.w	r2, r2, #3
		return -EINVAL;
	}

	/* Validate configuration based on mode */
	switch (sys_notify_get_method(notify)) {
    6f16:	2a01      	cmp	r2, #1
    6f18:	d003      	beq.n	6f22 <sys_notify_validate+0x16>
    6f1a:	2a03      	cmp	r2, #3
    6f1c:	d104      	bne.n	6f28 <sys_notify_validate+0x1c>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		if (notify->method.callback == NULL) {
    6f1e:	6802      	ldr	r2, [r0, #0]
    6f20:	b112      	cbz	r2, 6f28 <sys_notify_validate+0x1c>
		break;
	}

	/* Clear the result here instead of in all callers. */
	if (rv == 0) {
		notify->result = 0;
    6f22:	2000      	movs	r0, #0
    6f24:	6098      	str	r0, [r3, #8]
    6f26:	4770      	bx	lr
    6f28:	f06f 0015 	mvn.w	r0, #21
	}

	return rv;
}
    6f2c:	4770      	bx	lr

00006f2e <sys_notify_finalize>:
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    6f2e:	6842      	ldr	r2, [r0, #4]
	uint32_t method = sys_notify_get_method(notify);

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
    6f30:	6081      	str	r1, [r0, #8]
	return method & SYS_NOTIFY_METHOD_MASK;
    6f32:	f002 0203 	and.w	r2, r2, #3
	switch (method) {
    6f36:	2a03      	cmp	r2, #3
    6f38:	f04f 0200 	mov.w	r2, #0
{
    6f3c:	4603      	mov	r3, r0
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
    6f3e:	bf0c      	ite	eq
    6f40:	6800      	ldreq	r0, [r0, #0]
	sys_notify_generic_callback rv = NULL;
    6f42:	4610      	movne	r0, r2
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
    6f44:	605a      	str	r2, [r3, #4]
	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
    6f46:	4770      	bx	lr

00006f48 <_ldiv5>:
	uint32_t v_lo = *v;
    6f48:	e9d0 2100 	ldrd	r2, r1, [r0]
{
    6f4c:	b530      	push	{r4, r5, lr}
	__asm__ ("" : "+r" (m));
    6f4e:	f04f 3333 	mov.w	r3, #858993459	; 0x33333333
	result += (uint64_t)v_lo * m;
    6f52:	fba2 2403 	umull	r2, r4, r2, r3
    6f56:	18d5      	adds	r5, r2, r3
    6f58:	eb43 0504 	adc.w	r5, r3, r4
	result += (uint64_t)v_hi * m;
    6f5c:	fba1 1303 	umull	r1, r3, r1, r3
    6f60:	1852      	adds	r2, r2, r1
    6f62:	eb44 0403 	adc.w	r4, r4, r3
    6f66:	1952      	adds	r2, r2, r5
    6f68:	f144 0200 	adc.w	r2, r4, #0
	result += (uint64_t)v_hi * m;
    6f6c:	1889      	adds	r1, r1, r2
    6f6e:	f143 0300 	adc.w	r3, r3, #0
	*v = result;
    6f72:	e9c0 1300 	strd	r1, r3, [r0]
}
    6f76:	bd30      	pop	{r4, r5, pc}

00006f78 <_get_digit>:
{
    6f78:	b510      	push	{r4, lr}
	if (*digit_count > 0) {
    6f7a:	680a      	ldr	r2, [r1, #0]
    6f7c:	2a00      	cmp	r2, #0
{
    6f7e:	4603      	mov	r3, r0
	if (*digit_count > 0) {
    6f80:	dd0f      	ble.n	6fa2 <_get_digit+0x2a>
		--*digit_count;
    6f82:	3a01      	subs	r2, #1
    6f84:	600a      	str	r2, [r1, #0]
		*fr *= 10U;
    6f86:	681a      	ldr	r2, [r3, #0]
    6f88:	6844      	ldr	r4, [r0, #4]
    6f8a:	200a      	movs	r0, #10
    6f8c:	fba2 1200 	umull	r1, r2, r2, r0
    6f90:	fb00 2204 	mla	r2, r0, r4, r2
		rval = ((*fr >> 60) & 0xF) + '0';
    6f94:	0f10      	lsrs	r0, r2, #28
		*fr &= (BIT64(60) - 1U);
    6f96:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
    6f9a:	e9c3 1200 	strd	r1, r2, [r3]
		rval = ((*fr >> 60) & 0xF) + '0';
    6f9e:	3030      	adds	r0, #48	; 0x30
}
    6fa0:	bd10      	pop	{r4, pc}
		rval = '0';
    6fa2:	2030      	movs	r0, #48	; 0x30
    6fa4:	e7fc      	b.n	6fa0 <_get_digit+0x28>

00006fa6 <encode_uint>:
{
    6fa6:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6faa:	469a      	mov	sl, r3
	bool upcase = isupper((int)conv->specifier) != 0;
    6fac:	78d3      	ldrb	r3, [r2, #3]
	switch (specifier) {
    6fae:	2b6f      	cmp	r3, #111	; 0x6f
{
    6fb0:	4680      	mov	r8, r0
    6fb2:	460f      	mov	r7, r1
    6fb4:	4615      	mov	r5, r2
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
    6fb6:	f1a3 0b41 	sub.w	fp, r3, #65	; 0x41
	switch (specifier) {
    6fba:	d029      	beq.n	7010 <encode_uint+0x6a>
    6fbc:	d824      	bhi.n	7008 <encode_uint+0x62>
		return 10;
    6fbe:	2b58      	cmp	r3, #88	; 0x58
    6fc0:	bf0c      	ite	eq
    6fc2:	2610      	moveq	r6, #16
    6fc4:	260a      	movne	r6, #10
	char *bp = bps + (bpe - bps);
    6fc6:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
		unsigned int lsv = (unsigned int)(value % radix);
    6fca:	4632      	mov	r2, r6
    6fcc:	2300      	movs	r3, #0
    6fce:	4640      	mov	r0, r8
    6fd0:	4639      	mov	r1, r7
    6fd2:	f7f9 f895 	bl	100 <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    6fd6:	2a09      	cmp	r2, #9
    6fd8:	b2d4      	uxtb	r4, r2
    6fda:	d81e      	bhi.n	701a <encode_uint+0x74>
    6fdc:	3430      	adds	r4, #48	; 0x30
	} while ((value != 0) && (bps < bp));
    6fde:	45b0      	cmp	r8, r6
		*--bp = (lsv <= 9) ? ('0' + lsv)
    6fe0:	b2e4      	uxtb	r4, r4
	} while ((value != 0) && (bps < bp));
    6fe2:	f177 0700 	sbcs.w	r7, r7, #0
		*--bp = (lsv <= 9) ? ('0' + lsv)
    6fe6:	f809 4d01 	strb.w	r4, [r9, #-1]!
	} while ((value != 0) && (bps < bp));
    6fea:	d301      	bcc.n	6ff0 <encode_uint+0x4a>
    6fec:	45d1      	cmp	r9, sl
    6fee:	d811      	bhi.n	7014 <encode_uint+0x6e>
	if (conv->flag_hash) {
    6ff0:	782b      	ldrb	r3, [r5, #0]
    6ff2:	069b      	lsls	r3, r3, #26
    6ff4:	d505      	bpl.n	7002 <encode_uint+0x5c>
		if (radix == 8) {
    6ff6:	2e08      	cmp	r6, #8
    6ff8:	d115      	bne.n	7026 <encode_uint+0x80>
			conv->altform_0 = true;
    6ffa:	78ab      	ldrb	r3, [r5, #2]
    6ffc:	f043 0308 	orr.w	r3, r3, #8
			conv->altform_0c = true;
    7000:	70ab      	strb	r3, [r5, #2]
}
    7002:	4648      	mov	r0, r9
    7004:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (specifier) {
    7008:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
		return 10;
    700c:	2b70      	cmp	r3, #112	; 0x70
    700e:	e7d7      	b.n	6fc0 <encode_uint+0x1a>
	switch (specifier) {
    7010:	2608      	movs	r6, #8
    7012:	e7d8      	b.n	6fc6 <encode_uint+0x20>
		value /= radix;
    7014:	4680      	mov	r8, r0
    7016:	460f      	mov	r7, r1
    7018:	e7d7      	b.n	6fca <encode_uint+0x24>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    701a:	f1bb 0f19 	cmp.w	fp, #25
    701e:	bf94      	ite	ls
    7020:	3437      	addls	r4, #55	; 0x37
    7022:	3457      	addhi	r4, #87	; 0x57
    7024:	e7db      	b.n	6fde <encode_uint+0x38>
		} else if (radix == 16) {
    7026:	2e10      	cmp	r6, #16
    7028:	d1eb      	bne.n	7002 <encode_uint+0x5c>
			conv->altform_0c = true;
    702a:	78ab      	ldrb	r3, [r5, #2]
    702c:	f043 0310 	orr.w	r3, r3, #16
    7030:	e7e6      	b.n	7000 <encode_uint+0x5a>

00007032 <outs>:
{
    7032:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7036:	4607      	mov	r7, r0
    7038:	4688      	mov	r8, r1
    703a:	4615      	mov	r5, r2
    703c:	461e      	mov	r6, r3
	while ((sp < ep) || ((ep == NULL) && *sp)) {
    703e:	4614      	mov	r4, r2
    7040:	42b4      	cmp	r4, r6
    7042:	d305      	bcc.n	7050 <outs+0x1e>
    7044:	b10e      	cbz	r6, 704a <outs+0x18>
	return (int)count;
    7046:	1b60      	subs	r0, r4, r5
    7048:	e008      	b.n	705c <outs+0x2a>
	while ((sp < ep) || ((ep == NULL) && *sp)) {
    704a:	7823      	ldrb	r3, [r4, #0]
    704c:	2b00      	cmp	r3, #0
    704e:	d0fa      	beq.n	7046 <outs+0x14>
		int rc = out((int)*sp++, ctx);
    7050:	f814 0b01 	ldrb.w	r0, [r4], #1
    7054:	4641      	mov	r1, r8
    7056:	47b8      	blx	r7
		if (rc < 0) {
    7058:	2800      	cmp	r0, #0
    705a:	daf1      	bge.n	7040 <outs+0xe>
}
    705c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00007060 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_STRIP_PATHS, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_WARN_DEPRECATED, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_ENFORCE_ZEPHYR_STDINT, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
    7060:	4770      	bx	lr

00007062 <abort_function>:
{
    7062:	b508      	push	{r3, lr}
	sys_reboot(SYS_REBOOT_WARM);
    7064:	2000      	movs	r0, #0
    7066:	f7fa fa11 	bl	148c <sys_reboot>

0000706a <z_arm_fatal_error>:
{

	if (esf != NULL) {
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
    706a:	f000 bf65 	b.w	7f38 <z_fatal_error>

0000706e <z_do_kernel_oops>:
 *
 * @param esf exception frame
 * @param callee_regs Callee-saved registers (R4-R11)
 */
void z_do_kernel_oops(const z_arch_esf_t *esf, _callee_saved_t *callee_regs)
{
    706e:	4601      	mov	r1, r0
	z_fatal_error(reason, esf);
    7070:	6800      	ldr	r0, [r0, #0]
    7072:	f000 bf61 	b.w	7f38 <z_fatal_error>

00007076 <z_irq_spurious>:
 */
void z_irq_spurious(const void *unused)
{
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
    7076:	2100      	movs	r1, #0
    7078:	2001      	movs	r0, #1
    707a:	f7ff bff6 	b.w	706a <z_arm_fatal_error>

0000707e <z_arm_nmi>:
 * Simply call what is installed in 'static void(*handler)(void)'.
 *
 */

void z_arm_nmi(void)
{
    707e:	b508      	push	{r3, lr}
	handler();
    7080:	f7fa fcaa 	bl	19d8 <z_SysNmiOnReset>
	z_arm_int_exit();
}
    7084:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
    7088:	f7fa be12 	b.w	1cb0 <z_arm_exc_exit>

0000708c <strcpy>:

char *strcpy(char *ZRESTRICT d, const char *ZRESTRICT s)
{
	char *dest = d;

	while (*s != '\0') {
    708c:	3901      	subs	r1, #1
    708e:	4603      	mov	r3, r0
    7090:	f811 2f01 	ldrb.w	r2, [r1, #1]!
    7094:	b90a      	cbnz	r2, 709a <strcpy+0xe>
		*d = *s;
		d++;
		s++;
	}

	*d = '\0';
    7096:	701a      	strb	r2, [r3, #0]

	return dest;
}
    7098:	4770      	bx	lr
		*d = *s;
    709a:	f803 2b01 	strb.w	r2, [r3], #1
		s++;
    709e:	e7f7      	b.n	7090 <strcpy+0x4>

000070a0 <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
    70a0:	4603      	mov	r3, r0
	size_t n = 0;
    70a2:	2000      	movs	r0, #0

	while (*s != '\0') {
    70a4:	5c1a      	ldrb	r2, [r3, r0]
    70a6:	b902      	cbnz	r2, 70aa <strlen+0xa>
		s++;
		n++;
	}

	return n;
}
    70a8:	4770      	bx	lr
		n++;
    70aa:	3001      	adds	r0, #1
    70ac:	e7fa      	b.n	70a4 <strlen+0x4>

000070ae <strnlen>:
 *
 * @return number of bytes in fixed-size string <s>
 */

size_t strnlen(const char *s, size_t maxlen)
{
    70ae:	4603      	mov	r3, r0
	size_t n = 0;
    70b0:	2000      	movs	r0, #0

	while (*s != '\0' && n < maxlen) {
    70b2:	5c1a      	ldrb	r2, [r3, r0]
    70b4:	b10a      	cbz	r2, 70ba <strnlen+0xc>
    70b6:	4288      	cmp	r0, r1
    70b8:	d100      	bne.n	70bc <strnlen+0xe>
		s++;
		n++;
	}

	return n;
}
    70ba:	4770      	bx	lr
		n++;
    70bc:	3001      	adds	r0, #1
    70be:	e7f8      	b.n	70b2 <strnlen+0x4>

000070c0 <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *ZRESTRICT d, const void *ZRESTRICT s, size_t n)
{
    70c0:	b510      	push	{r4, lr}
    70c2:	1e43      	subs	r3, r0, #1
    70c4:	440a      	add	r2, r1
	}
#endif

	/* do byte-sized copying until finished */

	while (n > 0) {
    70c6:	4291      	cmp	r1, r2
    70c8:	d100      	bne.n	70cc <memcpy+0xc>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
    70ca:	bd10      	pop	{r4, pc}
		*(d_byte++) = *(s_byte++);
    70cc:	f811 4b01 	ldrb.w	r4, [r1], #1
    70d0:	f803 4f01 	strb.w	r4, [r3, #1]!
		n--;
    70d4:	e7f7      	b.n	70c6 <memcpy+0x6>

000070d6 <memset>:
void *memset(void *buf, int c, size_t n)
{
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
    70d6:	b2c9      	uxtb	r1, r1
	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;
#endif

	while (n > 0) {
    70d8:	4402      	add	r2, r0
	unsigned char *d_byte = (unsigned char *)buf;
    70da:	4603      	mov	r3, r0
	while (n > 0) {
    70dc:	4293      	cmp	r3, r2
    70de:	d100      	bne.n	70e2 <memset+0xc>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
    70e0:	4770      	bx	lr
		*(d_byte++) = c_byte;
    70e2:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
    70e6:	e7f9      	b.n	70dc <memset+0x6>

000070e8 <_stdout_hook_default>:
}
    70e8:	f04f 30ff 	mov.w	r0, #4294967295
    70ec:	4770      	bx	lr

000070ee <pm_state_set>:
/* Invoke Low Power/System Off specific Tasks */
__weak void pm_state_set(enum pm_state state, uint8_t substate_id)
{
	ARG_UNUSED(substate_id);

	switch (state) {
    70ee:	2806      	cmp	r0, #6
    70f0:	d108      	bne.n	7104 <pm_state_set+0x16>
    p_reg->SYSTEMOFF = POWER_SYSTEMOFF_SYSTEMOFF_Enter;
    70f2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    70f6:	2201      	movs	r2, #1
    70f8:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  __ASM volatile ("dsb 0xF":::"memory");
    70fc:	f3bf 8f4f 	dsb	sy
        __WFE();
    7100:	bf20      	wfe
    while (true)
    7102:	e7fd      	b.n	7100 <pm_state_set+0x12>
		break;
	default:
		LOG_DBG("Unsupported power state %u", state);
		break;
	}
}
    7104:	4770      	bx	lr

00007106 <pm_state_exit_post_ops>:
    7106:	2300      	movs	r3, #0
    7108:	f383 8811 	msr	BASEPRI, r3
    710c:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
    7110:	4770      	bx	lr

00007112 <adc_context_on_timer_expired>:
{
    7112:	b410      	push	{r4}
    7114:	4603      	mov	r3, r0
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    7116:	3808      	subs	r0, #8
    7118:	f3bf 8f5b 	dmb	ish
    711c:	e850 2f00 	ldrex	r2, [r0]
    7120:	1c51      	adds	r1, r2, #1
    7122:	e840 1400 	strex	r4, r1, [r0]
    7126:	2c00      	cmp	r4, #0
    7128:	d1f8      	bne.n	711c <adc_context_on_timer_expired+0xa>
    712a:	f3bf 8f5b 	dmb	ish
	if (atomic_inc(&ctx->sampling_requested) == 0) {
    712e:	b91a      	cbnz	r2, 7138 <adc_context_on_timer_expired+0x26>
}
    7130:	f85d 4b04 	ldr.w	r4, [sp], #4
		adc_context_start_sampling(ctx);
    7134:	f7fb b8ce 	b.w	22d4 <adc_context_start_sampling>
		ctx->status = -EBUSY;
    7138:	f06f 020f 	mvn.w	r2, #15
}
    713c:	f85d 4b04 	ldr.w	r4, [sp], #4
		ctx->status = -EBUSY;
    7140:	659a      	str	r2, [r3, #88]	; 0x58
}
    7142:	4770      	bx	lr

00007144 <get_status>:
	return GET_STATUS(get_sub_data(dev, type)->flags);
    7144:	6903      	ldr	r3, [r0, #16]
    7146:	b2c9      	uxtb	r1, r1
    7148:	220c      	movs	r2, #12
    714a:	fb01 3302 	mla	r3, r1, r2, r3
    714e:	6c18      	ldr	r0, [r3, #64]	; 0x40
}
    7150:	f000 0007 	and.w	r0, r0, #7
    7154:	4770      	bx	lr

00007156 <set_on_state>:
	__asm__ volatile(
    7156:	f04f 0320 	mov.w	r3, #32
    715a:	f3ef 8211 	mrs	r2, BASEPRI
    715e:	f383 8812 	msr	BASEPRI_MAX, r3
    7162:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
    7166:	6803      	ldr	r3, [r0, #0]
    7168:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    716c:	f043 0302 	orr.w	r3, r3, #2
    7170:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
    7172:	f382 8811 	msr	BASEPRI, r2
    7176:	f3bf 8f6f 	isb	sy
}
    717a:	4770      	bx	lr

0000717c <stop>:
{
    717c:	b570      	push	{r4, r5, r6, lr}
    717e:	b2c9      	uxtb	r1, r1
	struct nrf_clock_control_data *data = dev->data;
    7180:	6903      	ldr	r3, [r0, #16]
	__asm__ volatile(
    7182:	f04f 0420 	mov.w	r4, #32
    7186:	f3ef 8511 	mrs	r5, BASEPRI
    718a:	f384 8812 	msr	BASEPRI_MAX, r4
    718e:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    7192:	260c      	movs	r6, #12
    7194:	fb06 3401 	mla	r4, r6, r1, r3
    7198:	6c24      	ldr	r4, [r4, #64]	; 0x40
	if ((current_ctx != 0) && (current_ctx != ctx)) {
    719a:	f014 04c0 	ands.w	r4, r4, #192	; 0xc0
    719e:	d008      	beq.n	71b2 <stop+0x36>
    71a0:	42a2      	cmp	r2, r4
    71a2:	d006      	beq.n	71b2 <stop+0x36>
	__asm__ volatile(
    71a4:	f385 8811 	msr	BASEPRI, r5
    71a8:	f3bf 8f6f 	isb	sy
		err = -EPERM;
    71ac:	f04f 30ff 	mov.w	r0, #4294967295
}
    71b0:	bd70      	pop	{r4, r5, r6, pc}
		*flags = CLOCK_CONTROL_STATUS_OFF;
    71b2:	fb06 3301 	mla	r3, r6, r1, r3
    71b6:	2201      	movs	r2, #1
    71b8:	641a      	str	r2, [r3, #64]	; 0x40
    71ba:	f385 8811 	msr	BASEPRI, r5
    71be:	f3bf 8f6f 	isb	sy
	get_sub_config(dev, type)->stop();
    71c2:	6843      	ldr	r3, [r0, #4]
    71c4:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
    71c8:	685b      	ldr	r3, [r3, #4]
    71ca:	4798      	blx	r3
	return 0;
    71cc:	2000      	movs	r0, #0
    71ce:	e7ef      	b.n	71b0 <stop+0x34>

000071d0 <api_stop>:
	return stop(dev, subsys, CTX_API);
    71d0:	2280      	movs	r2, #128	; 0x80
    71d2:	f7ff bfd3 	b.w	717c <stop>

000071d6 <async_start>:
{
    71d6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    71d8:	9f06      	ldr	r7, [sp, #24]
	struct nrf_clock_control_data *data = dev->data;
    71da:	6904      	ldr	r4, [r0, #16]
	return &data->subsys[type];
    71dc:	b2c9      	uxtb	r1, r1
	__asm__ volatile(
    71de:	f04f 0520 	mov.w	r5, #32
    71e2:	f3ef 8611 	mrs	r6, BASEPRI
    71e6:	f385 8812 	msr	BASEPRI_MAX, r5
    71ea:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    71ee:	250c      	movs	r5, #12
    71f0:	fb05 4401 	mla	r4, r5, r1, r4
    71f4:	6c25      	ldr	r5, [r4, #64]	; 0x40
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
    71f6:	f005 0c07 	and.w	ip, r5, #7
    71fa:	f1bc 0f01 	cmp.w	ip, #1
    71fe:	d10c      	bne.n	721a <async_start+0x44>
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
    7200:	6427      	str	r7, [r4, #64]	; 0x40
	__asm__ volatile(
    7202:	f386 8811 	msr	BASEPRI, r6
    7206:	f3bf 8f6f 	isb	sy
	subdata->user_data = user_data;
    720a:	e9c4 230e 	strd	r2, r3, [r4, #56]	; 0x38
	 get_sub_config(dev, type)->start();
    720e:	6843      	ldr	r3, [r0, #4]
    7210:	f853 3031 	ldr.w	r3, [r3, r1, lsl #3]
    7214:	4798      	blx	r3
	return 0;
    7216:	2000      	movs	r0, #0
}
    7218:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	uint32_t current_ctx = GET_CTX(*flags);
    721a:	f005 05c0 	and.w	r5, r5, #192	; 0xc0
	} else if (current_ctx != ctx) {
    721e:	42af      	cmp	r7, r5
    7220:	f386 8811 	msr	BASEPRI, r6
    7224:	f3bf 8f6f 	isb	sy
		err = -EALREADY;
    7228:	bf0c      	ite	eq
    722a:	f06f 0077 	mvneq.w	r0, #119	; 0x77
		err = -EPERM;
    722e:	f04f 30ff 	movne.w	r0, #4294967295
    7232:	e7f1      	b.n	7218 <async_start+0x42>

00007234 <api_start>:
{
    7234:	b513      	push	{r0, r1, r4, lr}
	return async_start(dev, subsys, cb, user_data, CTX_API);
    7236:	2480      	movs	r4, #128	; 0x80
    7238:	9400      	str	r4, [sp, #0]
    723a:	f7ff ffcc 	bl	71d6 <async_start>
}
    723e:	b002      	add	sp, #8
    7240:	bd10      	pop	{r4, pc}

00007242 <onoff_started_callback>:
{
    7242:	b410      	push	{r4}
	return &data->mgr[type];
    7244:	6900      	ldr	r0, [r0, #16]
    7246:	b2cb      	uxtb	r3, r1
	notify(mgr, 0);
    7248:	241c      	movs	r4, #28
    724a:	fb03 0004 	mla	r0, r3, r4, r0
    724e:	2100      	movs	r1, #0
}
    7250:	f85d 4b04 	ldr.w	r4, [sp], #4
	notify(mgr, 0);
    7254:	4710      	bx	r2

00007256 <lfclk_start>:
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
    7256:	2000      	movs	r0, #0
    7258:	f000 bbc7 	b.w	79ea <nrfx_clock_start>

0000725c <lfclk_stop>:
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
    725c:	2000      	movs	r0, #0
    725e:	f000 bc00 	b.w	7a62 <nrfx_clock_stop>

00007262 <blocking_start_callback>:
{
    7262:	4610      	mov	r0, r2
	z_impl_k_sem_give(sem);
    7264:	f7fe bce2 	b.w	5c2c <z_impl_k_sem_give>

00007268 <gpio_nrfx_port_get_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    7268:	6843      	ldr	r3, [r0, #4]
    726a:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
    726c:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
	*value = nrf_gpio_port_in_read(reg);
    7270:	600b      	str	r3, [r1, #0]
}
    7272:	2000      	movs	r0, #0
    7274:	4770      	bx	lr

00007276 <gpio_nrfx_port_set_masked_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    7276:	6843      	ldr	r3, [r0, #4]
    7278:	685b      	ldr	r3, [r3, #4]
	const uint32_t set_mask = value & mask;
    727a:	ea02 0001 	and.w	r0, r2, r1
	const uint32_t clear_mask = (~set_mask) & mask;
    727e:	ea21 0102 	bic.w	r1, r1, r2
    p_reg->OUTSET = set_mask;
    7282:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
    p_reg->OUTCLR = clr_mask;
    7286:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
}
    728a:	2000      	movs	r0, #0
    728c:	4770      	bx	lr

0000728e <gpio_nrfx_port_set_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    728e:	6843      	ldr	r3, [r0, #4]
    7290:	685b      	ldr	r3, [r3, #4]
}
    7292:	2000      	movs	r0, #0
    p_reg->OUTSET = set_mask;
    7294:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
    7298:	4770      	bx	lr

0000729a <gpio_nrfx_port_clear_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    729a:	6843      	ldr	r3, [r0, #4]
    729c:	685b      	ldr	r3, [r3, #4]
}
    729e:	2000      	movs	r0, #0
    p_reg->OUTCLR = clr_mask;
    72a0:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
    72a4:	4770      	bx	lr

000072a6 <gpio_nrfx_port_toggle_bits>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    72a6:	6843      	ldr	r3, [r0, #4]
    72a8:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
    72aa:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
	const uint32_t set_mask = value & mask;
    72ae:	ea21 0003 	bic.w	r0, r1, r3
	const uint32_t clear_mask = (~value) & mask;
    72b2:	400b      	ands	r3, r1
    p_reg->OUTSET = set_mask;
    72b4:	f8c2 0508 	str.w	r0, [r2, #1288]	; 0x508
    p_reg->OUTCLR = clr_mask;
    72b8:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
}
    72bc:	2000      	movs	r0, #0
    72be:	4770      	bx	lr

000072c0 <gpio_nrfx_manage_callback>:
{
    72c0:	b510      	push	{r4, lr}
	return port->data;
    72c2:	6903      	ldr	r3, [r0, #16]
	return list->head;
    72c4:	6858      	ldr	r0, [r3, #4]
	if (!sys_slist_is_empty(callbacks)) {
    72c6:	b1f8      	cbz	r0, 7308 <gpio_nrfx_manage_callback+0x48>
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    72c8:	4288      	cmp	r0, r1
    72ca:	d119      	bne.n	7300 <gpio_nrfx_manage_callback+0x40>
Z_GENLIST_REMOVE(slist, snode)
    72cc:	689c      	ldr	r4, [r3, #8]
	return node->next;
    72ce:	6808      	ldr	r0, [r1, #0]
	list->head = node;
    72d0:	6058      	str	r0, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
    72d2:	42a1      	cmp	r1, r4
    72d4:	d100      	bne.n	72d8 <gpio_nrfx_manage_callback+0x18>
	list->tail = node;
    72d6:	6098      	str	r0, [r3, #8]
	parent->next = child;
    72d8:	2000      	movs	r0, #0
    72da:	6008      	str	r0, [r1, #0]
	if (set) {
    72dc:	b12a      	cbz	r2, 72ea <gpio_nrfx_manage_callback+0x2a>
	return list->head;
    72de:	685a      	ldr	r2, [r3, #4]
	parent->next = child;
    72e0:	600a      	str	r2, [r1, #0]
Z_GENLIST_PREPEND(slist, snode)
    72e2:	689a      	ldr	r2, [r3, #8]
	list->head = node;
    72e4:	6059      	str	r1, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
    72e6:	b902      	cbnz	r2, 72ea <gpio_nrfx_manage_callback+0x2a>
	list->tail = node;
    72e8:	6099      	str	r1, [r3, #8]
	return 0;
    72ea:	2000      	movs	r0, #0
	return gpio_manage_callback(&get_port_data(port)->callbacks,
    72ec:	e010      	b.n	7310 <gpio_nrfx_manage_callback+0x50>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    72ee:	4281      	cmp	r1, r0
    72f0:	d106      	bne.n	7300 <gpio_nrfx_manage_callback+0x40>
	return node->next;
    72f2:	6808      	ldr	r0, [r1, #0]
	parent->next = child;
    72f4:	6020      	str	r0, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
    72f6:	6898      	ldr	r0, [r3, #8]
    72f8:	4281      	cmp	r1, r0
    72fa:	d1ed      	bne.n	72d8 <gpio_nrfx_manage_callback+0x18>
	list->tail = node;
    72fc:	609c      	str	r4, [r3, #8]
}
    72fe:	e7eb      	b.n	72d8 <gpio_nrfx_manage_callback+0x18>
	return node->next;
    7300:	4604      	mov	r4, r0
    7302:	6800      	ldr	r0, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    7304:	2800      	cmp	r0, #0
    7306:	d1f2      	bne.n	72ee <gpio_nrfx_manage_callback+0x2e>
			if (!set) {
    7308:	2a00      	cmp	r2, #0
    730a:	d1e8      	bne.n	72de <gpio_nrfx_manage_callback+0x1e>
				return -EINVAL;
    730c:	f06f 0015 	mvn.w	r0, #21
}
    7310:	bd10      	pop	{r4, pc}

00007312 <i2c_nrfx_twi_configure>:
	if (I2C_ADDR_10_BITS & dev_config) {
    7312:	07ca      	lsls	r2, r1, #31
	const struct i2c_nrfx_twi_config *config = dev->config;
    7314:	6843      	ldr	r3, [r0, #4]
	struct i2c_nrfx_twi_data *data = dev->data;
    7316:	6900      	ldr	r0, [r0, #16]
	if (I2C_ADDR_10_BITS & dev_config) {
    7318:	d405      	bmi.n	7326 <i2c_nrfx_twi_configure+0x14>
	switch (I2C_SPEED_GET(dev_config)) {
    731a:	f3c1 0242 	ubfx	r2, r1, #1, #3
    731e:	2a01      	cmp	r2, #1
    7320:	d004      	beq.n	732c <i2c_nrfx_twi_configure+0x1a>
    7322:	2a02      	cmp	r2, #2
    7324:	d00a      	beq.n	733c <i2c_nrfx_twi_configure+0x2a>
    7326:	f06f 0015 	mvn.w	r0, #21
}
    732a:	4770      	bx	lr
		nrf_twi_frequency_set(inst->p_twi, NRF_TWI_FREQ_100K);
    732c:	681b      	ldr	r3, [r3, #0]
    p_reg->FREQUENCY = frequency;
    732e:	f04f 72cc 	mov.w	r2, #26738688	; 0x1980000
    7332:	f8c3 2524 	str.w	r2, [r3, #1316]	; 0x524
	data->dev_config = dev_config;
    7336:	6241      	str	r1, [r0, #36]	; 0x24
	return 0;
    7338:	2000      	movs	r0, #0
    733a:	4770      	bx	lr
		nrf_twi_frequency_set(inst->p_twi, NRF_TWI_FREQ_400K);
    733c:	681b      	ldr	r3, [r3, #0]
    733e:	f04f 62cd 	mov.w	r2, #107479040	; 0x6680000
    7342:	e7f6      	b.n	7332 <i2c_nrfx_twi_configure+0x20>

00007344 <led_gpio_set_brightness>:
	size_t num_leds;
	const struct gpio_dt_spec *led;
};

static int led_gpio_set_brightness(const struct device *dev, uint32_t led, uint8_t value)
{
    7344:	b410      	push	{r4}

	const struct led_gpio_config *config = dev->config;
    7346:	6843      	ldr	r3, [r0, #4]
	const struct gpio_dt_spec *led_gpio;

	if ((led >= config->num_leds) || (value > 100)) {
    7348:	6818      	ldr	r0, [r3, #0]
    734a:	4288      	cmp	r0, r1
    734c:	d918      	bls.n	7380 <led_gpio_set_brightness+0x3c>
    734e:	2a64      	cmp	r2, #100	; 0x64
    7350:	d816      	bhi.n	7380 <led_gpio_set_brightness+0x3c>
		return -EINVAL;
	}

	led_gpio = &config->led[led];
    7352:	685b      	ldr	r3, [r3, #4]
    7354:	eb03 04c1 	add.w	r4, r3, r1, lsl #3
 * @param value Value assigned to the pin.
 * @return a value from gpio_pin_set()
 */
static inline int gpio_pin_set_dt(const struct gpio_dt_spec *spec, int value)
{
	return gpio_pin_set(spec->port, spec->pin, value);
    7358:	f853 0031 	ldr.w	r0, [r3, r1, lsl #3]
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
    735c:	7923      	ldrb	r3, [r4, #4]
    735e:	2101      	movs	r1, #1
    7360:	4099      	lsls	r1, r3
    7362:	6903      	ldr	r3, [r0, #16]
    7364:	681b      	ldr	r3, [r3, #0]
    7366:	4219      	tst	r1, r3
    7368:	d103      	bne.n	7372 <led_gpio_set_brightness+0x2e>
	if (value != 0)	{
    736a:	b922      	cbnz	r2, 7376 <led_gpio_set_brightness+0x32>
	return api->port_clear_bits_raw(port, pins);
    736c:	6883      	ldr	r3, [r0, #8]
    736e:	691b      	ldr	r3, [r3, #16]
    7370:	e003      	b.n	737a <led_gpio_set_brightness+0x36>
	if (value != 0)	{
    7372:	2a00      	cmp	r2, #0
    7374:	d1fa      	bne.n	736c <led_gpio_set_brightness+0x28>
	return api->port_set_bits_raw(port, pins);
    7376:	6883      	ldr	r3, [r0, #8]
    7378:	68db      	ldr	r3, [r3, #12]

	return gpio_pin_set_dt(led_gpio, value > 0);
}
    737a:	f85d 4b04 	ldr.w	r4, [sp], #4
	return api->port_clear_bits_raw(port, pins);
    737e:	4718      	bx	r3
    7380:	f06f 0015 	mvn.w	r0, #21
    7384:	f85d 4b04 	ldr.w	r4, [sp], #4
    7388:	4770      	bx	lr

0000738a <led_gpio_on>:

static int led_gpio_on(const struct device *dev, uint32_t led)
{
	return led_gpio_set_brightness(dev, led, 100);
    738a:	2264      	movs	r2, #100	; 0x64
    738c:	f7ff bfda 	b.w	7344 <led_gpio_set_brightness>

00007390 <led_gpio_off>:
}

static int led_gpio_off(const struct device *dev, uint32_t led)
{
	return led_gpio_set_brightness(dev, led, 0);
    7390:	2200      	movs	r2, #0
    7392:	f7ff bfd7 	b.w	7344 <led_gpio_set_brightness>

00007396 <led_gpio_init>:
}

static int led_gpio_init(const struct device *dev)
{
    7396:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	const struct led_gpio_config *config = dev->config;
    739a:	6847      	ldr	r7, [r0, #4]
	int err = 0;

	if (!config->num_leds) {
    739c:	683b      	ldr	r3, [r7, #0]
    739e:	b173      	cbz	r3, 73be <led_gpio_init+0x28>
    73a0:	2400      	movs	r4, #0
	int err = 0;
    73a2:	4620      	mov	r0, r4
		data->invert |= (gpio_port_pins_t)BIT(pin);
    73a4:	2601      	movs	r6, #1
		LOG_ERR("%s: no LEDs found (DT child nodes missing)", dev->name);
		err = -ENODEV;
	}

	for (size_t i = 0; (i < config->num_leds) && !err; i++) {
    73a6:	683b      	ldr	r3, [r7, #0]
    73a8:	429c      	cmp	r4, r3
    73aa:	d20a      	bcs.n	73c2 <led_gpio_init+0x2c>
    73ac:	b948      	cbnz	r0, 73c2 <led_gpio_init+0x2c>
		const struct gpio_dt_spec *led = &config->led[i];
    73ae:	687d      	ldr	r5, [r7, #4]

		if (device_is_ready(led->port)) {
    73b0:	f855 0034 	ldr.w	r0, [r5, r4, lsl #3]
		const struct gpio_dt_spec *led = &config->led[i];
    73b4:	eb05 08c4 	add.w	r8, r5, r4, lsl #3
    73b8:	f000 fdb3 	bl	7f22 <z_device_is_ready>
		if (device_is_ready(led->port)) {
    73bc:	b918      	cbnz	r0, 73c6 <led_gpio_init+0x30>
			if (err) {
				LOG_ERR("Cannot configure GPIO (err %d)", err);
			}
		} else {
			LOG_ERR("%s: GPIO device not ready", dev->name);
			err = -ENODEV;
    73be:	f06f 0012 	mvn.w	r0, #18
		}
	}

	return err;
}
    73c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return gpio_pin_configure(spec->port,
    73c6:	f855 0034 	ldr.w	r0, [r5, r4, lsl #3]
				  spec->pin,
    73ca:	f898 1004 	ldrb.w	r1, [r8, #4]
				  spec->dt_flags | extra_flags);
    73ce:	f8b8 3006 	ldrh.w	r3, [r8, #6]
	struct gpio_driver_data *data =
    73d2:	f8d0 c010 	ldr.w	ip, [r0, #16]
	const struct gpio_driver_api *api =
    73d6:	f8d0 8008 	ldr.w	r8, [r0, #8]
		data->invert |= (gpio_port_pins_t)BIT(pin);
    73da:	f8dc 5000 	ldr.w	r5, [ip]
	    && ((flags & GPIO_ACTIVE_LOW) != 0)) {
    73de:	07da      	lsls	r2, r3, #31
	return gpio_pin_configure(spec->port,
    73e0:	bf54      	ite	pl
    73e2:	f443 13b0 	orrpl.w	r3, r3, #1441792	; 0x160000
		flags ^= GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH;
    73e6:	f483 13d0 	eormi.w	r3, r3, #1703936	; 0x1a0000
	flags &= ~GPIO_OUTPUT_INIT_LOGICAL;
    73ea:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
		data->invert |= (gpio_port_pins_t)BIT(pin);
    73ee:	fa06 fe01 	lsl.w	lr, r6, r1
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
    73f2:	07db      	lsls	r3, r3, #31
		data->invert |= (gpio_port_pins_t)BIT(pin);
    73f4:	bf4c      	ite	mi
    73f6:	ea45 050e 	orrmi.w	r5, r5, lr
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
    73fa:	ea25 050e 	bicpl.w	r5, r5, lr
    73fe:	f8cc 5000 	str.w	r5, [ip]
	return api->pin_configure(port, pin, flags);
    7402:	f8d8 3000 	ldr.w	r3, [r8]
    7406:	4798      	blx	r3
	for (size_t i = 0; (i < config->num_leds) && !err; i++) {
    7408:	3401      	adds	r4, #1
    740a:	e7cc      	b.n	73a6 <led_gpio_init+0x10>

0000740c <pinctrl_lookup_state>:

#include <zephyr/drivers/pinctrl.h>

int pinctrl_lookup_state(const struct pinctrl_dev_config *config, uint8_t id,
			 const struct pinctrl_state **state)
{
    740c:	b530      	push	{r4, r5, lr}
	*state = &config->states[0];
    740e:	6843      	ldr	r3, [r0, #4]
    7410:	6013      	str	r3, [r2, #0]
	while (*state < &config->states[config->state_cnt]) {
    7412:	7a05      	ldrb	r5, [r0, #8]
    7414:	6844      	ldr	r4, [r0, #4]
    7416:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
    741a:	42a3      	cmp	r3, r4
    741c:	d302      	bcc.n	7424 <pinctrl_lookup_state+0x18>
		}

		(*state)++;
	}

	return -ENOENT;
    741e:	f06f 0001 	mvn.w	r0, #1
}
    7422:	bd30      	pop	{r4, r5, pc}
		if (id == (*state)->id) {
    7424:	795c      	ldrb	r4, [r3, #5]
    7426:	428c      	cmp	r4, r1
    7428:	d001      	beq.n	742e <pinctrl_lookup_state+0x22>
		(*state)++;
    742a:	3308      	adds	r3, #8
    742c:	e7f0      	b.n	7410 <pinctrl_lookup_state+0x4>
			return 0;
    742e:	2000      	movs	r0, #0
    7430:	e7f7      	b.n	7422 <pinctrl_lookup_state+0x16>

00007432 <uarte_nrfx_config_get>:
	struct uarte_nrfx_data *data = dev->data;
    7432:	6902      	ldr	r2, [r0, #16]
{
    7434:	460b      	mov	r3, r1
	*cfg = data->uart_config;
    7436:	e9d2 0101 	ldrd	r0, r1, [r2, #4]
    743a:	e883 0003 	stmia.w	r3, {r0, r1}
}
    743e:	2000      	movs	r0, #0
    7440:	4770      	bx	lr

00007442 <uarte_nrfx_err_check>:
	return config->uarte_regs;
    7442:	6843      	ldr	r3, [r0, #4]
    7444:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
    7446:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
    744a:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
    744e:	4770      	bx	lr

00007450 <uarte_nrfx_poll_in>:
	return config->uarte_regs;
    7450:	6843      	ldr	r3, [r0, #4]
	const struct uarte_nrfx_data *data = dev->data;
    7452:	6902      	ldr	r2, [r0, #16]
	return config->uarte_regs;
    7454:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    7456:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
    745a:	b150      	cbz	r0, 7472 <uarte_nrfx_poll_in+0x22>
	*c = *data->rx_data;
    745c:	6952      	ldr	r2, [r2, #20]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    745e:	2000      	movs	r0, #0
    7460:	7812      	ldrb	r2, [r2, #0]
    7462:	700a      	strb	r2, [r1, #0]
    7464:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
    7468:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    746c:	2201      	movs	r2, #1
    746e:	601a      	str	r2, [r3, #0]
	return 0;
    7470:	4770      	bx	lr
		return -1;
    7472:	f04f 30ff 	mov.w	r0, #4294967295
}
    7476:	4770      	bx	lr

00007478 <is_tx_ready.isra.0>:
	return config->uarte_regs;
    7478:	6802      	ldr	r2, [r0, #0]
static bool is_tx_ready(const struct device *dev)
    747a:	4603      	mov	r3, r0
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    747c:	f8d2 0158 	ldr.w	r0, [r2, #344]	; 0x158
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
    7480:	b940      	cbnz	r0, 7494 <is_tx_ready.isra.0+0x1c>
	bool ppi_endtx = config->flags & UARTE_CFG_FLAG_PPI_ENDTX;
    7482:	685b      	ldr	r3, [r3, #4]
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
    7484:	079b      	lsls	r3, r3, #30
    7486:	d406      	bmi.n	7496 <is_tx_ready.isra.0+0x1e>
    7488:	f8d2 0120 	ldr.w	r0, [r2, #288]	; 0x120
    748c:	3800      	subs	r0, #0
    748e:	bf18      	it	ne
    7490:	2001      	movne	r0, #1
    7492:	4770      	bx	lr
    7494:	2001      	movs	r0, #1
}
    7496:	4770      	bx	lr

00007498 <uarte_nrfx_isr_int>:
	const struct uarte_nrfx_config *config = dev->config;
    7498:	6842      	ldr	r2, [r0, #4]
	return config->uarte_regs;
    749a:	6813      	ldr	r3, [r2, #0]
    return p_reg->INTENSET & mask;
    749c:	f8d3 1304 	ldr.w	r1, [r3, #772]	; 0x304
	if (nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK) &&
    74a0:	05c9      	lsls	r1, r1, #23
    74a2:	d518      	bpl.n	74d6 <uarte_nrfx_isr_int+0x3e>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    74a4:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
    74a8:	b1a9      	cbz	r1, 74d6 <uarte_nrfx_isr_int+0x3e>
	__asm__ volatile(
    74aa:	f04f 0020 	mov.w	r0, #32
    74ae:	f3ef 8111 	mrs	r1, BASEPRI
    74b2:	f380 8812 	msr	BASEPRI_MAX, r0
    74b6:	f3bf 8f6f 	isb	sy
    74ba:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
    74be:	b130      	cbz	r0, 74ce <uarte_nrfx_isr_int+0x36>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    74c0:	2000      	movs	r0, #0
    74c2:	f8c3 0120 	str.w	r0, [r3, #288]	; 0x120
    74c6:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    74ca:	2001      	movs	r0, #1
    74cc:	60d8      	str	r0, [r3, #12]
	__asm__ volatile(
    74ce:	f381 8811 	msr	BASEPRI, r1
    74d2:	f3bf 8f6f 	isb	sy
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
    74d6:	6852      	ldr	r2, [r2, #4]
    74d8:	06d2      	lsls	r2, r2, #27
    74da:	d515      	bpl.n	7508 <uarte_nrfx_isr_int+0x70>
	__asm__ volatile(
    74dc:	f04f 0120 	mov.w	r1, #32
    74e0:	f3ef 8211 	mrs	r2, BASEPRI
    74e4:	f381 8812 	msr	BASEPRI_MAX, r1
    74e8:	f3bf 8f6f 	isb	sy
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    74ec:	f8d3 1158 	ldr.w	r1, [r3, #344]	; 0x158
		if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
    74f0:	b111      	cbz	r1, 74f8 <uarte_nrfx_isr_int+0x60>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    74f2:	2100      	movs	r1, #0
    74f4:	f8c3 1500 	str.w	r1, [r3, #1280]	; 0x500
    p_reg->INTENCLR = mask;
    74f8:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
    74fc:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
	__asm__ volatile(
    7500:	f382 8811 	msr	BASEPRI, r2
    7504:	f3bf 8f6f 	isb	sy
}
    7508:	4770      	bx	lr

0000750a <irq_connect1>:
#ifdef CONFIG_SPI_0_NRF_SPI
SPI_NRFX_SPI_DEFINE(0);
#endif

#ifdef CONFIG_SPI_1_NRF_SPI
SPI_NRFX_SPI_DEFINE(1);
    750a:	2200      	movs	r2, #0
    750c:	2101      	movs	r1, #1
    750e:	2004      	movs	r0, #4
    7510:	f7fa ba4a 	b.w	19a8 <z_arm_irq_priority_set>

00007514 <spi_context_get_next_buf.constprop.0>:
static inline void *spi_context_get_next_buf(const struct spi_buf **current,
    7514:	b510      	push	{r4, lr}
	while (*count) {
    7516:	680b      	ldr	r3, [r1, #0]
    7518:	b913      	cbnz	r3, 7520 <spi_context_get_next_buf.constprop.0+0xc>
	*buf_len = 0;
    751a:	6013      	str	r3, [r2, #0]
	return NULL;
    751c:	4618      	mov	r0, r3
    751e:	e005      	b.n	752c <spi_context_get_next_buf.constprop.0+0x18>
		if (((*current)->len / dfs) != 0) {
    7520:	6803      	ldr	r3, [r0, #0]
    7522:	685c      	ldr	r4, [r3, #4]
    7524:	b11c      	cbz	r4, 752e <spi_context_get_next_buf.constprop.0+0x1a>
			*buf_len = (*current)->len / dfs;
    7526:	6014      	str	r4, [r2, #0]
			return (*current)->buf;
    7528:	6803      	ldr	r3, [r0, #0]
    752a:	6818      	ldr	r0, [r3, #0]
}
    752c:	bd10      	pop	{r4, pc}
		++(*current);
    752e:	3308      	adds	r3, #8
    7530:	6003      	str	r3, [r0, #0]
		--(*count);
    7532:	680b      	ldr	r3, [r1, #0]
    7534:	3b01      	subs	r3, #1
    7536:	600b      	str	r3, [r1, #0]
    7538:	e7ed      	b.n	7516 <spi_context_get_next_buf.constprop.0+0x2>

0000753a <gpio_pin_set_dt.isra.0>:
static inline int gpio_pin_set_dt(const struct gpio_dt_spec *spec, int value)
    753a:	4603      	mov	r3, r0
    753c:	460a      	mov	r2, r1
	return gpio_pin_set(spec->port, spec->pin, value);
    753e:	6800      	ldr	r0, [r0, #0]
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
    7540:	7919      	ldrb	r1, [r3, #4]
    7542:	2301      	movs	r3, #1
    7544:	fa03 f101 	lsl.w	r1, r3, r1
    7548:	6903      	ldr	r3, [r0, #16]
    754a:	681b      	ldr	r3, [r3, #0]
    754c:	4219      	tst	r1, r3
		value = (value != 0) ? 0 : 1;
    754e:	bf18      	it	ne
    7550:	f082 0201 	eorne.w	r2, r2, #1
	if (value != 0)	{
    7554:	b112      	cbz	r2, 755c <gpio_pin_set_dt.isra.0+0x22>
	return api->port_set_bits_raw(port, pins);
    7556:	6883      	ldr	r3, [r0, #8]
    7558:	68db      	ldr	r3, [r3, #12]
	return api->port_clear_bits_raw(port, pins);
    755a:	4718      	bx	r3
    755c:	6883      	ldr	r3, [r0, #8]
    755e:	691b      	ldr	r3, [r3, #16]
    7560:	e7fb      	b.n	755a <gpio_pin_set_dt.isra.0+0x20>

00007562 <_spi_context_cs_control>:
{
    7562:	b538      	push	{r3, r4, r5, lr}
	if (ctx->config && ctx->config->cs && ctx->config->cs->gpio.port) {
    7564:	6803      	ldr	r3, [r0, #0]
{
    7566:	4604      	mov	r4, r0
	if (ctx->config && ctx->config->cs && ctx->config->cs->gpio.port) {
    7568:	b1e3      	cbz	r3, 75a4 <_spi_context_cs_control+0x42>
    756a:	6898      	ldr	r0, [r3, #8]
    756c:	b1d0      	cbz	r0, 75a4 <_spi_context_cs_control+0x42>
    756e:	6805      	ldr	r5, [r0, #0]
    7570:	b1c5      	cbz	r5, 75a4 <_spi_context_cs_control+0x42>
		if (on) {
    7572:	b149      	cbz	r1, 7588 <_spi_context_cs_control+0x26>
			gpio_pin_set_dt(&ctx->config->cs->gpio, 1);
    7574:	2101      	movs	r1, #1
    7576:	f7ff ffe0 	bl	753a <gpio_pin_set_dt.isra.0>
			k_busy_wait(ctx->config->cs->delay);
    757a:	6823      	ldr	r3, [r4, #0]
    757c:	689b      	ldr	r3, [r3, #8]
    757e:	6898      	ldr	r0, [r3, #8]
}
    7580:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_impl_k_busy_wait(usec_to_wait);
    7584:	f000 be96 	b.w	82b4 <z_impl_k_busy_wait>
			if (!force_off &&
    7588:	b912      	cbnz	r2, 7590 <_spi_context_cs_control+0x2e>
    758a:	889b      	ldrh	r3, [r3, #4]
    758c:	04db      	lsls	r3, r3, #19
    758e:	d409      	bmi.n	75a4 <_spi_context_cs_control+0x42>
			k_busy_wait(ctx->config->cs->delay);
    7590:	6880      	ldr	r0, [r0, #8]
    7592:	f000 fe8f 	bl	82b4 <z_impl_k_busy_wait>
			gpio_pin_set_dt(&ctx->config->cs->gpio, 0);
    7596:	6823      	ldr	r3, [r4, #0]
    7598:	2100      	movs	r1, #0
    759a:	6898      	ldr	r0, [r3, #8]
}
    759c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			gpio_pin_set_dt(&ctx->config->cs->gpio, 0);
    75a0:	f7ff bfcb 	b.w	753a <gpio_pin_set_dt.isra.0>
}
    75a4:	bd38      	pop	{r3, r4, r5, pc}

000075a6 <spi_context_unlock_unconditionally>:
{
    75a6:	b510      	push	{r4, lr}
	_spi_context_cs_control(ctx, false, true);
    75a8:	2201      	movs	r2, #1
    75aa:	2100      	movs	r1, #0
{
    75ac:	4604      	mov	r4, r0
	_spi_context_cs_control(ctx, false, true);
    75ae:	f7ff ffd8 	bl	7562 <_spi_context_cs_control>
	if (!k_sem_count_get(&ctx->lock)) {
    75b2:	69a3      	ldr	r3, [r4, #24]
    75b4:	b933      	cbnz	r3, 75c4 <spi_context_unlock_unconditionally+0x1e>
		ctx->owner = NULL;
    75b6:	6063      	str	r3, [r4, #4]
	z_impl_k_sem_give(sem);
    75b8:	f104 0010 	add.w	r0, r4, #16
}
    75bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    75c0:	f7fe bb34 	b.w	5c2c <z_impl_k_sem_give>
    75c4:	bd10      	pop	{r4, pc}

000075c6 <spi_nrfx_release>:
{
    75c6:	b510      	push	{r4, lr}
	struct spi_nrfx_data *dev_data = dev->data;
    75c8:	6900      	ldr	r0, [r0, #16]
	if (!spi_context_configured(&dev_data->ctx, spi_cfg)) {
    75ca:	6803      	ldr	r3, [r0, #0]
    75cc:	428b      	cmp	r3, r1
    75ce:	d106      	bne.n	75de <spi_nrfx_release+0x18>
	if (dev_data->busy) {
    75d0:	f890 405c 	ldrb.w	r4, [r0, #92]	; 0x5c
    75d4:	b934      	cbnz	r4, 75e4 <spi_nrfx_release+0x1e>
	spi_context_unlock_unconditionally(&dev_data->ctx);
    75d6:	f7ff ffe6 	bl	75a6 <spi_context_unlock_unconditionally>
	return 0;
    75da:	4620      	mov	r0, r4
}
    75dc:	bd10      	pop	{r4, pc}
		return -EINVAL;
    75de:	f06f 0015 	mvn.w	r0, #21
    75e2:	e7fb      	b.n	75dc <spi_nrfx_release+0x16>
		return -EBUSY;
    75e4:	f06f 000f 	mvn.w	r0, #15
    75e8:	e7f8      	b.n	75dc <spi_nrfx_release+0x16>

000075ea <spi_nrfx_init>:
{
    75ea:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	const struct spi_nrfx_config *dev_config = dev->config;
    75ee:	6844      	ldr	r4, [r0, #4]
	struct spi_nrfx_data *dev_data = dev->data;
    75f0:	6905      	ldr	r5, [r0, #16]
	err = pinctrl_apply_state(dev_config->pcfg, PINCTRL_STATE_DEFAULT);
    75f2:	6a26      	ldr	r6, [r4, #32]
	ret = pinctrl_lookup_state(config, id, &state);
    75f4:	aa01      	add	r2, sp, #4
    75f6:	2100      	movs	r1, #0
    75f8:	4630      	mov	r0, r6
    75fa:	f7ff ff07 	bl	740c <pinctrl_lookup_state>
	if (ret < 0) {
    75fe:	2800      	cmp	r0, #0
    7600:	db43      	blt.n	768a <spi_nrfx_init+0xa0>
	return pinctrl_apply_state_direct(config, state);
    7602:	9b01      	ldr	r3, [sp, #4]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
    7604:	6832      	ldr	r2, [r6, #0]
    7606:	7919      	ldrb	r1, [r3, #4]
    7608:	6818      	ldr	r0, [r3, #0]
    760a:	f7fb fbed 	bl	2de8 <pinctrl_configure_pins>
	if (err < 0) {
    760e:	2800      	cmp	r0, #0
    7610:	db3b      	blt.n	768a <spi_nrfx_init+0xa0>
	dev_config->irq_connect();
    7612:	69e3      	ldr	r3, [r4, #28]
    7614:	4798      	blx	r3
	for (cs_gpio = ctx->cs_gpios; cs_gpio < &ctx->cs_gpios[ctx->num_cs_gpios]; cs_gpio++) {
    7616:	68ac      	ldr	r4, [r5, #8]
		data->invert |= (gpio_port_pins_t)BIT(pin);
    7618:	2601      	movs	r6, #1
    761a:	3408      	adds	r4, #8
    761c:	e9d5 3202 	ldrd	r3, r2, [r5, #8]
    7620:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    7624:	f1a4 0208 	sub.w	r2, r4, #8
    7628:	4293      	cmp	r3, r2
    762a:	d804      	bhi.n	7636 <spi_nrfx_init+0x4c>
	spi_context_unlock_unconditionally(&dev_data->ctx);
    762c:	4628      	mov	r0, r5
    762e:	f7ff ffba 	bl	75a6 <spi_context_unlock_unconditionally>
	return 0;
    7632:	2000      	movs	r0, #0
	return 0;
    7634:	e029      	b.n	768a <spi_nrfx_init+0xa0>
		if (!device_is_ready(cs_gpio->port)) {
    7636:	f854 0c08 	ldr.w	r0, [r4, #-8]
    763a:	f000 fc72 	bl	7f22 <z_device_is_ready>
    763e:	b338      	cbz	r0, 7690 <spi_nrfx_init+0xa6>
	return gpio_pin_configure(spec->port,
    7640:	f854 0c08 	ldr.w	r0, [r4, #-8]
				  spec->pin,
    7644:	f814 1c04 	ldrb.w	r1, [r4, #-4]
				  spec->dt_flags | extra_flags);
    7648:	f834 3c02 	ldrh.w	r3, [r4, #-2]
	struct gpio_driver_data *data =
    764c:	f8d0 c010 	ldr.w	ip, [r0, #16]
	const struct gpio_driver_api *api =
    7650:	f8d0 8008 	ldr.w	r8, [r0, #8]
		data->invert |= (gpio_port_pins_t)BIT(pin);
    7654:	f8dc 7000 	ldr.w	r7, [ip]
	    && ((flags & GPIO_ACTIVE_LOW) != 0)) {
    7658:	07da      	lsls	r2, r3, #31
	return gpio_pin_configure(spec->port,
    765a:	bf54      	ite	pl
    765c:	f443 13b0 	orrpl.w	r3, r3, #1441792	; 0x160000
		flags ^= GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH;
    7660:	f483 13d0 	eormi.w	r3, r3, #1703936	; 0x1a0000
	flags &= ~GPIO_OUTPUT_INIT_LOGICAL;
    7664:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
		data->invert |= (gpio_port_pins_t)BIT(pin);
    7668:	fa06 fe01 	lsl.w	lr, r6, r1
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
    766c:	07db      	lsls	r3, r3, #31
		data->invert |= (gpio_port_pins_t)BIT(pin);
    766e:	bf4c      	ite	mi
    7670:	ea4e 0707 	orrmi.w	r7, lr, r7
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
    7674:	ea27 070e 	bicpl.w	r7, r7, lr
    7678:	f8cc 7000 	str.w	r7, [ip]
	return api->pin_configure(port, pin, flags);
    767c:	f8d8 3000 	ldr.w	r3, [r8]
    7680:	4798      	blx	r3
		if (ret < 0) {
    7682:	2800      	cmp	r0, #0
    7684:	f104 0408 	add.w	r4, r4, #8
    7688:	dac8      	bge.n	761c <spi_nrfx_init+0x32>
}
    768a:	b002      	add	sp, #8
    768c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			return -ENODEV;
    7690:	f06f 0012 	mvn.w	r0, #18
	if (err < 0) {
    7694:	e7f9      	b.n	768a <spi_nrfx_init+0xa0>

00007696 <finish_transaction.isra.0>:
static void finish_transaction(const struct device *dev, int error)
    7696:	b538      	push	{r3, r4, r5, lr}
	_spi_context_cs_control(ctx, on, false);
    7698:	2200      	movs	r2, #0
    769a:	4604      	mov	r4, r0
    769c:	460d      	mov	r5, r1
    769e:	4611      	mov	r1, r2
    76a0:	f7ff ff5f 	bl	7562 <_spi_context_cs_control>
	ctx->sync_status = status;
    76a4:	6325      	str	r5, [r4, #48]	; 0x30
    76a6:	f104 0020 	add.w	r0, r4, #32
    76aa:	f7fe fabf 	bl	5c2c <z_impl_k_sem_give>
	dev_data->busy = false;
    76ae:	2300      	movs	r3, #0
    76b0:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
}
    76b4:	bd38      	pop	{r3, r4, r5, pc}

000076b6 <event_handler>:
{
    76b6:	b538      	push	{r3, r4, r5, lr}
	if (p_event->type == NRFX_SPI_EVENT_DONE) {
    76b8:	7803      	ldrb	r3, [r0, #0]
{
    76ba:	460c      	mov	r4, r1
	if (p_event->type == NRFX_SPI_EVENT_DONE) {
    76bc:	2b00      	cmp	r3, #0
    76be:	d145      	bne.n	774c <event_handler+0x96>
		if (dev_data->chunk_len == 0) {
    76c0:	6d8d      	ldr	r5, [r1, #88]	; 0x58
    76c2:	b93d      	cbnz	r5, 76d4 <event_handler+0x1e>
			finish_transaction(dev_data->dev, -ETIMEDOUT);
    76c4:	6d4b      	ldr	r3, [r1, #84]	; 0x54
    76c6:	f06f 0173 	mvn.w	r1, #115	; 0x73
    76ca:	6918      	ldr	r0, [r3, #16]
}
    76cc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			finish_transaction(dev_data->dev, -ETIMEDOUT);
    76d0:	f7ff bfe1 	b.w	7696 <finish_transaction.isra.0>
	if (!ctx->tx_len) {
    76d4:	6c8b      	ldr	r3, [r1, #72]	; 0x48
    76d6:	b193      	cbz	r3, 76fe <event_handler+0x48>
	if (len > ctx->tx_len) {
    76d8:	429d      	cmp	r5, r3
    76da:	d810      	bhi.n	76fe <event_handler+0x48>
	ctx->tx_len -= len;
    76dc:	1b5b      	subs	r3, r3, r5
    76de:	648b      	str	r3, [r1, #72]	; 0x48
	if (!ctx->tx_len) {
    76e0:	bb43      	cbnz	r3, 7734 <event_handler+0x7e>
		++ctx->current_tx;
    76e2:	6b4b      	ldr	r3, [r1, #52]	; 0x34
    76e4:	3308      	adds	r3, #8
    76e6:	634b      	str	r3, [r1, #52]	; 0x34
		--ctx->tx_count;
    76e8:	6b8b      	ldr	r3, [r1, #56]	; 0x38
    76ea:	3b01      	subs	r3, #1
    76ec:	638b      	str	r3, [r1, #56]	; 0x38
			spi_context_get_next_buf(&ctx->current_tx,
    76ee:	f101 0248 	add.w	r2, r1, #72	; 0x48
    76f2:	f104 0034 	add.w	r0, r4, #52	; 0x34
    76f6:	3138      	adds	r1, #56	; 0x38
    76f8:	f7ff ff0c 	bl	7514 <spi_context_get_next_buf.constprop.0>
		ctx->tx_buf = (const uint8_t *)
    76fc:	6460      	str	r0, [r4, #68]	; 0x44
	if (!ctx->rx_len) {
    76fe:	6d23      	ldr	r3, [r4, #80]	; 0x50
    7700:	b19b      	cbz	r3, 772a <event_handler+0x74>
	if (len > ctx->rx_len) {
    7702:	429d      	cmp	r5, r3
    7704:	d811      	bhi.n	772a <event_handler+0x74>
	ctx->rx_len -= len;
    7706:	1b5b      	subs	r3, r3, r5
    7708:	6523      	str	r3, [r4, #80]	; 0x50
	if (!ctx->rx_len) {
    770a:	b9cb      	cbnz	r3, 7740 <event_handler+0x8a>
		++ctx->current_rx;
    770c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    770e:	3308      	adds	r3, #8
    7710:	63e3      	str	r3, [r4, #60]	; 0x3c
		--ctx->rx_count;
    7712:	6c23      	ldr	r3, [r4, #64]	; 0x40
    7714:	3b01      	subs	r3, #1
    7716:	6423      	str	r3, [r4, #64]	; 0x40
			spi_context_get_next_buf(&ctx->current_rx,
    7718:	f104 0250 	add.w	r2, r4, #80	; 0x50
    771c:	f104 0140 	add.w	r1, r4, #64	; 0x40
    7720:	f104 003c 	add.w	r0, r4, #60	; 0x3c
    7724:	f7ff fef6 	bl	7514 <spi_context_get_next_buf.constprop.0>
		ctx->rx_buf = (uint8_t *)
    7728:	64e0      	str	r0, [r4, #76]	; 0x4c
		transfer_next_chunk(dev_data->dev);
    772a:	6d60      	ldr	r0, [r4, #84]	; 0x54
}
    772c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		transfer_next_chunk(dev_data->dev);
    7730:	f7fb be30 	b.w	3394 <transfer_next_chunk>
	} else if (ctx->tx_buf) {
    7734:	6c4b      	ldr	r3, [r1, #68]	; 0x44
    7736:	2b00      	cmp	r3, #0
    7738:	d0e1      	beq.n	76fe <event_handler+0x48>
		ctx->tx_buf += dfs * len;
    773a:	442b      	add	r3, r5
    773c:	644b      	str	r3, [r1, #68]	; 0x44
    773e:	e7de      	b.n	76fe <event_handler+0x48>
	} else if (ctx->rx_buf) {
    7740:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    7742:	2b00      	cmp	r3, #0
    7744:	d0f1      	beq.n	772a <event_handler+0x74>
		ctx->rx_buf += dfs * len;
    7746:	442b      	add	r3, r5
    7748:	64e3      	str	r3, [r4, #76]	; 0x4c
    774a:	e7ee      	b.n	772a <event_handler+0x74>
}
    774c:	bd38      	pop	{r3, r4, r5, pc}

0000774e <irq_connect3>:
#ifdef CONFIG_SPI_2_NRF_SPIM
SPI_NRFX_SPIM_DEFINE(2);
#endif

#ifdef CONFIG_SPI_3_NRF_SPIM
SPI_NRFX_SPIM_DEFINE(3);
    774e:	2200      	movs	r2, #0
    7750:	2101      	movs	r1, #1
    7752:	202f      	movs	r0, #47	; 0x2f
    7754:	f7fa b928 	b.w	19a8 <z_arm_irq_priority_set>

00007758 <spi_context_get_next_buf.constprop.0>:
static inline void *spi_context_get_next_buf(const struct spi_buf **current,
    7758:	b510      	push	{r4, lr}
	while (*count) {
    775a:	680b      	ldr	r3, [r1, #0]
    775c:	b913      	cbnz	r3, 7764 <spi_context_get_next_buf.constprop.0+0xc>
	*buf_len = 0;
    775e:	6013      	str	r3, [r2, #0]
	return NULL;
    7760:	4618      	mov	r0, r3
    7762:	e005      	b.n	7770 <spi_context_get_next_buf.constprop.0+0x18>
		if (((*current)->len / dfs) != 0) {
    7764:	6803      	ldr	r3, [r0, #0]
    7766:	685c      	ldr	r4, [r3, #4]
    7768:	b11c      	cbz	r4, 7772 <spi_context_get_next_buf.constprop.0+0x1a>
			*buf_len = (*current)->len / dfs;
    776a:	6014      	str	r4, [r2, #0]
			return (*current)->buf;
    776c:	6803      	ldr	r3, [r0, #0]
    776e:	6818      	ldr	r0, [r3, #0]
}
    7770:	bd10      	pop	{r4, pc}
		++(*current);
    7772:	3308      	adds	r3, #8
    7774:	6003      	str	r3, [r0, #0]
		--(*count);
    7776:	680b      	ldr	r3, [r1, #0]
    7778:	3b01      	subs	r3, #1
    777a:	600b      	str	r3, [r1, #0]
    777c:	e7ed      	b.n	775a <spi_context_get_next_buf.constprop.0+0x2>

0000777e <gpio_pin_set_dt.isra.0>:
static inline int gpio_pin_set_dt(const struct gpio_dt_spec *spec, int value)
    777e:	4603      	mov	r3, r0
    7780:	460a      	mov	r2, r1
	return gpio_pin_set(spec->port, spec->pin, value);
    7782:	6800      	ldr	r0, [r0, #0]
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
    7784:	7919      	ldrb	r1, [r3, #4]
    7786:	2301      	movs	r3, #1
    7788:	fa03 f101 	lsl.w	r1, r3, r1
    778c:	6903      	ldr	r3, [r0, #16]
    778e:	681b      	ldr	r3, [r3, #0]
    7790:	4219      	tst	r1, r3
		value = (value != 0) ? 0 : 1;
    7792:	bf18      	it	ne
    7794:	f082 0201 	eorne.w	r2, r2, #1
	if (value != 0)	{
    7798:	b112      	cbz	r2, 77a0 <gpio_pin_set_dt.isra.0+0x22>
	return api->port_set_bits_raw(port, pins);
    779a:	6883      	ldr	r3, [r0, #8]
    779c:	68db      	ldr	r3, [r3, #12]
	return api->port_clear_bits_raw(port, pins);
    779e:	4718      	bx	r3
    77a0:	6883      	ldr	r3, [r0, #8]
    77a2:	691b      	ldr	r3, [r3, #16]
    77a4:	e7fb      	b.n	779e <gpio_pin_set_dt.isra.0+0x20>

000077a6 <_spi_context_cs_control>:
{
    77a6:	b538      	push	{r3, r4, r5, lr}
	if (ctx->config && ctx->config->cs && ctx->config->cs->gpio.port) {
    77a8:	6803      	ldr	r3, [r0, #0]
{
    77aa:	4604      	mov	r4, r0
	if (ctx->config && ctx->config->cs && ctx->config->cs->gpio.port) {
    77ac:	b1e3      	cbz	r3, 77e8 <_spi_context_cs_control+0x42>
    77ae:	6898      	ldr	r0, [r3, #8]
    77b0:	b1d0      	cbz	r0, 77e8 <_spi_context_cs_control+0x42>
    77b2:	6805      	ldr	r5, [r0, #0]
    77b4:	b1c5      	cbz	r5, 77e8 <_spi_context_cs_control+0x42>
		if (on) {
    77b6:	b149      	cbz	r1, 77cc <_spi_context_cs_control+0x26>
			gpio_pin_set_dt(&ctx->config->cs->gpio, 1);
    77b8:	2101      	movs	r1, #1
    77ba:	f7ff ffe0 	bl	777e <gpio_pin_set_dt.isra.0>
			k_busy_wait(ctx->config->cs->delay);
    77be:	6823      	ldr	r3, [r4, #0]
    77c0:	689b      	ldr	r3, [r3, #8]
    77c2:	6898      	ldr	r0, [r3, #8]
}
    77c4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_impl_k_busy_wait(usec_to_wait);
    77c8:	f000 bd74 	b.w	82b4 <z_impl_k_busy_wait>
			if (!force_off &&
    77cc:	b912      	cbnz	r2, 77d4 <_spi_context_cs_control+0x2e>
    77ce:	889b      	ldrh	r3, [r3, #4]
    77d0:	04db      	lsls	r3, r3, #19
    77d2:	d409      	bmi.n	77e8 <_spi_context_cs_control+0x42>
			k_busy_wait(ctx->config->cs->delay);
    77d4:	6880      	ldr	r0, [r0, #8]
    77d6:	f000 fd6d 	bl	82b4 <z_impl_k_busy_wait>
			gpio_pin_set_dt(&ctx->config->cs->gpio, 0);
    77da:	6823      	ldr	r3, [r4, #0]
    77dc:	2100      	movs	r1, #0
    77de:	6898      	ldr	r0, [r3, #8]
}
    77e0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			gpio_pin_set_dt(&ctx->config->cs->gpio, 0);
    77e4:	f7ff bfcb 	b.w	777e <gpio_pin_set_dt.isra.0>
}
    77e8:	bd38      	pop	{r3, r4, r5, pc}

000077ea <spi_context_unlock_unconditionally>:
{
    77ea:	b510      	push	{r4, lr}
	_spi_context_cs_control(ctx, false, true);
    77ec:	2201      	movs	r2, #1
    77ee:	2100      	movs	r1, #0
{
    77f0:	4604      	mov	r4, r0
	_spi_context_cs_control(ctx, false, true);
    77f2:	f7ff ffd8 	bl	77a6 <_spi_context_cs_control>
	if (!k_sem_count_get(&ctx->lock)) {
    77f6:	69a3      	ldr	r3, [r4, #24]
    77f8:	b933      	cbnz	r3, 7808 <spi_context_unlock_unconditionally+0x1e>
		ctx->owner = NULL;
    77fa:	6063      	str	r3, [r4, #4]
	z_impl_k_sem_give(sem);
    77fc:	f104 0010 	add.w	r0, r4, #16
}
    7800:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    7804:	f7fe ba12 	b.w	5c2c <z_impl_k_sem_give>
    7808:	bd10      	pop	{r4, pc}

0000780a <spi_nrfx_release>:
{
    780a:	b510      	push	{r4, lr}
	struct spi_nrfx_data *dev_data = dev->data;
    780c:	6900      	ldr	r0, [r0, #16]
	if (!spi_context_configured(&dev_data->ctx, spi_cfg)) {
    780e:	6803      	ldr	r3, [r0, #0]
    7810:	428b      	cmp	r3, r1
    7812:	d106      	bne.n	7822 <spi_nrfx_release+0x18>
	if (dev_data->busy) {
    7814:	f890 405c 	ldrb.w	r4, [r0, #92]	; 0x5c
    7818:	b934      	cbnz	r4, 7828 <spi_nrfx_release+0x1e>
	spi_context_unlock_unconditionally(&dev_data->ctx);
    781a:	f7ff ffe6 	bl	77ea <spi_context_unlock_unconditionally>
	return 0;
    781e:	4620      	mov	r0, r4
}
    7820:	bd10      	pop	{r4, pc}
		return -EINVAL;
    7822:	f06f 0015 	mvn.w	r0, #21
    7826:	e7fb      	b.n	7820 <spi_nrfx_release+0x16>
		return -EBUSY;
    7828:	f06f 000f 	mvn.w	r0, #15
    782c:	e7f8      	b.n	7820 <spi_nrfx_release+0x16>

0000782e <spi_nrfx_init>:
{
    782e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	const struct spi_nrfx_config *dev_config = dev->config;
    7832:	6844      	ldr	r4, [r0, #4]
	struct spi_nrfx_data *dev_data = dev->data;
    7834:	6905      	ldr	r5, [r0, #16]
	err = pinctrl_apply_state(dev_config->pcfg, PINCTRL_STATE_DEFAULT);
    7836:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
	ret = pinctrl_lookup_state(config, id, &state);
    7838:	aa01      	add	r2, sp, #4
    783a:	2100      	movs	r1, #0
    783c:	4630      	mov	r0, r6
    783e:	f7ff fde5 	bl	740c <pinctrl_lookup_state>
	if (ret < 0) {
    7842:	2800      	cmp	r0, #0
    7844:	db43      	blt.n	78ce <spi_nrfx_init+0xa0>
	return pinctrl_apply_state_direct(config, state);
    7846:	9b01      	ldr	r3, [sp, #4]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
    7848:	6832      	ldr	r2, [r6, #0]
    784a:	7919      	ldrb	r1, [r3, #4]
    784c:	6818      	ldr	r0, [r3, #0]
    784e:	f7fb facb 	bl	2de8 <pinctrl_configure_pins>
	if (err < 0) {
    7852:	2800      	cmp	r0, #0
    7854:	db3b      	blt.n	78ce <spi_nrfx_init+0xa0>
	dev_config->irq_connect();
    7856:	6a63      	ldr	r3, [r4, #36]	; 0x24
    7858:	4798      	blx	r3
	for (cs_gpio = ctx->cs_gpios; cs_gpio < &ctx->cs_gpios[ctx->num_cs_gpios]; cs_gpio++) {
    785a:	68ac      	ldr	r4, [r5, #8]
		data->invert |= (gpio_port_pins_t)BIT(pin);
    785c:	2601      	movs	r6, #1
    785e:	3408      	adds	r4, #8
    7860:	e9d5 3202 	ldrd	r3, r2, [r5, #8]
    7864:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    7868:	f1a4 0208 	sub.w	r2, r4, #8
    786c:	4293      	cmp	r3, r2
    786e:	d804      	bhi.n	787a <spi_nrfx_init+0x4c>
	spi_context_unlock_unconditionally(&dev_data->ctx);
    7870:	4628      	mov	r0, r5
    7872:	f7ff ffba 	bl	77ea <spi_context_unlock_unconditionally>
	return 0;
    7876:	2000      	movs	r0, #0
	return 0;
    7878:	e029      	b.n	78ce <spi_nrfx_init+0xa0>
		if (!device_is_ready(cs_gpio->port)) {
    787a:	f854 0c08 	ldr.w	r0, [r4, #-8]
    787e:	f000 fb50 	bl	7f22 <z_device_is_ready>
    7882:	b338      	cbz	r0, 78d4 <spi_nrfx_init+0xa6>
	return gpio_pin_configure(spec->port,
    7884:	f854 0c08 	ldr.w	r0, [r4, #-8]
				  spec->pin,
    7888:	f814 1c04 	ldrb.w	r1, [r4, #-4]
				  spec->dt_flags | extra_flags);
    788c:	f834 3c02 	ldrh.w	r3, [r4, #-2]
	struct gpio_driver_data *data =
    7890:	f8d0 c010 	ldr.w	ip, [r0, #16]
	const struct gpio_driver_api *api =
    7894:	f8d0 8008 	ldr.w	r8, [r0, #8]
		data->invert |= (gpio_port_pins_t)BIT(pin);
    7898:	f8dc 7000 	ldr.w	r7, [ip]
	    && ((flags & GPIO_ACTIVE_LOW) != 0)) {
    789c:	07da      	lsls	r2, r3, #31
	return gpio_pin_configure(spec->port,
    789e:	bf54      	ite	pl
    78a0:	f443 13b0 	orrpl.w	r3, r3, #1441792	; 0x160000
		flags ^= GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH;
    78a4:	f483 13d0 	eormi.w	r3, r3, #1703936	; 0x1a0000
	flags &= ~GPIO_OUTPUT_INIT_LOGICAL;
    78a8:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
		data->invert |= (gpio_port_pins_t)BIT(pin);
    78ac:	fa06 fe01 	lsl.w	lr, r6, r1
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
    78b0:	07db      	lsls	r3, r3, #31
		data->invert |= (gpio_port_pins_t)BIT(pin);
    78b2:	bf4c      	ite	mi
    78b4:	ea4e 0707 	orrmi.w	r7, lr, r7
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
    78b8:	ea27 070e 	bicpl.w	r7, r7, lr
    78bc:	f8cc 7000 	str.w	r7, [ip]
	return api->pin_configure(port, pin, flags);
    78c0:	f8d8 3000 	ldr.w	r3, [r8]
    78c4:	4798      	blx	r3
		if (ret < 0) {
    78c6:	2800      	cmp	r0, #0
    78c8:	f104 0408 	add.w	r4, r4, #8
    78cc:	dac8      	bge.n	7860 <spi_nrfx_init+0x32>
}
    78ce:	b002      	add	sp, #8
    78d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			return -ENODEV;
    78d4:	f06f 0012 	mvn.w	r0, #18
	if (err < 0) {
    78d8:	e7f9      	b.n	78ce <spi_nrfx_init+0xa0>

000078da <finish_transaction.isra.0>:
static void finish_transaction(const struct device *dev, int error)
    78da:	b538      	push	{r3, r4, r5, lr}
	_spi_context_cs_control(ctx, on, false);
    78dc:	2200      	movs	r2, #0
    78de:	4604      	mov	r4, r0
    78e0:	460d      	mov	r5, r1
    78e2:	4611      	mov	r1, r2
    78e4:	f7ff ff5f 	bl	77a6 <_spi_context_cs_control>
	ctx->sync_status = status;
    78e8:	6325      	str	r5, [r4, #48]	; 0x30
    78ea:	f104 0020 	add.w	r0, r4, #32
    78ee:	f7fe f99d 	bl	5c2c <z_impl_k_sem_give>
	dev_data->busy = false;
    78f2:	2300      	movs	r3, #0
    78f4:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
}
    78f8:	bd38      	pop	{r3, r4, r5, pc}

000078fa <event_handler>:
{
    78fa:	b538      	push	{r3, r4, r5, lr}
	if (p_event->type == NRFX_SPIM_EVENT_DONE) {
    78fc:	7803      	ldrb	r3, [r0, #0]
{
    78fe:	460c      	mov	r4, r1
	if (p_event->type == NRFX_SPIM_EVENT_DONE) {
    7900:	2b00      	cmp	r3, #0
    7902:	d145      	bne.n	7990 <event_handler+0x96>
		if (dev_data->chunk_len == 0) {
    7904:	6d8d      	ldr	r5, [r1, #88]	; 0x58
    7906:	b93d      	cbnz	r5, 7918 <event_handler+0x1e>
			finish_transaction(dev_data->dev, -ETIMEDOUT);
    7908:	6d4b      	ldr	r3, [r1, #84]	; 0x54
    790a:	f06f 0173 	mvn.w	r1, #115	; 0x73
    790e:	6918      	ldr	r0, [r3, #16]
}
    7910:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			finish_transaction(dev_data->dev, -ETIMEDOUT);
    7914:	f7ff bfe1 	b.w	78da <finish_transaction.isra.0>
	if (!ctx->tx_len) {
    7918:	6c8b      	ldr	r3, [r1, #72]	; 0x48
    791a:	b193      	cbz	r3, 7942 <event_handler+0x48>
	if (len > ctx->tx_len) {
    791c:	429d      	cmp	r5, r3
    791e:	d810      	bhi.n	7942 <event_handler+0x48>
	ctx->tx_len -= len;
    7920:	1b5b      	subs	r3, r3, r5
    7922:	648b      	str	r3, [r1, #72]	; 0x48
	if (!ctx->tx_len) {
    7924:	bb43      	cbnz	r3, 7978 <event_handler+0x7e>
		++ctx->current_tx;
    7926:	6b4b      	ldr	r3, [r1, #52]	; 0x34
    7928:	3308      	adds	r3, #8
    792a:	634b      	str	r3, [r1, #52]	; 0x34
		--ctx->tx_count;
    792c:	6b8b      	ldr	r3, [r1, #56]	; 0x38
    792e:	3b01      	subs	r3, #1
    7930:	638b      	str	r3, [r1, #56]	; 0x38
			spi_context_get_next_buf(&ctx->current_tx,
    7932:	f101 0248 	add.w	r2, r1, #72	; 0x48
    7936:	f104 0034 	add.w	r0, r4, #52	; 0x34
    793a:	3138      	adds	r1, #56	; 0x38
    793c:	f7ff ff0c 	bl	7758 <spi_context_get_next_buf.constprop.0>
		ctx->tx_buf = (const uint8_t *)
    7940:	6460      	str	r0, [r4, #68]	; 0x44
	if (!ctx->rx_len) {
    7942:	6d23      	ldr	r3, [r4, #80]	; 0x50
    7944:	b19b      	cbz	r3, 796e <event_handler+0x74>
	if (len > ctx->rx_len) {
    7946:	429d      	cmp	r5, r3
    7948:	d811      	bhi.n	796e <event_handler+0x74>
	ctx->rx_len -= len;
    794a:	1b5b      	subs	r3, r3, r5
    794c:	6523      	str	r3, [r4, #80]	; 0x50
	if (!ctx->rx_len) {
    794e:	b9cb      	cbnz	r3, 7984 <event_handler+0x8a>
		++ctx->current_rx;
    7950:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    7952:	3308      	adds	r3, #8
    7954:	63e3      	str	r3, [r4, #60]	; 0x3c
		--ctx->rx_count;
    7956:	6c23      	ldr	r3, [r4, #64]	; 0x40
    7958:	3b01      	subs	r3, #1
    795a:	6423      	str	r3, [r4, #64]	; 0x40
			spi_context_get_next_buf(&ctx->current_rx,
    795c:	f104 0250 	add.w	r2, r4, #80	; 0x50
    7960:	f104 0140 	add.w	r1, r4, #64	; 0x40
    7964:	f104 003c 	add.w	r0, r4, #60	; 0x3c
    7968:	f7ff fef6 	bl	7758 <spi_context_get_next_buf.constprop.0>
		ctx->rx_buf = (uint8_t *)
    796c:	64e0      	str	r0, [r4, #76]	; 0x4c
		transfer_next_chunk(dev_data->dev);
    796e:	6d60      	ldr	r0, [r4, #84]	; 0x54
}
    7970:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		transfer_next_chunk(dev_data->dev);
    7974:	f7fb bea2 	b.w	36bc <transfer_next_chunk>
	} else if (ctx->tx_buf) {
    7978:	6c4b      	ldr	r3, [r1, #68]	; 0x44
    797a:	2b00      	cmp	r3, #0
    797c:	d0e1      	beq.n	7942 <event_handler+0x48>
		ctx->tx_buf += dfs * len;
    797e:	442b      	add	r3, r5
    7980:	644b      	str	r3, [r1, #68]	; 0x44
    7982:	e7de      	b.n	7942 <event_handler+0x48>
	} else if (ctx->rx_buf) {
    7984:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    7986:	2b00      	cmp	r3, #0
    7988:	d0f1      	beq.n	796e <event_handler+0x74>
		ctx->rx_buf += dfs * len;
    798a:	442b      	add	r3, r5
    798c:	64e3      	str	r3, [r4, #76]	; 0x4c
    798e:	e7ee      	b.n	796e <event_handler+0x74>
}
    7990:	bd38      	pop	{r3, r4, r5, pc}

00007992 <sys_clock_idle_exit>:
{
}

void __weak sys_clock_idle_exit(void)
{
}
    7992:	4770      	bx	lr

00007994 <event_clear>:
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
    7994:	f100 0350 	add.w	r3, r0, #80	; 0x50
    7998:	009b      	lsls	r3, r3, #2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    799a:	b29b      	uxth	r3, r3
    799c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    79a0:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
    79a4:	2200      	movs	r2, #0
    79a6:	601a      	str	r2, [r3, #0]
    79a8:	681b      	ldr	r3, [r3, #0]
}
    79aa:	4770      	bx	lr

000079ac <k_sys_fatal_error_handler>:

extern void sys_arch_reboot(int type);

void k_sys_fatal_error_handler(unsigned int reason,
			       const z_arch_esf_t *esf)
{
    79ac:	b508      	push	{r3, lr}

	LOG_PANIC();

	if (IS_ENABLED(CONFIG_RESET_ON_FATAL_ERROR)) {
		LOG_ERR("Resetting system");
		sys_arch_reboot(0);
    79ae:	2000      	movs	r0, #0
    79b0:	f7fa fc70 	bl	2294 <sys_arch_reboot>

000079b4 <hw_cc3xx_init_internal>:

	/* Initialize the cc3xx HW with or without RNG support */
#if CONFIG_ENTROPY_CC3XX
	res = nrf_cc3xx_platform_init();
#else
	res = nrf_cc3xx_platform_init_no_rng();
    79b4:	f7fe bf5e 	b.w	6874 <nrf_cc3xx_platform_init_no_rng>

000079b8 <hw_cc3xx_init>:

	return res;
}

static int hw_cc3xx_init(void)
{
    79b8:	b508      	push	{r3, lr}
	int res;

	/* Set the RTOS abort APIs */
	nrf_cc3xx_platform_abort_init();
    79ba:	f7f9 feb9 	bl	1730 <nrf_cc3xx_platform_abort_init>

	/* Set the RTOS mutex APIs */
	nrf_cc3xx_platform_mutex_init();
    79be:	f7f9 ff8d 	bl	18dc <nrf_cc3xx_platform_mutex_init>

	/* Enable the hardware */
	res = hw_cc3xx_init_internal();
	return res;
}
    79c2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	res = nrf_cc3xx_platform_init_no_rng();
    79c6:	f7fe bf55 	b.w	6874 <nrf_cc3xx_platform_init_no_rng>

000079ca <nrfx_isr>:
#include <zephyr/kernel.h>
#include <soc/nrfx_coredep.h>

void nrfx_isr(const void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
    79ca:	4700      	bx	r0

000079cc <nrfx_busy_wait>:
	z_impl_k_busy_wait(usec_to_wait);
    79cc:	f000 bc72 	b.w	82b4 <z_impl_k_busy_wait>

000079d0 <nrfx_clock_enable>:
{
    79d0:	b508      	push	{r3, lr}
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
    79d2:	2000      	movs	r0, #0
    79d4:	f7f9 ffda 	bl	198c <arch_irq_is_enabled>
    79d8:	b908      	cbnz	r0, 79de <nrfx_clock_enable+0xe>
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
    79da:	f7f9 ffb5 	bl	1948 <arch_irq_enable>
    p_reg->LFCLKSRC = (uint32_t)(source);
    79de:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    79e2:	2200      	movs	r2, #0
    79e4:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
}
    79e8:	bd08      	pop	{r3, pc}

000079ea <nrfx_clock_start>:
{
    79ea:	b508      	push	{r3, lr}
    switch (domain)
    79ec:	b110      	cbz	r0, 79f4 <nrfx_clock_start+0xa>
    79ee:	2801      	cmp	r0, #1
    79f0:	d02c      	beq.n	7a4c <nrfx_clock_start+0x62>
}
    79f2:	bd08      	pop	{r3, pc}
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    79f4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    79f8:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    79fc:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
    7a00:	03c8      	lsls	r0, r1, #15
    7a02:	d40b      	bmi.n	7a1c <nrfx_clock_start+0x32>
            return ((p_reg->LFCLKRUN & CLOCK_LFCLKRUN_STATUS_Msk)
    7a04:	f8d2 3414 	ldr.w	r3, [r2, #1044]	; 0x414
                else if (nrf_clock_start_task_check(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK))
    7a08:	07d9      	lsls	r1, r3, #31
    7a0a:	d50f      	bpl.n	7a2c <nrfx_clock_start+0x42>
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
    7a0c:	f8d2 341c 	ldr.w	r3, [r2, #1052]	; 0x41c
    is_correct_clk = is_correct_clk || (*p_lfclksrc == NRF_CLOCK_LFCLK_RC);
    7a10:	079b      	lsls	r3, r3, #30
    7a12:	d408      	bmi.n	7a26 <nrfx_clock_start+0x3c>
    p_reg->INTENSET = mask;
    7a14:	2302      	movs	r3, #2
    7a16:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
                        break;
    7a1a:	e7ea      	b.n	79f2 <nrfx_clock_start+0x8>
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    7a1c:	f003 0303 	and.w	r3, r3, #3
    is_correct_clk = is_correct_clk || (*p_lfclksrc == NRF_CLOCK_LFCLK_RC);
    7a20:	2b01      	cmp	r3, #1
    7a22:	d004      	beq.n	7a2e <nrfx_clock_start+0x44>
    7a24:	b113      	cbz	r3, 7a2c <nrfx_clock_start+0x42>
        clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
    7a26:	2000      	movs	r0, #0
    7a28:	f7fc fb96 	bl	4158 <clock_stop>
        *p_lfclksrc = clock_initial_lfclksrc_get();
    7a2c:	2300      	movs	r3, #0
    p_reg->LFCLKSRC = (uint32_t)(source);
    7a2e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    7a32:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    7a36:	2300      	movs	r3, #0
    7a38:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
    7a3c:	f8d2 3104 	ldr.w	r3, [r2, #260]	; 0x104
    p_reg->INTENSET = mask;
    7a40:	2302      	movs	r3, #2
    7a42:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    7a46:	2301      	movs	r3, #1
    7a48:	6093      	str	r3, [r2, #8]
}
    7a4a:	e7d2      	b.n	79f2 <nrfx_clock_start+0x8>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    7a4c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    7a50:	2200      	movs	r2, #0
    7a52:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    7a56:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENSET = mask;
    7a5a:	f8c3 0304 	str.w	r0, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    7a5e:	6018      	str	r0, [r3, #0]
}
    7a60:	e7c7      	b.n	79f2 <nrfx_clock_start+0x8>

00007a62 <nrfx_clock_stop>:
    clock_stop(domain);
    7a62:	f7fc bb79 	b.w	4158 <clock_stop>

00007a66 <nrf_gpio_reconfigure>:
{
    7a66:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    7a68:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    7a6a:	a801      	add	r0, sp, #4
{
    7a6c:	e9dd 4708 	ldrd	r4, r7, [sp, #32]
    7a70:	4616      	mov	r6, r2
    7a72:	461d      	mov	r5, r3
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    7a74:	f7fc fc18 	bl	42a8 <nrf_gpio_pin_port_decode>
    uint32_t cnf = reg->PIN_CNF[pin_number];
    7a78:	9b01      	ldr	r3, [sp, #4]
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
    7a7a:	f1b6 0c00 	subs.w	ip, r6, #0
    7a7e:	bf18      	it	ne
    7a80:	f04f 0c01 	movne.w	ip, #1
    7a84:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
    7a88:	1e0b      	subs	r3, r1, #0
    7a8a:	bf18      	it	ne
    7a8c:	2301      	movne	r3, #1
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    7a8e:	2d00      	cmp	r5, #0
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
    7a90:	ea43 034c 	orr.w	r3, r3, ip, lsl #1
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    7a94:	bf14      	ite	ne
    7a96:	f04f 0c0c 	movne.w	ip, #12
    7a9a:	f04f 0c00 	moveq.w	ip, #0
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
    7a9e:	2c00      	cmp	r4, #0
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
    7aa0:	ea43 030c 	orr.w	r3, r3, ip
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
    7aa4:	bf14      	ite	ne
    7aa6:	f44f 6ce0 	movne.w	ip, #1792	; 0x700
    7aaa:	f04f 0c00 	moveq.w	ip, #0
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
    7aae:	2f00      	cmp	r7, #0
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    7ab0:	ea43 030c 	orr.w	r3, r3, ip
    uint32_t cnf = reg->PIN_CNF[pin_number];
    7ab4:	f8d0 2700 	ldr.w	r2, [r0, #1792]	; 0x700
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
    7ab8:	bf14      	ite	ne
    7aba:	f44f 3c40 	movne.w	ip, #196608	; 0x30000
    7abe:	f04f 0c00 	moveq.w	ip, #0
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
    7ac2:	ea43 030c 	orr.w	r3, r3, ip
    cnf &= ~to_update;
    7ac6:	ea22 0303 	bic.w	r3, r2, r3
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    7aca:	b101      	cbz	r1, 7ace <nrf_gpio_reconfigure+0x68>
    7acc:	7809      	ldrb	r1, [r1, #0]
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
    7ace:	b10e      	cbz	r6, 7ad4 <nrf_gpio_reconfigure+0x6e>
    7ad0:	7836      	ldrb	r6, [r6, #0]
    7ad2:	0076      	lsls	r6, r6, #1
    7ad4:	4319      	orrs	r1, r3
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
    7ad6:	b10d      	cbz	r5, 7adc <nrf_gpio_reconfigure+0x76>
    7ad8:	782d      	ldrb	r5, [r5, #0]
    7ada:	00ad      	lsls	r5, r5, #2
    7adc:	4331      	orrs	r1, r6
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
    7ade:	b10c      	cbz	r4, 7ae4 <nrf_gpio_reconfigure+0x7e>
    7ae0:	7824      	ldrb	r4, [r4, #0]
    7ae2:	0224      	lsls	r4, r4, #8
    7ae4:	4329      	orrs	r1, r5
           ((uint32_t)(p_sense ? *p_sense : 0)<< GPIO_PIN_CNF_SENSE_Pos);
    7ae6:	b10f      	cbz	r7, 7aec <nrf_gpio_reconfigure+0x86>
    7ae8:	783f      	ldrb	r7, [r7, #0]
    7aea:	043f      	lsls	r7, r7, #16
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    7aec:	430c      	orrs	r4, r1
    7aee:	433c      	orrs	r4, r7
    reg->PIN_CNF[pin_number] = cnf;
    7af0:	f8c0 4700 	str.w	r4, [r0, #1792]	; 0x700
}
    7af4:	b003      	add	sp, #12
    7af6:	bdf0      	pop	{r4, r5, r6, r7, pc}

00007af8 <nrf_gpio_cfg_sense_set>:
{
    7af8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
    7afa:	f10d 030f 	add.w	r3, sp, #15
    7afe:	9301      	str	r3, [sp, #4]
    7b00:	2300      	movs	r3, #0
{
    7b02:	f88d 100f 	strb.w	r1, [sp, #15]
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
    7b06:	9300      	str	r3, [sp, #0]
    7b08:	461a      	mov	r2, r3
    7b0a:	4619      	mov	r1, r3
    7b0c:	f7ff ffab 	bl	7a66 <nrf_gpio_reconfigure>
}
    7b10:	b005      	add	sp, #20
    7b12:	f85d fb04 	ldr.w	pc, [sp], #4

00007b16 <nrf_gpio_cfg_default>:
{
    7b16:	b507      	push	{r0, r1, r2, lr}
    7b18:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    7b1a:	a801      	add	r0, sp, #4
    7b1c:	f7fc ff34 	bl	4988 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
    7b20:	9b01      	ldr	r3, [sp, #4]
    7b22:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    7b26:	2202      	movs	r2, #2
    7b28:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
    7b2c:	b003      	add	sp, #12
    7b2e:	f85d fb04 	ldr.w	pc, [sp], #4

00007b32 <nrf_gpio_pin_set>:
{
    7b32:	b507      	push	{r0, r1, r2, lr}
    7b34:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    7b36:	a801      	add	r0, sp, #4
    7b38:	f7fc ff26 	bl	4988 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    7b3c:	9a01      	ldr	r2, [sp, #4]
    7b3e:	2301      	movs	r3, #1
    7b40:	4093      	lsls	r3, r2
    p_reg->OUTSET = set_mask;
    7b42:	f8c0 3508 	str.w	r3, [r0, #1288]	; 0x508
}
    7b46:	b003      	add	sp, #12
    7b48:	f85d fb04 	ldr.w	pc, [sp], #4

00007b4c <nrf_gpio_pin_clear>:
{
    7b4c:	b507      	push	{r0, r1, r2, lr}
    7b4e:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    7b50:	a801      	add	r0, sp, #4
    7b52:	f7fc ff19 	bl	4988 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    7b56:	9a01      	ldr	r2, [sp, #4]
    7b58:	2301      	movs	r3, #1
    7b5a:	4093      	lsls	r3, r2
    p_reg->OUTCLR = clr_mask;
    7b5c:	f8c0 350c 	str.w	r3, [r0, #1292]	; 0x50c
}
    7b60:	b003      	add	sp, #12
    7b62:	f85d fb04 	ldr.w	pc, [sp], #4

00007b66 <transfer_byte>:
{
    7b66:	b537      	push	{r0, r1, r2, r4, r5, lr}
    return p_reg->RXD;
    7b68:	f8d0 3518 	ldr.w	r3, [r0, #1304]	; 0x518
    if (p_cb->bytes_transferred < p_cb->evt.xfer_desc.rx_length)
    7b6c:	698a      	ldr	r2, [r1, #24]
    7b6e:	b2db      	uxtb	r3, r3
    volatile uint8_t rx_data = nrf_spi_rxd_get(p_spi);
    7b70:	f88d 3007 	strb.w	r3, [sp, #7]
    if (p_cb->bytes_transferred < p_cb->evt.xfer_desc.rx_length)
    7b74:	6a0b      	ldr	r3, [r1, #32]
    7b76:	4293      	cmp	r3, r2
        p_cb->evt.xfer_desc.p_rx_buffer[p_cb->bytes_transferred] = rx_data;
    7b78:	bf3e      	ittt	cc
    7b7a:	694a      	ldrcc	r2, [r1, #20]
    7b7c:	f89d 4007 	ldrbcc.w	r4, [sp, #7]
    7b80:	54d4      	strbcc	r4, [r2, r3]
    ++p_cb->bytes_transferred;
    7b82:	6a0b      	ldr	r3, [r1, #32]
    if (p_cb->abort)
    7b84:	f891 5024 	ldrb.w	r5, [r1, #36]	; 0x24
        if (bytes_used < p_cb->evt.xfer_desc.tx_length)
    7b88:	690c      	ldr	r4, [r1, #16]
    ++p_cb->bytes_transferred;
    7b8a:	1c5a      	adds	r2, r3, #1
    7b8c:	620a      	str	r2, [r1, #32]
    size_t bytes_used = p_cb->bytes_transferred + 1;
    7b8e:	3302      	adds	r3, #2
    if (p_cb->abort)
    7b90:	b135      	cbz	r5, 7ba0 <transfer_byte+0x3a>
        if (bytes_used < p_cb->evt.xfer_desc.tx_length)
    7b92:	42a3      	cmp	r3, r4
        if (bytes_used < p_cb->evt.xfer_desc.rx_length)
    7b94:	698c      	ldr	r4, [r1, #24]
            p_cb->evt.xfer_desc.tx_length = bytes_used;
    7b96:	bf38      	it	cc
    7b98:	610b      	strcc	r3, [r1, #16]
        if (bytes_used < p_cb->evt.xfer_desc.rx_length)
    7b9a:	429c      	cmp	r4, r3
            p_cb->evt.xfer_desc.rx_length = bytes_used;
    7b9c:	bf88      	it	hi
    7b9e:	618b      	strhi	r3, [r1, #24]
    if (bytes_used < p_cb->evt.xfer_desc.tx_length)
    7ba0:	690d      	ldr	r5, [r1, #16]
    7ba2:	429d      	cmp	r5, r3
    7ba4:	d905      	bls.n	7bb2 <transfer_byte+0x4c>
        nrf_spi_txd_set(p_spi, p_cb->evt.xfer_desc.p_tx_buffer[bytes_used]);
    7ba6:	68ca      	ldr	r2, [r1, #12]
    p_reg->TXD = data;
    7ba8:	5cd3      	ldrb	r3, [r2, r3]
    7baa:	f8c0 351c 	str.w	r3, [r0, #1308]	; 0x51c
    return (p_cb->bytes_transferred < p_cb->evt.xfer_desc.tx_length ||
    7bae:	2001      	movs	r0, #1
    7bb0:	e00a      	b.n	7bc8 <transfer_byte+0x62>
    else if (bytes_used < p_cb->evt.xfer_desc.rx_length)
    7bb2:	698c      	ldr	r4, [r1, #24]
    7bb4:	429c      	cmp	r4, r3
    7bb6:	d901      	bls.n	7bbc <transfer_byte+0x56>
    7bb8:	7fcb      	ldrb	r3, [r1, #31]
    7bba:	e7f6      	b.n	7baa <transfer_byte+0x44>
    return (p_cb->bytes_transferred < p_cb->evt.xfer_desc.tx_length ||
    7bbc:	42aa      	cmp	r2, r5
    7bbe:	d3f6      	bcc.n	7bae <transfer_byte+0x48>
    7bc0:	42a2      	cmp	r2, r4
    7bc2:	bf2c      	ite	cs
    7bc4:	2000      	movcs	r0, #0
    7bc6:	2001      	movcc	r0, #1
}
    7bc8:	b003      	add	sp, #12
    7bca:	bd30      	pop	{r4, r5, pc}

00007bcc <irq_handler>:
{
    7bcc:	b570      	push	{r4, r5, r6, lr}
    7bce:	4603      	mov	r3, r0
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    7bd0:	2500      	movs	r5, #0
    7bd2:	f8c0 5108 	str.w	r5, [r0, #264]	; 0x108
    7bd6:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    7bda:	460c      	mov	r4, r1
    if (!transfer_byte(p_spi, p_cb))
    7bdc:	f7ff ffc3 	bl	7b66 <transfer_byte>
    7be0:	b968      	cbnz	r0, 7bfe <irq_handler+0x32>
    if (p_cb->ss_pin != NRFX_SPI_PIN_NOT_USED)
    7be2:	7f88      	ldrb	r0, [r1, #30]
    7be4:	28ff      	cmp	r0, #255	; 0xff
    7be6:	d001      	beq.n	7bec <irq_handler+0x20>
        nrf_gpio_pin_set(pin_number);
    7be8:	f7ff ffa3 	bl	7b32 <nrf_gpio_pin_set>
    p_cb->handler(&p_cb->evt, p_cb->p_context);
    7bec:	4620      	mov	r0, r4
    p_cb->transfer_in_progress = false;
    7bee:	7765      	strb	r5, [r4, #29]
    p_cb->evt.type = NRFX_SPI_EVENT_DONE;
    7bf0:	7225      	strb	r5, [r4, #8]
    p_cb->handler(&p_cb->evt, p_cb->p_context);
    7bf2:	6861      	ldr	r1, [r4, #4]
    7bf4:	f850 3b08 	ldr.w	r3, [r0], #8
}
    7bf8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    p_cb->handler(&p_cb->evt, p_cb->p_context);
    7bfc:	4718      	bx	r3
}
    7bfe:	bd70      	pop	{r4, r5, r6, pc}

00007c00 <nrf_gpio_pin_set>:
{
    7c00:	b507      	push	{r0, r1, r2, lr}
    7c02:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    7c04:	a801      	add	r0, sp, #4
    7c06:	f7fd f839 	bl	4c7c <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    7c0a:	9a01      	ldr	r2, [sp, #4]
    7c0c:	2301      	movs	r3, #1
    7c0e:	4093      	lsls	r3, r2
    p_reg->OUTSET = set_mask;
    7c10:	f8c0 3508 	str.w	r3, [r0, #1288]	; 0x508
}
    7c14:	b003      	add	sp, #12
    7c16:	f85d fb04 	ldr.w	pc, [sp], #4

00007c1a <nrf_gpio_pin_clear>:
{
    7c1a:	b507      	push	{r0, r1, r2, lr}
    7c1c:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    7c1e:	a801      	add	r0, sp, #4
    7c20:	f7fd f82c 	bl	4c7c <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    7c24:	9a01      	ldr	r2, [sp, #4]
    7c26:	2301      	movs	r3, #1
    7c28:	4093      	lsls	r3, r2
    p_reg->OUTCLR = clr_mask;
    7c2a:	f8c0 350c 	str.w	r3, [r0, #1292]	; 0x50c
}
    7c2e:	b003      	add	sp, #12
    7c30:	f85d fb04 	ldr.w	pc, [sp], #4

00007c34 <spim_pin_uninit>:
    if (pin == NRF_SPIM_PIN_NOT_CONNECTED)
    7c34:	1c43      	adds	r3, r0, #1
{
    7c36:	b507      	push	{r0, r1, r2, lr}
    if (pin == NRF_SPIM_PIN_NOT_CONNECTED)
    7c38:	d009      	beq.n	7c4e <spim_pin_uninit+0x1a>
    nrf_gpio_cfg(
    7c3a:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    7c3c:	a801      	add	r0, sp, #4
    7c3e:	f7fd f81d 	bl	4c7c <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
    7c42:	9b01      	ldr	r3, [sp, #4]
    7c44:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    7c48:	2202      	movs	r2, #2
    7c4a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
    7c4e:	b003      	add	sp, #12
    7c50:	f85d fb04 	ldr.w	pc, [sp], #4

00007c54 <set_ss_pin_state>:
    if (p_cb->use_hw_ss)
    7c54:	7f83      	ldrb	r3, [r0, #30]
    7c56:	075a      	lsls	r2, r3, #29
    7c58:	d40b      	bmi.n	7c72 <set_ss_pin_state+0x1e>
    if (p_cb->ss_pin != NRFX_SPIM_PIN_NOT_USED)
    7c5a:	7fc0      	ldrb	r0, [r0, #31]
    7c5c:	28ff      	cmp	r0, #255	; 0xff
    7c5e:	d008      	beq.n	7c72 <set_ss_pin_state+0x1e>
        nrf_gpio_pin_write(p_cb->ss_pin,
    7c60:	079b      	lsls	r3, r3, #30
    7c62:	bf58      	it	pl
    7c64:	f081 0101 	eorpl.w	r1, r1, #1
    if (value == 0)
    7c68:	b909      	cbnz	r1, 7c6e <set_ss_pin_state+0x1a>
        nrf_gpio_pin_clear(pin_number);
    7c6a:	f7ff bfd6 	b.w	7c1a <nrf_gpio_pin_clear>
        nrf_gpio_pin_set(pin_number);
    7c6e:	f7ff bfc7 	b.w	7c00 <nrf_gpio_pin_set>
}
    7c72:	4770      	bx	lr

00007c74 <twi_transfer>:
{
    7c74:	b530      	push	{r4, r5, lr}
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    7c76:	f8d0 3104 	ldr.w	r3, [r0, #260]	; 0x104
    if (nrf_twi_event_check(p_twi, NRF_TWI_EVENT_STOPPED))
    7c7a:	b12b      	cbz	r3, 7c88 <twi_transfer+0x14>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    7c7c:	2300      	movs	r3, #0
    7c7e:	f8c0 3104 	str.w	r3, [r0, #260]	; 0x104
    7c82:	f8d0 3104 	ldr.w	r3, [r0, #260]	; 0x104
        stopped = true;
    7c86:	2301      	movs	r3, #1
    if (p_cb->error)
    7c88:	f891 202f 	ldrb.w	r2, [r1, #47]	; 0x2f
    7c8c:	b322      	cbz	r2, 7cd8 <twi_transfer+0x64>
    7c8e:	2200      	movs	r2, #0
    7c90:	f8c0 2124 	str.w	r2, [r0, #292]	; 0x124
    7c94:	f8d0 4124 	ldr.w	r4, [r0, #292]	; 0x124
    7c98:	f8c0 211c 	str.w	r2, [r0, #284]	; 0x11c
    7c9c:	f8d0 411c 	ldr.w	r4, [r0, #284]	; 0x11c
    7ca0:	f8c0 2108 	str.w	r2, [r0, #264]	; 0x108
    7ca4:	f8d0 2108 	ldr.w	r2, [r0, #264]	; 0x108
    if (stopped)
    7ca8:	2b00      	cmp	r3, #0
    7caa:	d079      	beq.n	7da0 <twi_transfer+0x12c>
        p_cb->prev_suspend = TWI_NO_SUSPEND;
    7cac:	2200      	movs	r2, #0
    7cae:	f881 202d 	strb.w	r2, [r1, #45]	; 0x2d
        if (!p_cb->error)
    7cb2:	f891 202f 	ldrb.w	r2, [r1, #47]	; 0x2f
    7cb6:	2a00      	cmp	r2, #0
    7cb8:	d137      	bne.n	7d2a <twi_transfer+0xb6>
    if (p_cb->bytes_transferred != p_cb->curr_length)
    7cba:	6a8d      	ldr	r5, [r1, #40]	; 0x28
    7cbc:	6b4c      	ldr	r4, [r1, #52]	; 0x34
    7cbe:	42a5      	cmp	r5, r4
    p_reg->ENABLE = (TWI_ENABLE_ENABLE_Enabled << TWI_ENABLE_ENABLE_Pos);
    7cc0:	bf1f      	itttt	ne
    7cc2:	2305      	movne	r3, #5
    p_reg->ENABLE = (TWI_ENABLE_ENABLE_Disabled << TWI_ENABLE_ENABLE_Pos);
    7cc4:	f8c0 2500 	strne.w	r2, [r0, #1280]	; 0x500
    p_reg->ENABLE = (TWI_ENABLE_ENABLE_Enabled << TWI_ENABLE_ENABLE_Pos);
    7cc8:	f8c0 3500 	strne.w	r3, [r0, #1280]	; 0x500
        return false;
    7ccc:	4613      	movne	r3, r2
            p_cb->error = !xfer_completeness_check(p_twi, p_cb);
    7cce:	f083 0301 	eor.w	r3, r3, #1
    7cd2:	f881 302f 	strb.w	r3, [r1, #47]	; 0x2f
    7cd6:	e028      	b.n	7d2a <twi_transfer+0xb6>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    7cd8:	f8d0 4124 	ldr.w	r4, [r0, #292]	; 0x124
    else if (nrf_twi_event_check(p_twi, NRF_TWI_EVENT_ERROR))
    7cdc:	b114      	cbz	r4, 7ce4 <twi_transfer+0x70>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    7cde:	f8c0 2124 	str.w	r2, [r0, #292]	; 0x124
    7ce2:	e00e      	b.n	7d02 <twi_transfer+0x8e>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    7ce4:	f8d0 211c 	ldr.w	r2, [r0, #284]	; 0x11c
        if (nrf_twi_event_check(p_twi, NRF_TWI_EVENT_TXDSENT))
    7ce8:	b36a      	cbz	r2, 7d46 <twi_transfer+0xd2>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    7cea:	f8c0 411c 	str.w	r4, [r0, #284]	; 0x11c
    7cee:	f8d0 211c 	ldr.w	r2, [r0, #284]	; 0x11c
            ++(p_cb->bytes_transferred);
    7cf2:	6b4a      	ldr	r2, [r1, #52]	; 0x34
    7cf4:	3201      	adds	r2, #1
    7cf6:	634a      	str	r2, [r1, #52]	; 0x34
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    7cf8:	f8d0 5124 	ldr.w	r5, [r0, #292]	; 0x124
            if (nrf_twi_event_check(p_twi, NRF_TWI_EVENT_ERROR))
    7cfc:	b145      	cbz	r5, 7d10 <twi_transfer+0x9c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    7cfe:	f8c0 4124 	str.w	r4, [r0, #292]	; 0x124
    7d02:	f8d0 2124 	ldr.w	r2, [r0, #292]	; 0x124
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    7d06:	2201      	movs	r2, #1
    7d08:	6142      	str	r2, [r0, #20]
                p_cb->error = true;
    7d0a:	f881 202f 	strb.w	r2, [r1, #47]	; 0x2f
    7d0e:	e7cb      	b.n	7ca8 <twi_transfer+0x34>
    if (p_cb->bytes_transferred < p_cb->curr_length)
    7d10:	6a8c      	ldr	r4, [r1, #40]	; 0x28
    7d12:	42a2      	cmp	r2, r4
    7d14:	d204      	bcs.n	7d20 <twi_transfer+0xac>
        nrf_twi_txd_set(p_twi, p_cb->p_curr_buf[p_cb->bytes_transferred]);
    7d16:	6a4c      	ldr	r4, [r1, #36]	; 0x24
    p_reg->TXD = data;
    7d18:	5ca2      	ldrb	r2, [r4, r2]
    7d1a:	f8c0 251c 	str.w	r2, [r0, #1308]	; 0x51c
    7d1e:	e7c3      	b.n	7ca8 <twi_transfer+0x34>
        if (p_cb->curr_tx_no_stop)
    7d20:	f891 202c 	ldrb.w	r2, [r1, #44]	; 0x2c
    7d24:	b11a      	cbz	r2, 7d2e <twi_transfer+0xba>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    7d26:	2301      	movs	r3, #1
    7d28:	61c3      	str	r3, [r0, #28]
                    return false;
    7d2a:	2000      	movs	r0, #0
}
    7d2c:	bd30      	pop	{r4, r5, pc}
        else if(TWI_FLAG_SUSPEND(p_cb->flags))
    7d2e:	6a0a      	ldr	r2, [r1, #32]
    7d30:	f012 0f40 	tst.w	r2, #64	; 0x40
    7d34:	f04f 0201 	mov.w	r2, #1
    7d38:	d003      	beq.n	7d42 <twi_transfer+0xce>
    7d3a:	61c2      	str	r2, [r0, #28]
            p_cb->prev_suspend = TWI_SUSPEND_TX;
    7d3c:	f881 202d 	strb.w	r2, [r1, #45]	; 0x2d
            return false;
    7d40:	e7f3      	b.n	7d2a <twi_transfer+0xb6>
    7d42:	6142      	str	r2, [r0, #20]
    7d44:	e7b0      	b.n	7ca8 <twi_transfer+0x34>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    7d46:	f8d0 4108 	ldr.w	r4, [r0, #264]	; 0x108
        else if (nrf_twi_event_check(p_twi, NRF_TWI_EVENT_RXDREADY))
    7d4a:	2c00      	cmp	r4, #0
    7d4c:	d0ac      	beq.n	7ca8 <twi_transfer+0x34>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    7d4e:	f8c0 2108 	str.w	r2, [r0, #264]	; 0x108
    7d52:	f8d0 4108 	ldr.w	r4, [r0, #264]	; 0x108
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    7d56:	f8d0 4124 	ldr.w	r4, [r0, #292]	; 0x124
            if (nrf_twi_event_check(p_twi, NRF_TWI_EVENT_ERROR))
    7d5a:	2c00      	cmp	r4, #0
    7d5c:	d1bf      	bne.n	7cde <twi_transfer+0x6a>
    if (p_cb->bytes_transferred < p_cb->curr_length)
    7d5e:	6b4a      	ldr	r2, [r1, #52]	; 0x34
    7d60:	6a8c      	ldr	r4, [r1, #40]	; 0x28
    7d62:	42a2      	cmp	r2, r4
    7d64:	d2a0      	bcs.n	7ca8 <twi_transfer+0x34>
        p_cb->p_curr_buf[p_cb->bytes_transferred] = nrf_twi_rxd_get(p_twi);
    7d66:	6a4c      	ldr	r4, [r1, #36]	; 0x24
    return (uint8_t)p_reg->RXD;
    7d68:	f8d0 5518 	ldr.w	r5, [r0, #1304]	; 0x518
    7d6c:	54a5      	strb	r5, [r4, r2]
        ++(p_cb->bytes_transferred);
    7d6e:	6b4a      	ldr	r2, [r1, #52]	; 0x34
        if ((p_cb->bytes_transferred == p_cb->curr_length - 1) && (!TWI_FLAG_SUSPEND(p_cb->flags)))
    7d70:	6a8c      	ldr	r4, [r1, #40]	; 0x28
        ++(p_cb->bytes_transferred);
    7d72:	3201      	adds	r2, #1
        if ((p_cb->bytes_transferred == p_cb->curr_length - 1) && (!TWI_FLAG_SUSPEND(p_cb->flags)))
    7d74:	1e65      	subs	r5, r4, #1
    7d76:	42aa      	cmp	r2, r5
        ++(p_cb->bytes_transferred);
    7d78:	634a      	str	r2, [r1, #52]	; 0x34
        if ((p_cb->bytes_transferred == p_cb->curr_length - 1) && (!TWI_FLAG_SUSPEND(p_cb->flags)))
    7d7a:	d108      	bne.n	7d8e <twi_transfer+0x11a>
    7d7c:	6a0a      	ldr	r2, [r1, #32]
    7d7e:	0654      	lsls	r4, r2, #25
    7d80:	d402      	bmi.n	7d88 <twi_transfer+0x114>
    p_reg->SHORTS = mask;
    7d82:	2202      	movs	r2, #2
    7d84:	f8c0 2200 	str.w	r2, [r0, #512]	; 0x200
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    7d88:	2201      	movs	r2, #1
    7d8a:	6202      	str	r2, [r0, #32]
    7d8c:	e78c      	b.n	7ca8 <twi_transfer+0x34>
        else if (p_cb->bytes_transferred == p_cb->curr_length && (!TWI_FLAG_SUSPEND(p_cb->flags)))
    7d8e:	42a2      	cmp	r2, r4
    7d90:	d1fa      	bne.n	7d88 <twi_transfer+0x114>
    7d92:	6a0a      	ldr	r2, [r1, #32]
    7d94:	0652      	lsls	r2, r2, #25
    7d96:	d587      	bpl.n	7ca8 <twi_transfer+0x34>
            p_cb->prev_suspend = TWI_SUSPEND_RX;
    7d98:	2302      	movs	r3, #2
    7d9a:	f881 302d 	strb.w	r3, [r1, #45]	; 0x2d
            return false;
    7d9e:	e7c4      	b.n	7d2a <twi_transfer+0xb6>
    return true;
    7da0:	2001      	movs	r0, #1
    7da2:	e7c3      	b.n	7d2c <twi_transfer+0xb8>

00007da4 <twi_irq_handler>:
{
    7da4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7da8:	b086      	sub	sp, #24
    7daa:	4680      	mov	r8, r0
    7dac:	460c      	mov	r4, r1
    if (twi_transfer(p_twi, p_cb))
    7dae:	f7ff ff61 	bl	7c74 <twi_transfer>
    7db2:	2800      	cmp	r0, #0
    7db4:	d146      	bne.n	7e44 <twi_irq_handler+0xa0>
    if (!p_cb->error &&
    7db6:	f891 502f 	ldrb.w	r5, [r1, #47]	; 0x2f
    7dba:	b9fd      	cbnz	r5, 7dfc <twi_irq_handler+0x58>
        ((p_cb->xfer_desc.type == NRFX_TWI_XFER_TXRX) ||
    7dbc:	7b0a      	ldrb	r2, [r1, #12]
    if (!p_cb->error &&
    7dbe:	1e93      	subs	r3, r2, #2
    7dc0:	2b01      	cmp	r3, #1
    7dc2:	d81b      	bhi.n	7dfc <twi_irq_handler+0x58>
         (p_cb->xfer_desc.type == NRFX_TWI_XFER_TXTX)) &&
    7dc4:	6a48      	ldr	r0, [r1, #36]	; 0x24
    7dc6:	698b      	ldr	r3, [r1, #24]
    7dc8:	4298      	cmp	r0, r3
    7dca:	d117      	bne.n	7dfc <twi_irq_handler+0x58>
        p_cb->p_curr_buf      = p_cb->xfer_desc.p_secondary_buf;
    7dcc:	69cb      	ldr	r3, [r1, #28]
    7dce:	624b      	str	r3, [r1, #36]	; 0x24
        p_cb->curr_length     = p_cb->xfer_desc.secondary_length;
    7dd0:	694b      	ldr	r3, [r1, #20]
    7dd2:	628b      	str	r3, [r1, #40]	; 0x28
        p_cb->curr_tx_no_stop = (p_cb->flags & NRFX_TWI_FLAG_TX_NO_STOP);
    7dd4:	6a0b      	ldr	r3, [r1, #32]
        p_cb->prev_suspend    = TWI_NO_SUSPEND;
    7dd6:	f881 502d 	strb.w	r5, [r1, #45]	; 0x2d
        p_cb->curr_tx_no_stop = (p_cb->flags & NRFX_TWI_FLAG_TX_NO_STOP);
    7dda:	f3c3 1340 	ubfx	r3, r3, #5, #1
        if (p_cb->xfer_desc.type == NRFX_TWI_XFER_TXTX)
    7dde:	2a03      	cmp	r2, #3
        p_cb->curr_tx_no_stop = (p_cb->flags & NRFX_TWI_FLAG_TX_NO_STOP);
    7de0:	f881 302c 	strb.w	r3, [r1, #44]	; 0x2c
            (void)twi_tx_start_transfer(p_twi, p_cb);
    7de4:	4640      	mov	r0, r8
        if (p_cb->xfer_desc.type == NRFX_TWI_XFER_TXTX)
    7de6:	d104      	bne.n	7df2 <twi_irq_handler+0x4e>
}
    7de8:	b006      	add	sp, #24
    7dea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
            (void)twi_tx_start_transfer(p_twi, p_cb);
    7dee:	f7fd b993 	b.w	5118 <twi_tx_start_transfer>
}
    7df2:	b006      	add	sp, #24
    7df4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
            (void)twi_rx_start_transfer(p_twi, p_cb);
    7df8:	f7fd ba10 	b.w	521c <twi_rx_start_transfer>
        event.xfer_desc = p_cb->xfer_desc;
    7dfc:	f104 070c 	add.w	r7, r4, #12
    7e00:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
    7e02:	ae01      	add	r6, sp, #4
    7e04:	c60f      	stmia	r6!, {r0, r1, r2, r3}
    7e06:	683b      	ldr	r3, [r7, #0]
    7e08:	6033      	str	r3, [r6, #0]
        if (p_cb->error)
    7e0a:	b165      	cbz	r5, 7e26 <twi_irq_handler+0x82>
    uint32_t error_source = p_reg->ERRORSRC;
    7e0c:	f8d8 54c4 	ldr.w	r5, [r8, #1220]	; 0x4c4
    p_reg->ERRORSRC = error_source;
    7e10:	f8c8 54c4 	str.w	r5, [r8, #1220]	; 0x4c4
            if (errorsrc & NRF_TWI_ERROR_ADDRESS_NACK)
    7e14:	07a9      	lsls	r1, r5, #30
    7e16:	d418      	bmi.n	7e4a <twi_irq_handler+0xa6>
            else if (errorsrc & NRF_TWI_ERROR_DATA_NACK)
    7e18:	076a      	lsls	r2, r5, #29
    7e1a:	d418      	bmi.n	7e4e <twi_irq_handler+0xaa>
            else if (errorsrc & NRF_TWI_ERROR_OVERRUN)
    7e1c:	f005 0501 	and.w	r5, r5, #1
    7e20:	f1c5 0504 	rsb	r5, r5, #4
    7e24:	b2ed      	uxtb	r5, r5
        p_cb->busy = false;
    7e26:	2300      	movs	r3, #0
    7e28:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
        if (!(TWI_FLAG_NO_HANDLER_IN_USE(p_cb->flags)) || p_cb->error)
    7e2c:	6a23      	ldr	r3, [r4, #32]
                event.type = NRFX_TWI_EVT_ADDRESS_NACK;
    7e2e:	f88d 5000 	strb.w	r5, [sp]
        if (!(TWI_FLAG_NO_HANDLER_IN_USE(p_cb->flags)) || p_cb->error)
    7e32:	075b      	lsls	r3, r3, #29
    7e34:	d502      	bpl.n	7e3c <twi_irq_handler+0x98>
    7e36:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
    7e3a:	b11b      	cbz	r3, 7e44 <twi_irq_handler+0xa0>
            p_cb->handler(&event, p_cb->p_context);
    7e3c:	e9d4 3100 	ldrd	r3, r1, [r4]
    7e40:	4668      	mov	r0, sp
    7e42:	4798      	blx	r3
}
    7e44:	b006      	add	sp, #24
    7e46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    7e4a:	2501      	movs	r5, #1
    7e4c:	e7eb      	b.n	7e26 <twi_irq_handler+0x82>
    7e4e:	2502      	movs	r5, #2
    7e50:	e7e9      	b.n	7e26 <twi_irq_handler+0x82>

00007e52 <nrf_gpio_pin_set>:
{
    7e52:	b507      	push	{r0, r1, r2, lr}
    7e54:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    7e56:	a801      	add	r0, sp, #4
    7e58:	f7fd fb56 	bl	5508 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    7e5c:	9a01      	ldr	r2, [sp, #4]
    7e5e:	2301      	movs	r3, #1
    7e60:	4093      	lsls	r3, r2
    p_reg->OUTSET = set_mask;
    7e62:	f8c0 3508 	str.w	r3, [r0, #1288]	; 0x508
}
    7e66:	b003      	add	sp, #12
    7e68:	f85d fb04 	ldr.w	pc, [sp], #4

00007e6c <_GetAvailWriteSpace>:
  RdOff = pRing->RdOff;
    7e6c:	6903      	ldr	r3, [r0, #16]
  WrOff = pRing->WrOff;
    7e6e:	68c2      	ldr	r2, [r0, #12]
  if (RdOff <= WrOff) {
    7e70:	4293      	cmp	r3, r2
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
    7e72:	bf9c      	itt	ls
    7e74:	6881      	ldrls	r1, [r0, #8]
    7e76:	185b      	addls	r3, r3, r1
    r = RdOff - WrOff - 1u;
    7e78:	3b01      	subs	r3, #1
    7e7a:	1a98      	subs	r0, r3, r2
}
    7e7c:	4770      	bx	lr

00007e7e <_WriteNoCheck>:
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
    7e7e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  Rem = pRing->SizeOfBuffer - WrOff;
    7e82:	e9d0 8402 	ldrd	r8, r4, [r0, #8]
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
    7e86:	4605      	mov	r5, r0
  Rem = pRing->SizeOfBuffer - WrOff;
    7e88:	eba8 0604 	sub.w	r6, r8, r4
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
    7e8c:	6840      	ldr	r0, [r0, #4]
  if (Rem > NumBytes) {
    7e8e:	4296      	cmp	r6, r2
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
    7e90:	4420      	add	r0, r4
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
    7e92:	460f      	mov	r7, r1
    pRing->WrOff = WrOff + NumBytes;
    7e94:	4414      	add	r4, r2
  if (Rem > NumBytes) {
    7e96:	d906      	bls.n	7ea6 <_WriteNoCheck+0x28>
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    7e98:	f7ff f912 	bl	70c0 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    7e9c:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff + NumBytes;
    7ea0:	60ec      	str	r4, [r5, #12]
}
    7ea2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
    7ea6:	4632      	mov	r2, r6
    NumBytesAtOnce = NumBytes - Rem;
    7ea8:	eba4 0408 	sub.w	r4, r4, r8
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
    7eac:	f7ff f908 	bl	70c0 <memcpy>
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    7eb0:	6868      	ldr	r0, [r5, #4]
    7eb2:	4622      	mov	r2, r4
    7eb4:	19b9      	adds	r1, r7, r6
    7eb6:	e7ef      	b.n	7e98 <_WriteNoCheck+0x1a>

00007eb8 <_WriteBlocking>:
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
    7eb8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  WrOff = pRing->WrOff;
    7ebc:	68c5      	ldr	r5, [r0, #12]
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
    7ebe:	4606      	mov	r6, r0
    7ec0:	4689      	mov	r9, r1
    7ec2:	4617      	mov	r7, r2
  NumBytesWritten = 0u;
    7ec4:	f04f 0800 	mov.w	r8, #0
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
    7ec8:	6933      	ldr	r3, [r6, #16]
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
    7eca:	68b4      	ldr	r4, [r6, #8]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
    7ecc:	6870      	ldr	r0, [r6, #4]
    if (RdOff > WrOff) {
    7ece:	429d      	cmp	r5, r3
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
    7ed0:	bf28      	it	cs
    7ed2:	191b      	addcs	r3, r3, r4
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
    7ed4:	1b64      	subs	r4, r4, r5
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
    7ed6:	42bc      	cmp	r4, r7
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
    7ed8:	f103 33ff 	add.w	r3, r3, #4294967295
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
    7edc:	bf28      	it	cs
    7ede:	463c      	movcs	r4, r7
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
    7ee0:	1b5b      	subs	r3, r3, r5
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
    7ee2:	429c      	cmp	r4, r3
    7ee4:	bf28      	it	cs
    7ee6:	461c      	movcs	r4, r3
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
    7ee8:	4649      	mov	r1, r9
    7eea:	4622      	mov	r2, r4
    7eec:	4428      	add	r0, r5
    7eee:	f7ff f8e7 	bl	70c0 <memcpy>
    if (WrOff == pRing->SizeOfBuffer) {
    7ef2:	68b3      	ldr	r3, [r6, #8]
    WrOff           += NumBytesToWrite;
    7ef4:	4425      	add	r5, r4
    NumBytesWritten += NumBytesToWrite;
    7ef6:	44a0      	add	r8, r4
    pBuffer         += NumBytesToWrite;
    7ef8:	44a1      	add	r9, r4
    NumBytes        -= NumBytesToWrite;
    7efa:	1b3f      	subs	r7, r7, r4
      WrOff = 0u;
    7efc:	42ab      	cmp	r3, r5
    7efe:	bf08      	it	eq
    7f00:	2500      	moveq	r5, #0
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    7f02:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff;
    7f06:	60f5      	str	r5, [r6, #12]
  } while (NumBytes);
    7f08:	2f00      	cmp	r7, #0
    7f0a:	d1dd      	bne.n	7ec8 <_WriteBlocking+0x10>
}
    7f0c:	4640      	mov	r0, r8
    7f0e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00007f12 <SEGGER_RTT_Init>:
*    Initializes the RTT Control Block.
*    Should be used in RAM targets, at start of the application.
*
*/
void SEGGER_RTT_Init (void) {
  _DoInit();
    7f12:	f7fd bb6b 	b.w	55ec <_DoInit>

00007f16 <rtt_init>:
 */

K_MUTEX_DEFINE(rtt_term_mutex);

static int rtt_init(void)
{
    7f16:	b508      	push	{r3, lr}

	SEGGER_RTT_Init();
    7f18:	f7ff fffb 	bl	7f12 <SEGGER_RTT_Init>

	return 0;
}
    7f1c:	2000      	movs	r0, #0
    7f1e:	bd08      	pop	{r3, pc}

00007f20 <z_device_state_init>:

	while (dev < __device_end) {
		z_object_init(dev);
		++dev;
	}
}
    7f20:	4770      	bx	lr

00007f22 <z_device_is_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
    7f22:	b140      	cbz	r0, 7f36 <z_device_is_ready+0x14>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
    7f24:	68c3      	ldr	r3, [r0, #12]
    7f26:	7858      	ldrb	r0, [r3, #1]
    7f28:	f010 0001 	ands.w	r0, r0, #1
    7f2c:	bf1e      	ittt	ne
    7f2e:	7818      	ldrbne	r0, [r3, #0]
    7f30:	fab0 f080 	clzne	r0, r0
    7f34:	0940      	lsrne	r0, r0, #5
}
    7f36:	4770      	bx	lr

00007f38 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    7f38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7f3a:	4605      	mov	r5, r0
    7f3c:	460e      	mov	r6, r1
	__asm__ volatile(
    7f3e:	f04f 0320 	mov.w	r3, #32
    7f42:	f3ef 8711 	mrs	r7, BASEPRI
    7f46:	f383 8812 	msr	BASEPRI_MAX, r3
    7f4a:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
    7f4e:	f7fe f9e7 	bl	6320 <z_impl_z_current_get>

#ifndef CONFIG_XTENSA
	coredump(reason, esf, thread);
#endif

	k_sys_fatal_error_handler(reason, esf);
    7f52:	4631      	mov	r1, r6
    7f54:	4604      	mov	r4, r0
    7f56:	4628      	mov	r0, r5
    7f58:	f7ff fd28 	bl	79ac <k_sys_fatal_error_handler>
	__asm__ volatile(
    7f5c:	f387 8811 	msr	BASEPRI, r7
    7f60:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
    7f64:	4620      	mov	r0, r4
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
    7f66:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    7f6a:	f7fa b879 	b.w	2060 <z_impl_k_thread_abort>

00007f6e <z_early_memset>:
	(void) memset(dst, c, n);
    7f6e:	f7ff b8b2 	b.w	70d6 <memset>

00007f72 <z_early_memcpy>:
	(void) memcpy(dst, src, n);
    7f72:	f7ff b8a5 	b.w	70c0 <memcpy>

00007f76 <create_free_list>:
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
    7f76:	e9d0 3203 	ldrd	r3, r2, [r0, #12]
    7f7a:	4313      	orrs	r3, r2
    7f7c:	f013 0303 	ands.w	r3, r3, #3
    7f80:	d10c      	bne.n	7f9c <create_free_list+0x26>
	slab->free_list = NULL;
    7f82:	6143      	str	r3, [r0, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
    7f84:	6881      	ldr	r1, [r0, #8]
    7f86:	4299      	cmp	r1, r3
    7f88:	d801      	bhi.n	7f8e <create_free_list+0x18>
	return 0;
    7f8a:	2000      	movs	r0, #0
    7f8c:	4770      	bx	lr
		*(char **)p = slab->free_list;
    7f8e:	6941      	ldr	r1, [r0, #20]
    7f90:	6011      	str	r1, [r2, #0]
		p += slab->block_size;
    7f92:	68c1      	ldr	r1, [r0, #12]
		slab->free_list = p;
    7f94:	6142      	str	r2, [r0, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
    7f96:	3301      	adds	r3, #1
		p += slab->block_size;
    7f98:	440a      	add	r2, r1
	for (j = 0U; j < slab->num_blocks; j++) {
    7f9a:	e7f3      	b.n	7f84 <create_free_list+0xe>
		return -EINVAL;
    7f9c:	f06f 0015 	mvn.w	r0, #21
}
    7fa0:	4770      	bx	lr

00007fa2 <k_mem_slab_init>:
{
    7fa2:	b510      	push	{r4, lr}
	slab->block_size = block_size;
    7fa4:	e9c0 3202 	strd	r3, r2, [r0, #8]
	slab->num_used = 0U;
    7fa8:	2300      	movs	r3, #0
	slab->buffer = buffer;
    7faa:	6101      	str	r1, [r0, #16]
	slab->num_used = 0U;
    7fac:	6183      	str	r3, [r0, #24]
{
    7fae:	4604      	mov	r4, r0
	rc = create_free_list(slab);
    7fb0:	f7ff ffe1 	bl	7f76 <create_free_list>
	if (rc < 0) {
    7fb4:	2800      	cmp	r0, #0
	list->tail = (sys_dnode_t *)list;
    7fb6:	bfa8      	it	ge
    7fb8:	e9c4 4400 	strdge	r4, r4, [r4]
}
    7fbc:	bd10      	pop	{r4, pc}

00007fbe <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
    7fbe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7fc0:	4604      	mov	r4, r0
    7fc2:	460d      	mov	r5, r1
	__asm__ volatile(
    7fc4:	f04f 0320 	mov.w	r3, #32
    7fc8:	f3ef 8611 	mrs	r6, BASEPRI
    7fcc:	f383 8812 	msr	BASEPRI_MAX, r3
    7fd0:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, free, slab);
	if (slab->free_list == NULL && IS_ENABLED(CONFIG_MULTITHREADING)) {
    7fd4:	6947      	ldr	r7, [r0, #20]
    7fd6:	b977      	cbnz	r7, 7ff6 <k_mem_slab_free+0x38>
		struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
    7fd8:	f000 f8eb 	bl	81b2 <z_unpend_first_thread>

		if (pending_thread != NULL) {
    7fdc:	b158      	cbz	r0, 7ff6 <k_mem_slab_free+0x38>
			SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

			z_thread_return_value_set_with_data(pending_thread, 0, *mem);
    7fde:	682a      	ldr	r2, [r5, #0]
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
    7fe0:	6142      	str	r2, [r0, #20]
    7fe2:	6787      	str	r7, [r0, #120]	; 0x78
			z_ready_thread(pending_thread);
    7fe4:	f000 f886 	bl	80f4 <z_ready_thread>
			z_reschedule(&slab->lock, key);
    7fe8:	4631      	mov	r1, r6
    7fea:	f104 0008 	add.w	r0, r4, #8
	slab->num_used--;

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

	k_spin_unlock(&slab->lock, key);
}
    7fee:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			z_reschedule(&slab->lock, key);
    7ff2:	f7fe b85f 	b.w	60b4 <z_reschedule>
	**(char ***) mem = slab->free_list;
    7ff6:	682b      	ldr	r3, [r5, #0]
    7ff8:	6962      	ldr	r2, [r4, #20]
    7ffa:	601a      	str	r2, [r3, #0]
	slab->free_list = *(char **) mem;
    7ffc:	682b      	ldr	r3, [r5, #0]
    7ffe:	6163      	str	r3, [r4, #20]
	slab->num_used--;
    8000:	69a3      	ldr	r3, [r4, #24]
    8002:	3b01      	subs	r3, #1
    8004:	61a3      	str	r3, [r4, #24]
	__asm__ volatile(
    8006:	f386 8811 	msr	BASEPRI, r6
    800a:	f3bf 8f6f 	isb	sy
}
    800e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00008010 <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    8010:	f3ef 8005 	mrs	r0, IPSR
}
    8014:	3800      	subs	r0, #0
    8016:	bf18      	it	ne
    8018:	2001      	movne	r0, #1
    801a:	4770      	bx	lr

0000801c <z_impl_k_thread_name_set>:
}
    801c:	f06f 0057 	mvn.w	r0, #87	; 0x57
    8020:	4770      	bx	lr

00008022 <z_impl_k_thread_start>:
	z_sched_start(thread);
    8022:	f7fe b859 	b.w	60d8 <z_sched_start>

00008026 <z_pm_save_idle_exit>:
{
    8026:	b508      	push	{r3, lr}
	pm_system_resume();
    8028:	f7f9 fa78 	bl	151c <pm_system_resume>
}
    802c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	sys_clock_idle_exit();
    8030:	f7ff bcaf 	b.w	7992 <sys_clock_idle_exit>

00008034 <adjust_owner_prio.isra.0>:
	if (mutex->owner->base.prio != new_prio) {
    8034:	f990 300e 	ldrsb.w	r3, [r0, #14]
    8038:	428b      	cmp	r3, r1
    803a:	d001      	beq.n	8040 <adjust_owner_prio.isra.0+0xc>
		return z_set_prio(mutex->owner, new_prio);
    803c:	f7fd bff4 	b.w	6028 <z_set_prio>
}
    8040:	2000      	movs	r0, #0
    8042:	4770      	bx	lr

00008044 <z_impl_k_mutex_init>:
{
    8044:	4603      	mov	r3, r0
	mutex->owner = NULL;
    8046:	2000      	movs	r0, #0
	mutex->lock_count = 0U;
    8048:	e9c3 0002 	strd	r0, r0, [r3, #8]
    804c:	e9c3 3300 	strd	r3, r3, [r3]
}
    8050:	4770      	bx	lr

00008052 <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || limit > K_SEM_MAX_LIMIT || initial_count > limit) {
    8052:	b13a      	cbz	r2, 8064 <z_impl_k_sem_init+0x12>
    8054:	428a      	cmp	r2, r1
    8056:	d305      	bcc.n	8064 <z_impl_k_sem_init+0x12>
	sem->limit = limit;
    8058:	e9c0 1202 	strd	r1, r2, [r0, #8]
    805c:	e9c0 0000 	strd	r0, r0, [r0]
	return 0;
    8060:	2000      	movs	r0, #0
    8062:	4770      	bx	lr
		return -EINVAL;
    8064:	f06f 0015 	mvn.w	r0, #21
}
    8068:	4770      	bx	lr

0000806a <flag_test_and_clear>:
	return (*flagp & BIT(bit)) != 0U;
    806a:	6802      	ldr	r2, [r0, #0]
	*flagp &= ~BIT(bit);
    806c:	2301      	movs	r3, #1
    806e:	408b      	lsls	r3, r1
    8070:	ea22 0303 	bic.w	r3, r2, r3
    8074:	6003      	str	r3, [r0, #0]
	return (*flagp & BIT(bit)) != 0U;
    8076:	fa22 f001 	lsr.w	r0, r2, r1
}
    807a:	f000 0001 	and.w	r0, r0, #1
    807e:	4770      	bx	lr

00008080 <sys_dlist_remove>:
	sys_dnode_t *const next = node->next;
    8080:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
    8084:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    8086:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    8088:	2300      	movs	r3, #0
	node->prev = NULL;
    808a:	e9c0 3300 	strd	r3, r3, [r0]
	sys_dnode_init(node);
}
    808e:	4770      	bx	lr

00008090 <unpend_thread_no_timeout>:
{
    8090:	b508      	push	{r3, lr}
	sys_dlist_remove(&thread->base.qnode_dlist);
    8092:	f7ff fff5 	bl	8080 <sys_dlist_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    8096:	7b43      	ldrb	r3, [r0, #13]
    8098:	f023 0302 	bic.w	r3, r3, #2
    809c:	7343      	strb	r3, [r0, #13]
	thread->base.pended_on = NULL;
    809e:	2300      	movs	r3, #0
    80a0:	6083      	str	r3, [r0, #8]
}
    80a2:	bd08      	pop	{r3, pc}

000080a4 <add_to_waitq_locked>:
{
    80a4:	b538      	push	{r3, r4, r5, lr}
    80a6:	4604      	mov	r4, r0
    80a8:	460d      	mov	r5, r1
	unready_thread(thread);
    80aa:	f7fd ff3f 	bl	5f2c <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
    80ae:	7b63      	ldrb	r3, [r4, #13]
    80b0:	f043 0302 	orr.w	r3, r3, #2
    80b4:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
    80b6:	b1e5      	cbz	r5, 80f2 <add_to_waitq_locked+0x4e>
		thread->base.pended_on = wait_q;
    80b8:	60a5      	str	r5, [r4, #8]
	return list->head == list;
    80ba:	682b      	ldr	r3, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    80bc:	429d      	cmp	r5, r3
    80be:	d109      	bne.n	80d4 <add_to_waitq_locked+0x30>
	sys_dnode_t *const tail = list->tail;
    80c0:	686b      	ldr	r3, [r5, #4]
	node->prev = tail;
    80c2:	e9c4 5300 	strd	r5, r3, [r4]
	tail->next = node;
    80c6:	601c      	str	r4, [r3, #0]
	list->tail = node;
    80c8:	606c      	str	r4, [r5, #4]
}
    80ca:	e012      	b.n	80f2 <add_to_waitq_locked+0x4e>
	return (node == list->tail) ? NULL : node->next;
    80cc:	686a      	ldr	r2, [r5, #4]
    80ce:	4293      	cmp	r3, r2
    80d0:	d0f6      	beq.n	80c0 <add_to_waitq_locked+0x1c>
    80d2:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    80d4:	2b00      	cmp	r3, #0
    80d6:	d0f3      	beq.n	80c0 <add_to_waitq_locked+0x1c>
	int32_t b1 = thread_1->base.prio;
    80d8:	f994 200e 	ldrsb.w	r2, [r4, #14]
	int32_t b2 = thread_2->base.prio;
    80dc:	f993 100e 	ldrsb.w	r1, [r3, #14]
	if (b1 != b2) {
    80e0:	428a      	cmp	r2, r1
    80e2:	d0f3      	beq.n	80cc <add_to_waitq_locked+0x28>
		if (z_sched_prio_cmp(thread, t) > 0) {
    80e4:	4291      	cmp	r1, r2
    80e6:	ddf1      	ble.n	80cc <add_to_waitq_locked+0x28>
	sys_dnode_t *const prev = successor->prev;
    80e8:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    80ea:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
    80ee:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    80f0:	605c      	str	r4, [r3, #4]
}
    80f2:	bd38      	pop	{r3, r4, r5, pc}

000080f4 <z_ready_thread>:
{
    80f4:	b510      	push	{r4, lr}
	__asm__ volatile(
    80f6:	f04f 0320 	mov.w	r3, #32
    80fa:	f3ef 8411 	mrs	r4, BASEPRI
    80fe:	f383 8812 	msr	BASEPRI_MAX, r3
    8102:	f3bf 8f6f 	isb	sy
			ready_thread(thread);
    8106:	f7fd fedd 	bl	5ec4 <ready_thread>
	__asm__ volatile(
    810a:	f384 8811 	msr	BASEPRI, r4
    810e:	f3bf 8f6f 	isb	sy
}
    8112:	bd10      	pop	{r4, pc}

00008114 <z_unpend_thread_no_timeout>:
{
    8114:	b508      	push	{r3, lr}
	__asm__ volatile(
    8116:	f04f 0220 	mov.w	r2, #32
    811a:	f3ef 8111 	mrs	r1, BASEPRI
    811e:	f382 8812 	msr	BASEPRI_MAX, r2
    8122:	f3bf 8f6f 	isb	sy
		if (thread->base.pended_on != NULL) {
    8126:	6883      	ldr	r3, [r0, #8]
    8128:	b10b      	cbz	r3, 812e <z_unpend_thread_no_timeout+0x1a>
			unpend_thread_no_timeout(thread);
    812a:	f7ff ffb1 	bl	8090 <unpend_thread_no_timeout>
	__asm__ volatile(
    812e:	f381 8811 	msr	BASEPRI, r1
    8132:	f3bf 8f6f 	isb	sy
}
    8136:	bd08      	pop	{r3, pc}

00008138 <z_sched_wake_thread>:
{
    8138:	b538      	push	{r3, r4, r5, lr}
    813a:	4604      	mov	r4, r0
	__asm__ volatile(
    813c:	f04f 0320 	mov.w	r3, #32
    8140:	f3ef 8511 	mrs	r5, BASEPRI
    8144:	f383 8812 	msr	BASEPRI_MAX, r3
    8148:	f3bf 8f6f 	isb	sy
		if (!killed) {
    814c:	7b43      	ldrb	r3, [r0, #13]
    814e:	f013 0f28 	tst.w	r3, #40	; 0x28
    8152:	d10b      	bne.n	816c <z_sched_wake_thread+0x34>
			if (thread->base.pended_on != NULL) {
    8154:	6883      	ldr	r3, [r0, #8]
    8156:	b10b      	cbz	r3, 815c <z_sched_wake_thread+0x24>
				unpend_thread_no_timeout(thread);
    8158:	f7ff ff9a 	bl	8090 <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_PRESTART;
    815c:	7b63      	ldrb	r3, [r4, #13]
			if (is_timeout) {
    815e:	b951      	cbnz	r1, 8176 <z_sched_wake_thread+0x3e>
    8160:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
    8164:	7363      	strb	r3, [r4, #13]
			ready_thread(thread);
    8166:	4620      	mov	r0, r4
    8168:	f7fd feac 	bl	5ec4 <ready_thread>
	__asm__ volatile(
    816c:	f385 8811 	msr	BASEPRI, r5
    8170:	f3bf 8f6f 	isb	sy
}
    8174:	bd38      	pop	{r3, r4, r5, pc}
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
    8176:	f003 03eb 	and.w	r3, r3, #235	; 0xeb
}
    817a:	e7f3      	b.n	8164 <z_sched_wake_thread+0x2c>

0000817c <z_thread_timeout>:
	z_sched_wake_thread(thread, true);
    817c:	2101      	movs	r1, #1
    817e:	3818      	subs	r0, #24
    8180:	f7ff bfda 	b.w	8138 <z_sched_wake_thread>

00008184 <z_unpend1_no_timeout>:
{
    8184:	b508      	push	{r3, lr}
    8186:	4603      	mov	r3, r0
	__asm__ volatile(
    8188:	f04f 0220 	mov.w	r2, #32
    818c:	f3ef 8111 	mrs	r1, BASEPRI
    8190:	f382 8812 	msr	BASEPRI_MAX, r2
    8194:	f3bf 8f6f 	isb	sy
	return list->head == list;
    8198:	6800      	ldr	r0, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    819a:	4283      	cmp	r3, r0
    819c:	d007      	beq.n	81ae <z_unpend1_no_timeout+0x2a>
		if (thread != NULL) {
    819e:	b108      	cbz	r0, 81a4 <z_unpend1_no_timeout+0x20>
			unpend_thread_no_timeout(thread);
    81a0:	f7ff ff76 	bl	8090 <unpend_thread_no_timeout>
	__asm__ volatile(
    81a4:	f381 8811 	msr	BASEPRI, r1
    81a8:	f3bf 8f6f 	isb	sy
}
    81ac:	bd08      	pop	{r3, pc}
    81ae:	2000      	movs	r0, #0
    81b0:	e7f8      	b.n	81a4 <z_unpend1_no_timeout+0x20>

000081b2 <z_unpend_first_thread>:
{
    81b2:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    81b4:	f04f 0320 	mov.w	r3, #32
    81b8:	f3ef 8511 	mrs	r5, BASEPRI
    81bc:	f383 8812 	msr	BASEPRI_MAX, r3
    81c0:	f3bf 8f6f 	isb	sy
	return list->head == list;
    81c4:	6804      	ldr	r4, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    81c6:	42a0      	cmp	r0, r4
    81c8:	d00d      	beq.n	81e6 <z_unpend_first_thread+0x34>
		if (thread != NULL) {
    81ca:	b134      	cbz	r4, 81da <z_unpend_first_thread+0x28>
			unpend_thread_no_timeout(thread);
    81cc:	4620      	mov	r0, r4
    81ce:	f7ff ff5f 	bl	8090 <unpend_thread_no_timeout>
    81d2:	f104 0018 	add.w	r0, r4, #24
    81d6:	f000 f841 	bl	825c <z_abort_timeout>
	__asm__ volatile(
    81da:	f385 8811 	msr	BASEPRI, r5
    81de:	f3bf 8f6f 	isb	sy
}
    81e2:	4620      	mov	r0, r4
    81e4:	bd38      	pop	{r3, r4, r5, pc}
    81e6:	2400      	movs	r4, #0
    81e8:	e7f7      	b.n	81da <z_unpend_first_thread+0x28>

000081ea <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    81ea:	4603      	mov	r3, r0
    81ec:	b920      	cbnz	r0, 81f8 <z_reschedule_irqlock+0xe>
    81ee:	f3ef 8205 	mrs	r2, IPSR
    81f2:	b90a      	cbnz	r2, 81f8 <z_reschedule_irqlock+0xe>
	ret = arch_swap(key);
    81f4:	f7f9 bc22 	b.w	1a3c <arch_swap>
    81f8:	f383 8811 	msr	BASEPRI, r3
    81fc:	f3bf 8f6f 	isb	sy
}
    8200:	4770      	bx	lr

00008202 <z_reschedule_unlocked>:
	__asm__ volatile(
    8202:	f04f 0320 	mov.w	r3, #32
    8206:	f3ef 8011 	mrs	r0, BASEPRI
    820a:	f383 8812 	msr	BASEPRI_MAX, r3
    820e:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
    8212:	f7ff bfea 	b.w	81ea <z_reschedule_irqlock>

00008216 <z_sched_wake>:
{
    8216:	b538      	push	{r3, r4, r5, lr}
    8218:	f04f 0320 	mov.w	r3, #32
    821c:	f3ef 8511 	mrs	r5, BASEPRI
    8220:	f383 8812 	msr	BASEPRI_MAX, r3
    8224:	f3bf 8f6f 	isb	sy
	return list->head == list;
    8228:	6804      	ldr	r4, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    822a:	42a0      	cmp	r0, r4
    822c:	d012      	beq.n	8254 <z_sched_wake+0x3e>
		if (thread != NULL) {
    822e:	b19c      	cbz	r4, 8258 <z_sched_wake+0x42>
    8230:	67a1      	str	r1, [r4, #120]	; 0x78
    8232:	6162      	str	r2, [r4, #20]
			unpend_thread_no_timeout(thread);
    8234:	4620      	mov	r0, r4
    8236:	f7ff ff2b 	bl	8090 <unpend_thread_no_timeout>
    823a:	f104 0018 	add.w	r0, r4, #24
    823e:	f000 f80d 	bl	825c <z_abort_timeout>
			ready_thread(thread);
    8242:	4620      	mov	r0, r4
    8244:	f7fd fe3e 	bl	5ec4 <ready_thread>
			ret = true;
    8248:	2001      	movs	r0, #1
	__asm__ volatile(
    824a:	f385 8811 	msr	BASEPRI, r5
    824e:	f3bf 8f6f 	isb	sy
}
    8252:	bd38      	pop	{r3, r4, r5, pc}
	bool ret = false;
    8254:	2000      	movs	r0, #0
    8256:	e7f8      	b.n	824a <z_sched_wake+0x34>
    8258:	4620      	mov	r0, r4
    825a:	e7f6      	b.n	824a <z_sched_wake+0x34>

0000825c <z_abort_timeout>:
{
    825c:	b510      	push	{r4, lr}
	__asm__ volatile(
    825e:	f04f 0220 	mov.w	r2, #32
    8262:	f3ef 8411 	mrs	r4, BASEPRI
    8266:	f382 8812 	msr	BASEPRI_MAX, r2
    826a:	f3bf 8f6f 	isb	sy
		if (sys_dnode_is_linked(&to->node)) {
    826e:	6803      	ldr	r3, [r0, #0]
    8270:	b13b      	cbz	r3, 8282 <z_abort_timeout+0x26>
			remove_timeout(to);
    8272:	f7fe f911 	bl	6498 <remove_timeout>
			ret = 0;
    8276:	2000      	movs	r0, #0
	__asm__ volatile(
    8278:	f384 8811 	msr	BASEPRI, r4
    827c:	f3bf 8f6f 	isb	sy
}
    8280:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
    8282:	f06f 0015 	mvn.w	r0, #21
    8286:	e7f7      	b.n	8278 <z_abort_timeout+0x1c>

00008288 <z_get_next_timeout_expiry>:
{
    8288:	b510      	push	{r4, lr}
	__asm__ volatile(
    828a:	f04f 0320 	mov.w	r3, #32
    828e:	f3ef 8411 	mrs	r4, BASEPRI
    8292:	f383 8812 	msr	BASEPRI_MAX, r3
    8296:	f3bf 8f6f 	isb	sy
		ret = next_timeout();
    829a:	f7fe f8dd 	bl	6458 <next_timeout>
	__asm__ volatile(
    829e:	f384 8811 	msr	BASEPRI, r4
    82a2:	f3bf 8f6f 	isb	sy
}
    82a6:	bd10      	pop	{r4, pc}

000082a8 <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
    82a8:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
    82aa:	f7fe f9f1 	bl	6690 <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
    82ae:	bd08      	pop	{r3, pc}

000082b0 <z_impl_k_uptime_ticks>:

int64_t z_impl_k_uptime_ticks(void)
{
	return sys_clock_tick_get();
    82b0:	f7fe b9ee 	b.w	6690 <sys_clock_tick_get>

000082b4 <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
    82b4:	b108      	cbz	r0, 82ba <z_impl_k_busy_wait+0x6>
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
    82b6:	f7fa b803 	b.w	22c0 <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
    82ba:	4770      	bx	lr

000082bc <z_impl_k_timer_stop>:
}
#include <syscalls/k_timer_start_mrsh.c>
#endif

void z_impl_k_timer_stop(struct k_timer *timer)
{
    82bc:	b510      	push	{r4, lr}
    82be:	4604      	mov	r4, r0
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, stop, timer);

	bool inactive = (z_abort_timeout(&timer->timeout) != 0);
    82c0:	f7ff ffcc 	bl	825c <z_abort_timeout>

	if (inactive) {
    82c4:	b9b0      	cbnz	r0, 82f4 <z_impl_k_timer_stop+0x38>
		return;
	}

	if (timer->stop_fn != NULL) {
    82c6:	6a63      	ldr	r3, [r4, #36]	; 0x24
    82c8:	b10b      	cbz	r3, 82ce <z_impl_k_timer_stop+0x12>
		timer->stop_fn(timer);
    82ca:	4620      	mov	r0, r4
    82cc:	4798      	blx	r3
	}

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		struct k_thread *pending_thread = z_unpend1_no_timeout(&timer->wait_q);
    82ce:	f104 0018 	add.w	r0, r4, #24
    82d2:	f7ff ff57 	bl	8184 <z_unpend1_no_timeout>

		if (pending_thread != NULL) {
    82d6:	b168      	cbz	r0, 82f4 <z_impl_k_timer_stop+0x38>
			z_ready_thread(pending_thread);
    82d8:	f7ff ff0c 	bl	80f4 <z_ready_thread>
	__asm__ volatile(
    82dc:	f04f 0320 	mov.w	r3, #32
    82e0:	f3ef 8011 	mrs	r0, BASEPRI
    82e4:	f383 8812 	msr	BASEPRI_MAX, r3
    82e8:	f3bf 8f6f 	isb	sy
			z_reschedule_unlocked();
		}
	}
}
    82ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    82f0:	f7ff bf7b 	b.w	81ea <z_reschedule_irqlock>
    82f4:	bd10      	pop	{r4, pc}

000082f6 <k_heap_init>:
{
    82f6:	b410      	push	{r4}
	sys_dlist_init(&w->waitq);
    82f8:	f100 040c 	add.w	r4, r0, #12
	list->tail = (sys_dnode_t *)list;
    82fc:	e9c0 4403 	strd	r4, r4, [r0, #12]
}
    8300:	f85d 4b04 	ldr.w	r4, [sp], #4
	sys_heap_init(&h->heap, mem, bytes);
    8304:	f7fe bce9 	b.w	6cda <sys_heap_init>

00008308 <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
    8308:	4770      	bx	lr
	...
